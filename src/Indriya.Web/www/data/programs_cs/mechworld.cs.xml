// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

// Main Behavior Program

using Indriya.Core.BehaviorEngine;

public class StartupBehavior : IExecuteOnceBehavior
{
    public void Execute(IBehaviorExecutionContext context)
    {
        // STARTUP_BLOCK
          var var_7b68b04c_ad2c_503b_b52f_fd2039135068= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("hello", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_7b68b04c_ad2c_503b_b52f_fd2039135068);
  var var_3dd45880_ae8e_5bcc_af58_73c431ccef2f= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("how are you?", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_3dd45880_ae8e_5bcc_af58_73c431ccef2f);

    }
}
// ReSharper disable CheckNamespace

using System;
using Indriya.Core.BehaviorEngine;

public class Behavior_741ca5a4_de6e_5253_8426_e338d83a4275 : ITriggerBehavior
{
    public string Name { get; set; }

    protected static BehaviorExecutionPriority Priority;

    public Behavior_741ca5a4_de6e_5253_8426_e338d83a4275()
    {
        GetPriority();
        GetExecutionLifetime();
        GetUid();
    }

    public static BehaviorExecutionPriority GetPriority()
    {
        // SET_PRIORITY
        Priority = BehaviorExecutionPriority.low;

        return Priority;
    }

    protected static BehaviorExecutionLifetime ExecutionLifetime;

    public static BehaviorExecutionLifetime GetExecutionLifetime()
    {
        // SET_EXECUTION_LIFETIME
        ExecutionLifetime = BehaviorExecutionLifetime.once;

        return ExecutionLifetime;
    }

    public int Id { get; set; }

    protected static string Uid;

    public static string GetUid()
    {
        // SET_UID
        Uid = "741ca5a4_de6e_5253_8426_e338d83a4275";

        return Uid;
    }

    private static bool _initActionsComplete;
    private static bool _cyclicActionsComplete;
    private static bool _exitActionsComplete;

    public static TriggerResult CheckTrigger(IBehaviorExecutionContext context)
    {
        var result = new TriggerResult {Active = false};

        if (context != null && !ExecutionComplete)
        {
            result = ((Func<TriggerResult>) (() => {
var ret = new TriggerResult(){Active = false};
var gestureInfoList = context.GetGestureInfoList("Greet_Left");
var gestureInfo = gestureInfoList.FirstOrDefault(s=>s.Confidence > 90);
if (gestureInfo.Active && gestureInfo.Confidence > 90)
{
Console.WriteLine("Gesture trigger received : {0} - {1}", gestureInfo.Name, gestureInfo.Confidence);
ret.HumanId = gestureInfo.HumanId;
ret.HumanInLoop = true;
ret.Active = true;
}
return ret;
}))();
        }
        return result;
    }

    public bool ExecutionUntil(IBehaviorExecutionContext context)
    {
        if (context != null)
        {
            // EXECUTE_UNTIL
            // EXECUTE_UNTIL_HERE
        }
        return true;
    }

    public string ActiveResource { get; set; }

    public static bool InitActionsComplete
    {
        get { return _initActionsComplete; }
        set { _initActionsComplete = value; }
    }

    public static bool CyclicActionsComplete
    {
        get { return _cyclicActionsComplete; }
        set { _cyclicActionsComplete = value; }
    }

    public static bool ExitActionsComplete
    {
        get { return _exitActionsComplete; }
        set { _exitActionsComplete = value; }
    }

    public static bool ExecutionComplete
    {
        get { return InitActionsComplete & CyclicActionsComplete & ExitActionsComplete; }
    }

    public bool ExecuteInit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!InitActionsComplete)
        {
            // INIT_BLOCK
            // INIT_BLOCK_HERE
            InitActionsComplete = true;
        }
        return InitActionsComplete;
    }

    public bool ExecuteCyclic(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!CyclicActionsComplete && InitActionsComplete)
        {
            // CYCLIC_BLOCK
              var var_6e09e7fe_9689_f9e8_9cb3_288f315240d6= new BehaviorInfo
  {
  BehaviorName = "Move To",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"x", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.5, false, "float")},
  {"y", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, false, "float")},
  {"theta", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, false, "float")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_6e09e7fe_9689_f9e8_9cb3_288f315240d6);
  var var_05da17e0_1f68_5f11_977d_b3030f73bf11= new BehaviorInfo{BehaviorName = "Dance",RobotName = "Hiro"};

  BehaviorModuleHelper.Execute(context, var_05da17e0_1f68_5f11_977d_b3030f73bf11);


            if (ExecutionLifetime == BehaviorExecutionLifetime.once)
            {
                CyclicActionsComplete = true;
            }
            else if (ExecutionLifetime == BehaviorExecutionLifetime.until)
            {
                var complete = ExecutionUntil(context);
                CyclicActionsComplete = !complete;
            }
        }
        return CyclicActionsComplete;
    }

    public bool ExecuteExit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!ExitActionsComplete && CyclicActionsComplete)
        {
            // EXIT_BLOCK
            // EXIT_BLOCK_HERE
            ExitActionsComplete = true;
        }
        return ExitActionsComplete;
    }

    public bool Execute(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        try
        {
            ExecuteInit(context, trigger);
            ExecuteCyclic(context, trigger);
            ExecuteExit(context, trigger);
            System.Console.WriteLine(@"Lifetime: {3} Init : {0}, Cyclic: {1}, Exit: {2}", InitActionsComplete,
                CyclicActionsComplete,
                ExitActionsComplete, ExecutionLifetime);
        }
        catch (BehaviorCanceledException ex)
        {
            Console.WriteLine(@"Execution canceled : {0}, {1} ,{2}", GetUid(), ex.Message, ex.StackTrace);
        }
        return ExecutionComplete;
    }
}
// ReSharper disable CheckNamespace

using System;
using Indriya.Core.BehaviorEngine;

public class Behavior_35047f2f_1578_8cc9_9c64_8bf80d5ad9bf : ITriggerBehavior
{
    public string Name { get; set; }

    protected static BehaviorExecutionPriority Priority;

    public Behavior_35047f2f_1578_8cc9_9c64_8bf80d5ad9bf()
    {
        GetPriority();
        GetExecutionLifetime();
        GetUid();
    }

    public static BehaviorExecutionPriority GetPriority()
    {
        // SET_PRIORITY
        Priority = BehaviorExecutionPriority.low;

        return Priority;
    }

    protected static BehaviorExecutionLifetime ExecutionLifetime;

    public static BehaviorExecutionLifetime GetExecutionLifetime()
    {
        // SET_EXECUTION_LIFETIME
        ExecutionLifetime = BehaviorExecutionLifetime.once;

        return ExecutionLifetime;
    }

    public int Id { get; set; }

    protected static string Uid;

    public static string GetUid()
    {
        // SET_UID
        Uid = "35047f2f_1578_8cc9_9c64_8bf80d5ad9bf";

        return Uid;
    }

    private static bool _initActionsComplete;
    private static bool _cyclicActionsComplete;
    private static bool _exitActionsComplete;

    public static TriggerResult CheckTrigger(IBehaviorExecutionContext context)
    {
        var result = new TriggerResult {Active = false};

        if (context != null && !ExecutionComplete)
        {
            result = ((Func<TriggerResult>) (() => {
var ret = new TriggerResult(){Active = false};
var voiceCommand = context.GetVoiceCommand("GO");
if (voiceCommand.Active && voiceCommand.Confidence > 70)
{
Console.WriteLine("Voice trigger received : {0} - {1}", voiceCommand.Name, voiceCommand.Confidence);
ret.Active = true;
}
return ret;
}))();
        }
        return result;
    }

    public bool ExecutionUntil(IBehaviorExecutionContext context)
    {
        if (context != null)
        {
            // EXECUTE_UNTIL
            // EXECUTE_UNTIL_HERE
        }
        return true;
    }

    public string ActiveResource { get; set; }

    public static bool InitActionsComplete
    {
        get { return _initActionsComplete; }
        set { _initActionsComplete = value; }
    }

    public static bool CyclicActionsComplete
    {
        get { return _cyclicActionsComplete; }
        set { _cyclicActionsComplete = value; }
    }

    public static bool ExitActionsComplete
    {
        get { return _exitActionsComplete; }
        set { _exitActionsComplete = value; }
    }

    public static bool ExecutionComplete
    {
        get { return InitActionsComplete & CyclicActionsComplete & ExitActionsComplete; }
    }

    public bool ExecuteInit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!InitActionsComplete)
        {
            // INIT_BLOCK
            // INIT_BLOCK_HERE
            InitActionsComplete = true;
        }
        return InitActionsComplete;
    }

    public bool ExecuteCyclic(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!CyclicActionsComplete && InitActionsComplete)
        {
            // CYCLIC_BLOCK
              var var_5bf1c2ad_ac2f_c04f_ad77_a4aeaec8abaa= new BehaviorInfo
  {
  BehaviorName = "Move To",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"x", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, false, "float")},
  {"y", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, false, "float")},
  {"theta", BehaviorModuleHelper.CreateBehaviorParameterOptions(3.141592653589793, false, "float")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_5bf1c2ad_ac2f_c04f_ad77_a4aeaec8abaa);
  var var_f4a29ada_a548_260a_a2fa_d923df3ae2e7= new BehaviorInfo
  {
  BehaviorName = "Move To",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"x", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.5, false, "float")},
  {"y", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, false, "float")},
  {"theta", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, false, "float")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_f4a29ada_a548_260a_a2fa_d923df3ae2e7);
  var var_45c9c6a1_35fa_33bc_b9e6_c05bc6ba0b84= new BehaviorInfo
  {
  BehaviorName = "Move To",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"x", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, false, "float")},
  {"y", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, false, "float")},
  {"theta", BehaviorModuleHelper.CreateBehaviorParameterOptions(3.141592653589793, false, "float")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_45c9c6a1_35fa_33bc_b9e6_c05bc6ba0b84);


            if (ExecutionLifetime == BehaviorExecutionLifetime.once)
            {
                CyclicActionsComplete = true;
            }
            else if (ExecutionLifetime == BehaviorExecutionLifetime.until)
            {
                var complete = ExecutionUntil(context);
                CyclicActionsComplete = !complete;
            }
        }
        return CyclicActionsComplete;
    }

    public bool ExecuteExit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!ExitActionsComplete && CyclicActionsComplete)
        {
            // EXIT_BLOCK
            // EXIT_BLOCK_HERE
            ExitActionsComplete = true;
        }
        return ExitActionsComplete;
    }

    public bool Execute(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        try
        {
            ExecuteInit(context, trigger);
            ExecuteCyclic(context, trigger);
            ExecuteExit(context, trigger);
            System.Console.WriteLine(@"Lifetime: {3} Init : {0}, Cyclic: {1}, Exit: {2}", InitActionsComplete,
                CyclicActionsComplete,
                ExitActionsComplete, ExecutionLifetime);
        }
        catch (BehaviorCanceledException ex)
        {
            Console.WriteLine(@"Execution canceled : {0}, {1} ,{2}", GetUid(), ex.Message, ex.StackTrace);
        }
        return ExecutionComplete;
    }
}
using Indriya.Core.BehaviorEngine;

public class ExitBehavior : IExecuteOnceBehavior
{
    public void Execute(IBehaviorExecutionContext context)
    {
        // EXIT_BLOCK
          var var_1876a6c7_b4fc_32a5_8743_98b18f49212a= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("good bye", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_1876a6c7_b4fc_32a5_8743_98b18f49212a);
  var var_b235da1a_1971_9d3e_9810_bffd9ed1baca= new BehaviorInfo
  {
  BehaviorName = "Take Rest",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>()
  };

  BehaviorModuleHelper.Execute(context, var_b235da1a_1971_9d3e_9810_bffd9ed1baca);

    }
}