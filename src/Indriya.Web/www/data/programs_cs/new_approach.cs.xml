// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;

// Main Behavior Program

// ReSharper disable CheckNamespace
public class Behavior_ee9e5695_82bb_212b_bc52_a0aa524941f8 : ITriggerBehavior
{
    public string Name { get; set; }

    protected static BehaviorExecutionPriority Priority;

    public Behavior_ee9e5695_82bb_212b_bc52_a0aa524941f8()
    {
        GetPriority();
        GetExecutionLifetime();
        GetUid();
    }

    public static BehaviorExecutionPriority GetPriority()
    {
        // SET_PRIORITY
        Priority = BehaviorExecutionPriority.low;

        return Priority;
    }

    protected static BehaviorExecutionLifetime ExecutionLifetime;

    public static BehaviorExecutionLifetime GetExecutionLifetime()
    {
        // SET_EXECUTION_LIFETIME
        ExecutionLifetime = BehaviorExecutionLifetime.forever;

        return ExecutionLifetime;
    }

    public int Id { get; set; }

    protected static string Uid;

    public static string GetUid()
    {
        // SET_UID
        Uid = "ee9e5695_82bb_212b_bc52_a0aa524941f8";

        return Uid;
    }

    private static bool _initActionsComplete;
    private static bool _cyclicActionsComplete;
    private static bool _exitActionsComplete;

    public static TriggerResult CheckTrigger(IBehaviorExecutionContext context)
    {
        var result = new TriggerResult {Active = false};
        if (context != null)
        {
            var gestureInfo = context.GetGestureInfo("Greet_Left");
if (gestureInfo.Active && gestureInfo.Confidence > 90)
{
Console.WriteLine("Gesture trigger received : {0} - {1}", gestureInfo.Name, gestureInfo.Confidence);
result.HumanId = gestureInfo.HumanId;
result.HumanInLoop = true;
result.Active = true;
}

        }
        return result;
    }

    public bool ExecutionUntil(IBehaviorExecutionContext context)
    {
        if (context != null)
        {
            // EXECUTE_UNTIL
            // EXECUTE_UNTIL_HERE
        }
        return true;
    }

    public string ActiveResource { get; set; }

    public static bool InitActionsComplete
    {
        get { return _initActionsComplete; }
        set { _initActionsComplete = value; }
    }

    public static bool CyclicActionsComplete
    {
        get { return _cyclicActionsComplete; }
        set { _cyclicActionsComplete = value; }
    }

    public static bool ExitActionsComplete
    {
        get { return _exitActionsComplete; }
        set { _exitActionsComplete = value; }
    }

    public static bool ExecutionComplete
    {
        get { return InitActionsComplete & CyclicActionsComplete & ExitActionsComplete; }
    }

    public bool ExecuteInit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!InitActionsComplete)
        {
            // INIT_BLOCK
            
            InitActionsComplete = true;
        }
        return InitActionsComplete;
    }

    public bool ExecuteCyclic(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!CyclicActionsComplete && InitActionsComplete)
        {
            // CYCLIC_BLOCK
              var var_7b0be6a6_7718_8295_bb12_c1505fbe7fa1= new BehaviorInfo{BehaviorName = "Move To",Parameters = new Dictionary<string, object>{{"translation", BehaviorModuleHelper.CreateBehaviorParameterOptions("0", false, "float")},{"rotation", BehaviorModuleHelper.CreateBehaviorParameterOptions("1", false, "float")},{"human", BehaviorModuleHelper.CreateBehaviorParameterOptions("1", false, "float")},{"dist", BehaviorModuleHelper.CreateBehaviorParameterOptions(2.00, false, "float")},{"x", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, true, "float")},{"y", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, true, "float")},{"theta", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, true, "float")}}};

  if (context.RefreshApproachParameters(var_7b0be6a6_7718_8295_bb12_c1505fbe7fa1, trigger)) {
  BehaviorModuleHelper.Execute(context, var_7b0be6a6_7718_8295_bb12_c1505fbe7fa1);
  }
  var var_7713eb17_09b1_6797_89ee_4a16071410ea= new BehaviorInfo{BehaviorName = "Move To",Parameters = new Dictionary<string, object>{{"translation", BehaviorModuleHelper.CreateBehaviorParameterOptions("1", false, "float")},{"rotation", BehaviorModuleHelper.CreateBehaviorParameterOptions("0", false, "float")},{"human", BehaviorModuleHelper.CreateBehaviorParameterOptions("1", false, "float")},{"dist", BehaviorModuleHelper.CreateBehaviorParameterOptions(2.00, false, "float")},{"x", BehaviorModuleHelper.CreateBehaviorParameterOptions(2.00, true, "float")},{"y", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, true, "float")},{"theta", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, true, "float")}}};

  if (context.RefreshApproachParameters(var_7713eb17_09b1_6797_89ee_4a16071410ea, trigger)) {
  BehaviorModuleHelper.Execute(context, var_7713eb17_09b1_6797_89ee_4a16071410ea);
  }

            
            if (ExecutionLifetime == BehaviorExecutionLifetime.once)
            {
                CyclicActionsComplete = true;
            }
            else if (ExecutionLifetime == BehaviorExecutionLifetime.until)
            {
                var complete = ExecutionUntil(context);
                CyclicActionsComplete = !complete;
            }
        }
        return CyclicActionsComplete;
    }

    public bool ExecuteExit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!ExitActionsComplete && CyclicActionsComplete)
        {
            // EXIT_BLOCK
            
            ExitActionsComplete = true;
        }
        return ExitActionsComplete;
    }

    public bool Execute(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        ExecuteInit(context, trigger);
        ExecuteCyclic(context, trigger);
        ExecuteExit(context, trigger);
        System.Console.WriteLine(@"Lifetime: {3} Init : {0}, Cyclic: {1}, Exit: {2}", InitActionsComplete,
            CyclicActionsComplete,
            ExitActionsComplete, ExecutionLifetime);
        return ExecutionComplete;
    }
}