// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;

// Main Behavior Program

using System;
using NetMQ.zmq;

public class Behavior_c8e88a19_2926_69cf_aac1_28ccf5f4a3e7 : ITriggerBehavior
{
    public string Name { get; set; }

    protected static BehaviorExecutionPriority Priority;

    public Behavior_c8e88a19_2926_69cf_aac1_28ccf5f4a3e7()
    {
        GetPriority();
        GetExecutionLifetime();
        GetUid();
    }

    public static BehaviorExecutionPriority GetPriority()
    {
        // SET_PRIORITY
        Priority = BehaviorExecutionPriority.low;

        return Priority;
    }

    protected static BehaviorExecutionLifetime ExecutionLifetime;

    public static BehaviorExecutionLifetime GetExecutionLifetime()
    {
        // SET_EXECUTION_LIFETIME
        ExecutionLifetime = BehaviorExecutionLifetime.forever;

        return ExecutionLifetime;
    }

    public int Id { get; set; }

    protected static string Uid;

    public static string GetUid()
    {
        // SET_UID
        Uid = "c8e88a19_2926_69cf_aac1_28ccf5f4a3e7";

        return Uid;
    }

    private static bool _initActionsComplete;
    private static bool _cyclicActionsComplete;
    private static bool _exitActionsComplete;

    public static TriggerResult CheckTrigger(IBehaviorExecutionContext ctx)
    {
        var result = new TriggerResult {Active = false};
        if (ctx != null)
        {
            var gestureInfo = ctx.GetGestureInfo("Greet_Left");
if (gestureInfo.Active && gestureInfo.Confidence > 90)
{
Console.WriteLine("Gesture trigger received : {0} - {1}", gestureInfo.Name, gestureInfo.Confidence);
result.HumanId = gestureInfo.HumanId;
result.HumanInLoop = true;
result.Active = true;
}

        }
        return result;
    }

    public bool ExecutionUntil(IBehaviorExecutionContext ctx)
    {
        if (ctx != null)
        {
            // EXECUTE_UNTIL
            // EXECUTE_UNTIL_HERE
        }
        return true;
    }

    public string ActiveResource { get; set; }

    public static bool InitActionsComplete
    {
        get { return _initActionsComplete; }
        set { _initActionsComplete = value; }
    }

    public static bool CyclicActionsComplete
    {
        get { return _cyclicActionsComplete; }
        set { _cyclicActionsComplete = value; }
    }

    public static bool ExitActionsComplete
    {
        get { return _exitActionsComplete; }
        set { _exitActionsComplete = value; }
    }

    public static bool ExecutionComplete
    {
        get { return InitActionsComplete & CyclicActionsComplete & ExitActionsComplete; }
    }

    //public static void VoiceChoices(IBehaviorExecutionContext context)
    //{
    //    if (context != null)
    //    {
    //        while (true)
    //        {
    //            var voiceChoicesResponse = context.GetVoiceCommand();
    //            if (voiceChoicesResponse.Active && voiceChoicesResponse.Confidence > 0)
    //            {
    //                string dummyVar1;
    //                string dummyVar2;
    //                if (String.Compare(dummyVar1, voiceChoicesResponse.Name, StringComparison.OrdinalIgnoreCase))
    //                {
    //                    // DO_CHOICE1_HERE
    //                    break;
    //                }
    //                if (String.Compare(dummyVar2, voiceChoicesResponse.Name, StringComparison.OrdinalIgnoreCase))
    //                {
    //                    // DO_CHOICE2_HERE
    //                    break;
    //                }
    //            }
    //        }
    //    }
    //}

    public bool ExecuteInit(IBehaviorExecutionContext context)
    {
        if (!InitActionsComplete)
        {
            // INIT_BLOCK
            
            InitActionsComplete = true;
        }
        return InitActionsComplete;
    }

    public bool ExecuteCyclic(IBehaviorExecutionContext context)
    {
        if (!CyclicActionsComplete && InitActionsComplete)
        {
            // CYCLIC_BLOCK
              while (true)
  {
  var var_c8659342_f278_26c9_88aa_d54833694066 = context.GetVoiceCommand();
  if (var_c8659342_f278_26c9_88aa_d54833694066.Active && var_c8659342_f278_26c9_88aa_d54833694066.Confidence > 0)
  {
  string var_0738b8eb_ce10_1fbb_a5e0_ee0d8d13e176 = var_c8659342_f278_26c9_88aa_d54833694066.Name;
  string var_7a215e57_402e_ff4c_a028_307b9cc7eb0a = "YES";
  string var_2cd3bdf7_5826_7d48_89b2_3709ba11ac59 = "NO";
  if (String.Compare(var_7a215e57_402e_ff4c_a028_307b9cc7eb0a, var_0738b8eb_ce10_1fbb_a5e0_ee0d8d13e176, StringComparison.OrdinalIgnoreCase)==0)
  {
    var var_92435315_0109_873c_8b79_b38559bf68a2= new BehaviorInfo{BehaviorName = "Say Expressively",Parameters = new Dictionary<string, object>{{"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("You said yes!", true, "string")}}};

    BehaviorModuleHelper.Execute(context, var_92435315_0109_873c_8b79_b38559bf68a2);

  break;
  }
  if (String.Compare(var_2cd3bdf7_5826_7d48_89b2_3709ba11ac59, var_0738b8eb_ce10_1fbb_a5e0_ee0d8d13e176, StringComparison.OrdinalIgnoreCase)==0)
  {
    var var_e9a2ce61_3f98_346b_92b7_6efc57e990bb= new BehaviorInfo{BehaviorName = "Say Expressively",Parameters = new Dictionary<string, object>{{"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("You said no!", true, "string")}}};

    BehaviorModuleHelper.Execute(context, var_e9a2ce61_3f98_346b_92b7_6efc57e990bb);

  break;
  }
  }
  }

            if (ExecutionLifetime == BehaviorExecutionLifetime.once)
            {
                CyclicActionsComplete = true;
            }
            else if (ExecutionLifetime == BehaviorExecutionLifetime.until)
            {
                var complete = ExecutionUntil(context);
                CyclicActionsComplete = !complete;
            }
        }
        return CyclicActionsComplete;
    }

    public bool ExecuteExit(IBehaviorExecutionContext context)
    {
        if (!ExitActionsComplete && CyclicActionsComplete)
        {
            // EXIT_BLOCK
            
            ExitActionsComplete = true;
        }
        return ExitActionsComplete;
    }

    public bool Execute(IBehaviorExecutionContext context)
    {
        ExecuteInit(context);
        ExecuteCyclic(context);
        ExecuteExit(context);
        System.Console.WriteLine(@"Lifetime: {3} Init : {0}, Cyclic: {1}, Exit: {2}", InitActionsComplete,
            CyclicActionsComplete,
            ExitActionsComplete, ExecutionLifetime);
        return ExecutionComplete;
    }
}