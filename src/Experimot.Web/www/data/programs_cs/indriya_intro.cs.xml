// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

// Main Behavior Program

// ReSharper disable CheckNamespace

using System;

public class Behavior_6718ba60_6354_6b61_9828_0ae9f82ffb6f : ITriggerBehavior
{
    public string Name { get; set; }

    protected static BehaviorExecutionPriority Priority;

    public Behavior_6718ba60_6354_6b61_9828_0ae9f82ffb6f()
    {
        GetPriority();
        GetExecutionLifetime();
        GetUid();
    }

    public static BehaviorExecutionPriority GetPriority()
    {
        // SET_PRIORITY
        Priority = BehaviorExecutionPriority.low;

        return Priority;
    }

    protected static BehaviorExecutionLifetime ExecutionLifetime;

    public static BehaviorExecutionLifetime GetExecutionLifetime()
    {
        // SET_EXECUTION_LIFETIME
        ExecutionLifetime = BehaviorExecutionLifetime.once;

        return ExecutionLifetime;
    }

    public int Id { get; set; }

    protected static string Uid;

    public static string GetUid()
    {
        // SET_UID
        Uid = "6718ba60_6354_6b61_9828_0ae9f82ffb6f";

        return Uid;
    }

    private static bool _initActionsComplete;
    private static bool _cyclicActionsComplete;
    private static bool _exitActionsComplete;

    public static TriggerResult CheckTrigger(IBehaviorExecutionContext context)
    {
        var result = new TriggerResult {Active = false};

        if (context != null && !ExecutionComplete)
        {
            var gestureInfoList = context.GetGestureInfoList("Seated");
var gestureInfo = gestureInfoList.FirstOrDefault(s=>s.Confidence > 80);
if (gestureInfo.Active && gestureInfo.Confidence > 80)
{
Console.WriteLine("Gesture trigger received : {0} - {1}", gestureInfo.Name, gestureInfo.Confidence);
result.HumanId = gestureInfo.HumanId;
result.HumanInLoop = true;
result.Active = true;
}

        }
        return result;
    }

    public bool ExecutionUntil(IBehaviorExecutionContext context)
    {
        if (context != null)
        {
            // EXECUTE_UNTIL
            // EXECUTE_UNTIL_HERE
        }
        return true;
    }

    public string ActiveResource { get; set; }

    public static bool InitActionsComplete
    {
        get { return _initActionsComplete; }
        set { _initActionsComplete = value; }
    }

    public static bool CyclicActionsComplete
    {
        get { return _cyclicActionsComplete; }
        set { _cyclicActionsComplete = value; }
    }

    public static bool ExitActionsComplete
    {
        get { return _exitActionsComplete; }
        set { _exitActionsComplete = value; }
    }

    public static bool ExecutionComplete
    {
        get { return InitActionsComplete & CyclicActionsComplete & ExitActionsComplete; }
    }

    public bool ExecuteInit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!InitActionsComplete)
        {
            // INIT_BLOCK
            // INIT_BLOCK_HERE
            InitActionsComplete = true;
        }
        return InitActionsComplete;
    }

    public bool ExecuteCyclic(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!CyclicActionsComplete && InitActionsComplete)
        {
            // CYCLIC_BLOCK
              var var_d0e56a1f_32cc_4156_bc13_85cba1a38879 = new List<Task>();
  var var_18e0ef8d_7830_1bea_8257_800e6392ef97 = new Action( () =>
  {
    var var_334c0420_4a0e_1f75_96b7_d9da501d7198= new BehaviorInfo{BehaviorName = "Greet",RobotName = "Hiro"};

    BehaviorModuleHelper.Execute(context, var_334c0420_4a0e_1f75_96b7_d9da501d7198);

  });
  var var_fc62c78e_73b3_cd92_8ce4_3e4b25c40978 = new Action( () =>
  {
    var var_50d91032_0ab3_0d5d_a6cc_f1cdf9359a19= new BehaviorInfo{BehaviorName = "Greet",RobotName = "Taro"};

    BehaviorModuleHelper.Execute(context, var_50d91032_0ab3_0d5d_a6cc_f1cdf9359a19);

  });
  var_d0e56a1f_32cc_4156_bc13_85cba1a38879.Add(Task.Run(var_18e0ef8d_7830_1bea_8257_800e6392ef97));
  var_d0e56a1f_32cc_4156_bc13_85cba1a38879.Add(Task.Run(var_fc62c78e_73b3_cd92_8ce4_3e4b25c40978));
  Task.WaitAll(var_d0e56a1f_32cc_4156_bc13_85cba1a38879.ToArray());
  System.Console.WriteLine("Parallel action execution complete");var var_70373788_408e_d179_b042_ff56d3bf11ac= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("I am Hiro", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_70373788_408e_d179_b042_ff56d3bf11ac);
  var var_d7996f8d_a86f_e042_bc82_275f4ea862ce= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Taro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("And I am Taro", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_d7996f8d_a86f_e042_bc82_275f4ea862ce);
  var var_c7438637_83de_d87a_a160_f5fab862f35d= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("We want to introduce Indriya system. Taro, you want to start?", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_c7438637_83de_d87a_a160_f5fab862f35d);
  var var_ee51db04_9b18_a01a_8dbb_1240c097073f= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Taro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("Yes sure.", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_ee51db04_9b18_a01a_8dbb_1240c097073f);
  var var_7e293cc4_be9f_875d_af3b_e058eee9d404= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Taro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("Indriya helps to design interaction scenario based on human behaviors", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_7e293cc4_be9f_875d_af3b_e058eee9d404);
  var var_c6c4035e_0943_e629_bdec_7a596bb85937= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("That's right! You can design program to respond to a gesture", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_c6c4035e_0943_e629_bdec_7a596bb85937);
  var var_bfb82f0a_3058_8d3d_bbbf_3d45a8c74698= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Taro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("And also to a voice command from the user", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_bfb82f0a_3058_8d3d_bbbf_3d45a8c74698);
  var var_af19ffb6_a4da_a57a_b6aa_30acf3f89071= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("You can also program two robots operate in parallel", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_af19ffb6_a4da_a57a_b6aa_30acf3f89071);
  var var_b1f4defc_fbbc_b2f7_b1cb_73589b9289c3= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Taro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("And finally you can design behaviors with priority", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_b1f4defc_fbbc_b2f7_b1cb_73589b9289c3);
  var var_2c40006c_0d99_ecca_90b4_ec243810227b= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("If you want both of us to dance together, wave your left hand", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_2c40006c_0d99_ecca_90b4_ec243810227b);
  var var_1978a4c7_b558_408f_af6d_7ee8ac8ca91c= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Taro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("If you want to interrupt at any time, say STOP loudly", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_1978a4c7_b558_408f_af6d_7ee8ac8ca91c);


            if (ExecutionLifetime == BehaviorExecutionLifetime.once)
            {
                CyclicActionsComplete = true;
            }
            else if (ExecutionLifetime == BehaviorExecutionLifetime.until)
            {
                var complete = ExecutionUntil(context);
                CyclicActionsComplete = !complete;
            }
        }
        return CyclicActionsComplete;
    }

    public bool ExecuteExit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!ExitActionsComplete && CyclicActionsComplete)
        {
            // EXIT_BLOCK
            // EXIT_BLOCK_HERE
            ExitActionsComplete = true;
        }
        return ExitActionsComplete;
    }

    public bool Execute(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        try
        {
            ExecuteInit(context, trigger);
            ExecuteCyclic(context, trigger);
            ExecuteExit(context, trigger);
            System.Console.WriteLine(@"Lifetime: {3} Init : {0}, Cyclic: {1}, Exit: {2}", InitActionsComplete,
                CyclicActionsComplete,
                ExitActionsComplete, ExecutionLifetime);
        }
        catch (BehaviorCanceledException ex)
        {
            Console.WriteLine(@"Execution canceled : {0}, {1} ,{2}", GetUid(), ex.Message, ex.StackTrace);
        }
        return ExecutionComplete;
    }
}
// ReSharper disable CheckNamespace

using System;

public class Behavior_64dec55e_19cc_2d6f_80e7_5ab2a62258ba : ITriggerBehavior
{
    public string Name { get; set; }

    protected static BehaviorExecutionPriority Priority;

    public Behavior_64dec55e_19cc_2d6f_80e7_5ab2a62258ba()
    {
        GetPriority();
        GetExecutionLifetime();
        GetUid();
    }

    public static BehaviorExecutionPriority GetPriority()
    {
        // SET_PRIORITY
        Priority = BehaviorExecutionPriority.low;

        return Priority;
    }

    protected static BehaviorExecutionLifetime ExecutionLifetime;

    public static BehaviorExecutionLifetime GetExecutionLifetime()
    {
        // SET_EXECUTION_LIFETIME
        ExecutionLifetime = BehaviorExecutionLifetime.forever;

        return ExecutionLifetime;
    }

    public int Id { get; set; }

    protected static string Uid;

    public static string GetUid()
    {
        // SET_UID
        Uid = "64dec55e_19cc_2d6f_80e7_5ab2a62258ba";

        return Uid;
    }

    private static bool _initActionsComplete;
    private static bool _cyclicActionsComplete;
    private static bool _exitActionsComplete;

    public static TriggerResult CheckTrigger(IBehaviorExecutionContext context)
    {
        var result = new TriggerResult {Active = false};

        if (context != null && !ExecutionComplete)
        {
            var gestureInfoList = context.GetGestureInfoList("Greet_Left");
var gestureInfo = gestureInfoList.FirstOrDefault(s=>s.Confidence > 80);
if (gestureInfo.Active && gestureInfo.Confidence > 80)
{
Console.WriteLine("Gesture trigger received : {0} - {1}", gestureInfo.Name, gestureInfo.Confidence);
result.HumanId = gestureInfo.HumanId;
result.HumanInLoop = true;
result.Active = true;
}

        }
        return result;
    }

    public bool ExecutionUntil(IBehaviorExecutionContext context)
    {
        if (context != null)
        {
            // EXECUTE_UNTIL
            // EXECUTE_UNTIL_HERE
        }
        return true;
    }

    public string ActiveResource { get; set; }

    public static bool InitActionsComplete
    {
        get { return _initActionsComplete; }
        set { _initActionsComplete = value; }
    }

    public static bool CyclicActionsComplete
    {
        get { return _cyclicActionsComplete; }
        set { _cyclicActionsComplete = value; }
    }

    public static bool ExitActionsComplete
    {
        get { return _exitActionsComplete; }
        set { _exitActionsComplete = value; }
    }

    public static bool ExecutionComplete
    {
        get { return InitActionsComplete & CyclicActionsComplete & ExitActionsComplete; }
    }

    public bool ExecuteInit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!InitActionsComplete)
        {
            // INIT_BLOCK
            // INIT_BLOCK_HERE
            InitActionsComplete = true;
        }
        return InitActionsComplete;
    }

    public bool ExecuteCyclic(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!CyclicActionsComplete && InitActionsComplete)
        {
            // CYCLIC_BLOCK
              var var_949ff9d4_fae8_0f29_827a_4fdbb7b9c154 = new List<Task>();
  var var_a48ceef1_d2a4_a240_a8ca_d78b620adb71 = new Action( () =>
  {
    var var_a0845c1b_6828_1464_bf9e_f02a5d009554= new BehaviorInfo{BehaviorName = "Dance",RobotName = "Hiro"};

    BehaviorModuleHelper.Execute(context, var_a0845c1b_6828_1464_bf9e_f02a5d009554);

  });
  var var_d134611d_9ffd_dd22_951b_3ab4903a66d9 = new Action( () =>
  {
    var var_317bfa2f_904b_14c7_946d_e113ac60bcb9= new BehaviorInfo{BehaviorName = "Dance",RobotName = "Taro"};

    BehaviorModuleHelper.Execute(context, var_317bfa2f_904b_14c7_946d_e113ac60bcb9);

  });
  var_949ff9d4_fae8_0f29_827a_4fdbb7b9c154.Add(Task.Run(var_a48ceef1_d2a4_a240_a8ca_d78b620adb71));
  var_949ff9d4_fae8_0f29_827a_4fdbb7b9c154.Add(Task.Run(var_d134611d_9ffd_dd22_951b_3ab4903a66d9));
  Task.WaitAll(var_949ff9d4_fae8_0f29_827a_4fdbb7b9c154.ToArray());
  System.Console.WriteLine("Parallel action execution complete");

            if (ExecutionLifetime == BehaviorExecutionLifetime.once)
            {
                CyclicActionsComplete = true;
            }
            else if (ExecutionLifetime == BehaviorExecutionLifetime.until)
            {
                var complete = ExecutionUntil(context);
                CyclicActionsComplete = !complete;
            }
        }
        return CyclicActionsComplete;
    }

    public bool ExecuteExit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!ExitActionsComplete && CyclicActionsComplete)
        {
            // EXIT_BLOCK
            // EXIT_BLOCK_HERE
            ExitActionsComplete = true;
        }
        return ExitActionsComplete;
    }

    public bool Execute(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        try
        {
            ExecuteInit(context, trigger);
            ExecuteCyclic(context, trigger);
            ExecuteExit(context, trigger);
            System.Console.WriteLine(@"Lifetime: {3} Init : {0}, Cyclic: {1}, Exit: {2}", InitActionsComplete,
                CyclicActionsComplete,
                ExitActionsComplete, ExecutionLifetime);
        }
        catch (BehaviorCanceledException ex)
        {
            Console.WriteLine(@"Execution canceled : {0}, {1} ,{2}", GetUid(), ex.Message, ex.StackTrace);
        }
        return ExecutionComplete;
    }
}
// ReSharper disable CheckNamespace

using System;

public class Behavior_1a6b97a4_5c5c_fc32_928b_e436f0fef723 : ITriggerBehavior
{
    public string Name { get; set; }

    protected static BehaviorExecutionPriority Priority;

    public Behavior_1a6b97a4_5c5c_fc32_928b_e436f0fef723()
    {
        GetPriority();
        GetExecutionLifetime();
        GetUid();
    }

    public static BehaviorExecutionPriority GetPriority()
    {
        // SET_PRIORITY
        Priority = BehaviorExecutionPriority.high;

        return Priority;
    }

    protected static BehaviorExecutionLifetime ExecutionLifetime;

    public static BehaviorExecutionLifetime GetExecutionLifetime()
    {
        // SET_EXECUTION_LIFETIME
        ExecutionLifetime = BehaviorExecutionLifetime.forever;

        return ExecutionLifetime;
    }

    public int Id { get; set; }

    protected static string Uid;

    public static string GetUid()
    {
        // SET_UID
        Uid = "1a6b97a4_5c5c_fc32_928b_e436f0fef723";

        return Uid;
    }

    private static bool _initActionsComplete;
    private static bool _cyclicActionsComplete;
    private static bool _exitActionsComplete;

    public static TriggerResult CheckTrigger(IBehaviorExecutionContext context)
    {
        var result = new TriggerResult {Active = false};

        if (context != null && !ExecutionComplete)
        {
            var voiceCommand = context.GetVoiceCommand("STOP");
if (voiceCommand.Active && voiceCommand.Confidence > 70)
{
Console.WriteLine("Voice trigger received : {0} - {1}", voiceCommand.Name, voiceCommand.Confidence);
result.Active = true;
}

        }
        return result;
    }

    public bool ExecutionUntil(IBehaviorExecutionContext context)
    {
        if (context != null)
        {
            // EXECUTE_UNTIL
            // EXECUTE_UNTIL_HERE
        }
        return true;
    }

    public string ActiveResource { get; set; }

    public static bool InitActionsComplete
    {
        get { return _initActionsComplete; }
        set { _initActionsComplete = value; }
    }

    public static bool CyclicActionsComplete
    {
        get { return _cyclicActionsComplete; }
        set { _cyclicActionsComplete = value; }
    }

    public static bool ExitActionsComplete
    {
        get { return _exitActionsComplete; }
        set { _exitActionsComplete = value; }
    }

    public static bool ExecutionComplete
    {
        get { return InitActionsComplete & CyclicActionsComplete & ExitActionsComplete; }
    }

    public bool ExecuteInit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!InitActionsComplete)
        {
            // INIT_BLOCK
            // INIT_BLOCK_HERE
            InitActionsComplete = true;
        }
        return InitActionsComplete;
    }

    public bool ExecuteCyclic(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!CyclicActionsComplete && InitActionsComplete)
        {
            // CYCLIC_BLOCK
              var var_6155bb53_6f93_6162_947f_95d38506d68e= new BehaviorInfo
  {
  BehaviorName = "Move To",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"x", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, false, "float")},
  {"y", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, false, "float")},
  {"theta", BehaviorModuleHelper.CreateBehaviorParameterOptions(-1.5707963267948966, false, "float")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_6155bb53_6f93_6162_947f_95d38506d68e);
  var var_ffc94dbe_0f08_6054_9507_03d3493c072e= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("Taro, we received a stop command.", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_ffc94dbe_0f08_6054_9507_03d3493c072e);
  var var_881d7315_51aa_7531_b7f8_ac4b3f7ef7c5= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Taro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("Yes, Let us go to rest position", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_881d7315_51aa_7531_b7f8_ac4b3f7ef7c5);
  var var_d5ada89e_1013_1736_bbf4_9de92c59fc55 = new List<Task>();
  var var_37f0ca12_4c55_db4e_9291_c33d2487c1a5 = new Action( () =>
  {
    var var_3d28c399_f987_e9da_b795_a78c5a1aa4c1= new BehaviorInfo
    {
    BehaviorName = "Move To",
    RobotName = "Hiro",Parameters = new Dictionary<string, object>
    {
    {"x", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, false, "float")},
    {"y", BehaviorModuleHelper.CreateBehaviorParameterOptions(0.0, false, "float")},
    {"theta", BehaviorModuleHelper.CreateBehaviorParameterOptions(1.5707963267948966, false, "float")}
    }
    };

    BehaviorModuleHelper.Execute(context, var_3d28c399_f987_e9da_b795_a78c5a1aa4c1);
    var var_dd9529d7_d375_6104_adef_cb384e847577= new BehaviorInfo
    {
    BehaviorName = "Take Rest",
    RobotName = "Hiro",Parameters = new Dictionary<string, object>()
    };

    BehaviorModuleHelper.Execute(context, var_dd9529d7_d375_6104_adef_cb384e847577);

  });
  var var_aefdff84_1fb1_c812_a67e_8d30986ed803 = new Action( () =>
  {
    var var_8a09578f_b5e9_cd67_8970_846944711a03= new BehaviorInfo
    {
    BehaviorName = "Take Rest",
    RobotName = "Taro",Parameters = new Dictionary<string, object>()
    };

    BehaviorModuleHelper.Execute(context, var_8a09578f_b5e9_cd67_8970_846944711a03);

  });
  var_d5ada89e_1013_1736_bbf4_9de92c59fc55.Add(Task.Run(var_37f0ca12_4c55_db4e_9291_c33d2487c1a5));
  var_d5ada89e_1013_1736_bbf4_9de92c59fc55.Add(Task.Run(var_aefdff84_1fb1_c812_a67e_8d30986ed803));
  Task.WaitAll(var_d5ada89e_1013_1736_bbf4_9de92c59fc55.ToArray());
  System.Console.WriteLine("Parallel action execution complete");

            if (ExecutionLifetime == BehaviorExecutionLifetime.once)
            {
                CyclicActionsComplete = true;
            }
            else if (ExecutionLifetime == BehaviorExecutionLifetime.until)
            {
                var complete = ExecutionUntil(context);
                CyclicActionsComplete = !complete;
            }
        }
        return CyclicActionsComplete;
    }

    public bool ExecuteExit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!ExitActionsComplete && CyclicActionsComplete)
        {
            // EXIT_BLOCK
            // EXIT_BLOCK_HERE
            ExitActionsComplete = true;
        }
        return ExitActionsComplete;
    }

    public bool Execute(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        try
        {
            ExecuteInit(context, trigger);
            ExecuteCyclic(context, trigger);
            ExecuteExit(context, trigger);
            System.Console.WriteLine(@"Lifetime: {3} Init : {0}, Cyclic: {1}, Exit: {2}", InitActionsComplete,
                CyclicActionsComplete,
                ExitActionsComplete, ExecutionLifetime);
        }
        catch (BehaviorCanceledException ex)
        {
            Console.WriteLine(@"Execution canceled : {0}, {1} ,{2}", GetUid(), ex.Message, ex.StackTrace);
        }
        return ExecutionComplete;
    }
}