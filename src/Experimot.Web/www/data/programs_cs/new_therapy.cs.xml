// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

// Main Behavior Program

static double count;


public class StartupBehavior : IExecuteOnceBehavior
{
    public void Execute(IBehaviorExecutionContext context)
    {
        // STARTUP_BLOCK
          var var_b50de3eb_f662_3aa4_8cdd_f3c39a6f4d96= new BehaviorInfo{BehaviorName = "stand",RobotName = "Hiro"};

  BehaviorModuleHelper.Execute(context, var_b50de3eb_f662_3aa4_8cdd_f3c39a6f4d96);
  var var_10828cd2_6f8b_09a5_b68e_47dea3076721= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("Hello! I am Nao!", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_10828cd2_6f8b_09a5_b68e_47dea3076721);
  var var_b9cf57bd_e8a4_a2a7_a9e4_f8951bab86ae= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("The doctor asked me to guide your therapy today!", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_b9cf57bd_e8a4_a2a7_a9e4_f8951bab86ae);
  var var_520efdd1_f205_1db1_9136_28c5c0a863c4= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("At first I will demonstrate the exercise routine", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_520efdd1_f205_1db1_9136_28c5c0a863c4);
  var var_9d35273a_e779_3468_9638_ab20de2008e0= new BehaviorInfo{BehaviorName = "liftLeftHand",RobotName = "Hiro"};

  BehaviorModuleHelper.Execute(context, var_9d35273a_e779_3468_9638_ab20de2008e0);
  var var_1f89e44d_2d7b_4e3b_b213_1b154536dc09= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("Please do this exercise five times. I will count for you!", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_1f89e44d_2d7b_4e3b_b213_1b154536dc09);
  var var_4f2c6083_0c21_c585_9f4d_c971f022aa10= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("Make yourself comfortable", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_4f2c6083_0c21_c585_9f4d_c971f022aa10);
  var var_75309ced_2250_9c1f_8a07_8337c65eacda= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("Start doing the routine slowly", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_75309ced_2250_9c1f_8a07_8337c65eacda);
  count = 0;

    }
}
// ReSharper disable CheckNamespace

using System;

public class Behavior_ad20405a_6887_568a_9240_dfe036c757af : ITriggerBehavior
{
    public string Name { get; set; }

    protected static BehaviorExecutionPriority Priority;

    public Behavior_ad20405a_6887_568a_9240_dfe036c757af()
    {
        GetPriority();
        GetExecutionLifetime();
        GetUid();
    }

    public static BehaviorExecutionPriority GetPriority()
    {
        // SET_PRIORITY
        Priority = BehaviorExecutionPriority.low;

        return Priority;
    }

    protected static BehaviorExecutionLifetime ExecutionLifetime;

    public static BehaviorExecutionLifetime GetExecutionLifetime()
    {
        // SET_EXECUTION_LIFETIME
        ExecutionLifetime = BehaviorExecutionLifetime.until;

        return ExecutionLifetime;
    }

    public int Id { get; set; }

    protected static string Uid;

    public static string GetUid()
    {
        // SET_UID
        Uid = "ad20405a_6887_568a_9240_dfe036c757af";

        return Uid;
    }

    private static bool _initActionsComplete;
    private static bool _cyclicActionsComplete;
    private static bool _exitActionsComplete;

    public static TriggerResult CheckTrigger(IBehaviorExecutionContext context)
    {
        var result = new TriggerResult {Active = false};

        if (context != null && !ExecutionComplete)
        {
            var gestureInfoList = context.GetGestureInfoList("LiftHand_Left");
var gestureInfo = gestureInfoList.FirstOrDefault(s=>s.Confidence > 90);
if (gestureInfo.Active && gestureInfo.Confidence > 80)
{
Console.WriteLine("Gesture trigger received : {0} - {1}", gestureInfo.Name, gestureInfo.Confidence);
result.HumanId = gestureInfo.HumanId;
result.HumanInLoop = true;
result.Active = true;
}

        }
        return result;
    }

    public bool ExecutionUntil(IBehaviorExecutionContext context)
    {
        if (context != null)
        {
            // EXECUTE_UNTIL
            return (count <= 5);
        }
        return true;
    }

    public string ActiveResource { get; set; }

    public static bool InitActionsComplete
    {
        get { return _initActionsComplete; }
        set { _initActionsComplete = value; }
    }

    public static bool CyclicActionsComplete
    {
        get { return _cyclicActionsComplete; }
        set { _cyclicActionsComplete = value; }
    }

    public static bool ExitActionsComplete
    {
        get { return _exitActionsComplete; }
        set { _exitActionsComplete = value; }
    }

    public static bool ExecutionComplete
    {
        get { return InitActionsComplete & CyclicActionsComplete & ExitActionsComplete; }
    }

    public bool ExecuteInit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!InitActionsComplete)
        {
            // INIT_BLOCK
            // INIT_BLOCK_HERE
            InitActionsComplete = true;
        }
        return InitActionsComplete;
    }

    public bool ExecuteCyclic(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!CyclicActionsComplete && InitActionsComplete)
        {
            // CYCLIC_BLOCK
              count = (count.GetType().Name == "Double" ? count : 0.0) + 1;
  if (count == 1) {
    var var_ebb38324_175f_f0c2_aa33_3562d61bdbb1= string.Format("You have completed the exercise {0}  time!",count);
    var var_a1e70893_e662_1db6_a035_db448f8c200a= new BehaviorInfo
    {
    BehaviorName = "Say Expressively",
    RobotName = "Hiro",Parameters = new Dictionary<string, object>
    {
    {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions(var_ebb38324_175f_f0c2_aa33_3562d61bdbb1, true, "string")},
    }
    };

    BehaviorModuleHelper.Execute(context, var_a1e70893_e662_1db6_a035_db448f8c200a);
  } else {
    var var_c05f6b07_dff6_c00d_8985_d102ea407d66= string.Format("You have completed the exercise {0}  times!",count);
    var var_a6fd6c02_053d_9559_8434_af7c3d99f4d6= new BehaviorInfo
    {
    BehaviorName = "Say Expressively",
    RobotName = "Hiro",Parameters = new Dictionary<string, object>
    {
    {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions(var_c05f6b07_dff6_c00d_8985_d102ea407d66, true, "string")},
    }
    };

    BehaviorModuleHelper.Execute(context, var_a6fd6c02_053d_9559_8434_af7c3d99f4d6);
  }



            if (ExecutionLifetime == BehaviorExecutionLifetime.once)
            {
                CyclicActionsComplete = true;
            }
            else if (ExecutionLifetime == BehaviorExecutionLifetime.until)
            {
                var complete = ExecutionUntil(context);
                CyclicActionsComplete = !complete;
            }
        }
        return CyclicActionsComplete;
    }

    public bool ExecuteExit(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        if (!ExitActionsComplete && CyclicActionsComplete)
        {
            // EXIT_BLOCK
            // EXIT_BLOCK_HERE
            ExitActionsComplete = true;
        }
        return ExitActionsComplete;
    }

    public bool Execute(IBehaviorExecutionContext context, TriggerResult trigger)
    {
        try
        {
            ExecuteInit(context, trigger);
            ExecuteCyclic(context, trigger);
            ExecuteExit(context, trigger);
            System.Console.WriteLine(@"Lifetime: {3} Init : {0}, Cyclic: {1}, Exit: {2}", InitActionsComplete,
                CyclicActionsComplete,
                ExitActionsComplete, ExecutionLifetime);
        }
        catch (BehaviorCanceledException ex)
        {
            Console.WriteLine(@"Execution canceled : {0}, {1} ,{2}", GetUid(), ex.Message, ex.StackTrace);
        }
        return ExecutionComplete;
    }
}
public class ExitBehavior : IExecuteOnceBehavior
{
    public void Execute(IBehaviorExecutionContext context)
    {
        // EXIT_BLOCK
          var var_1c42e9f9_0acd_7d49_a98b_e57ebc2e665d= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("You did a great job today!", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_1c42e9f9_0acd_7d49_a98b_e57ebc2e665d);
  var var_8655869a_72c9_3948_8989_f8eef3d5a166= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("I am looking forward to guide you next time.", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_8655869a_72c9_3948_8989_f8eef3d5a166);
  var var_75eb913f_97b6_1f2a_b2b5_9b77fe32f0ec= new BehaviorInfo
  {
  BehaviorName = "Say Expressively",
  RobotName = "Hiro",Parameters = new Dictionary<string, object>
  {
  {"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("Thank you and have a nice day!", true, "string")}
  }
  };

  BehaviorModuleHelper.Execute(context, var_75eb913f_97b6_1f2a_b2b5_9b77fe32f0ec);

    }
}