public class StartupBehavior : IExecuteOnceBehavior
{
    public void Execute(IBehaviorExecutionContext context)
    {
        // STARTUP_BLOCK
          var var_72db3eb7_6a4a_d4af_9393_9139c68fa619= new BehaviorInfo{BehaviorName = "greet"};

  BehaviorModuleHelper.Execute(context, var_72db3eb7_6a4a_d4af_9393_9139c68fa619);

    }
}
using System;
using NCalc;

public class Behavior_642fe815_05bc_4db3_b570_152ebfae28c9: IBehavior_642fe815_05bc_4db3_b570_152ebfae28c9
{
    public string Name { get; set; }
    public BehaviorExecutionPriority Priority { get; set; }
    public BehaviorExecutionLifetime ExecutionLifetime { get; set; }
    public string ExecutionEvalExpression { get; set; }
    public string Trigger { get; set; }
    public int Id { get; set; }
    public string Uid { get; set; }
    private static bool _initActionsComplete;
    private static bool _cyclicActionsComplete;
    private static bool _exitActionsComplete;
    private static CheckTriggerDelegate _triggerDelegate;
    private readonly CheckLifetimeDelegate _checkLifetimeDelegate;

    public Behavior_642fe815_05bc_4db3_b570_152ebfae28c9()
    {
        Uid = "642fe815_05bc_4db3_b570_152ebfae28c9";


        // SET_PRIORITY
        Priority = BehaviorExecutionPriority.LOW
;

        // SET_TRIGGER
        // The trigger delegate should not access any member variables
        _triggerDelegate = delegate(IBehaviorExecutionContext ctx, out TriggerResult result)
        {
            result = new TriggerResult();
            if (ctx != null)
            {
                var gestureInfo = ctx.GetGestureInfo("Greet_Left");
if (gestureInfo.Active && gestureInfo.Confidence > 90)
{
result.HumanId = gestureInfo.HumanId;
result.HumanInLoop = true;
return true;
}

            }
            return false;
        };

        // SET_EXECUTION_LIFETIME
        ExecutionLifetime = BehaviorExecutionLifetime.ONCE;


        _checkLifetimeDelegate = CheckExecution;
    }

    private void SampleTriggerSetting()
    {
        // Gesture trigger
        _triggerDelegate = delegate(IBehaviorExecutionContext ctx, out TriggerResult result)
        {
            result = new TriggerResult();
            if (ctx != null)
            {
                var gestureInfo = ctx.GetGestureInfo("");
                if (gestureInfo.Active && gestureInfo.Confidence > 90)
                {
                    result.HumanId = gestureInfo.HumanId;
                    result.HumanInLoop = true;
                    return true;
                }
            }
            return false;
        };

        // Voice Trigger
        _triggerDelegate = delegate(IBehaviorExecutionContext ctx, out TriggerResult result)
        {
            result = new TriggerResult();
            if (ctx != null)
            {
                var voiceCommand = ctx.GetVoiceCommand("");
                if (voiceCommand.Active && voiceCommand.Confidence > 70)
                {
                    return true;
                }
            }
            return false;
        };
    }

    public bool CheckExecution(IBehaviorExecutionContext context)
    {
        if (ExecutionLifetime == BehaviorExecutionLifetime.forever)
        {
        }
        else if (ExecutionLifetime == BehaviorExecutionLifetime.once)
        {
            if (ExecutionComplete)
            {
                return false;
            }
        }
        else if (ExecutionLifetime == BehaviorExecutionLifetime.until && !string.IsNullOrEmpty(ExecutionEvalExpression))
        {
            var expression = new Expression(ExecutionEvalExpression);
            var result = expression.Evaluate();
            bool complete;
            if (bool.TryParse(result.ToString(), out complete))
            {
                return !complete;
            }
        }
        return true;
    }

    public string ActiveResource { get; set; }

    public bool InitActionsComplete
    {
        get { return _initActionsComplete; }
        set { _initActionsComplete = value; }
    }

    public bool CyclicActionsComplete
    {
        get { return _cyclicActionsComplete; }
        set { _cyclicActionsComplete = value; }
    }

    public bool ExitActionsComplete
    {
        get { return _exitActionsComplete; }
        set { _exitActionsComplete = value; }
    }

    public bool ExecutionComplete
    {
        get { return InitActionsComplete & CyclicActionsComplete & ExitActionsComplete; }
    }

    public CheckTriggerDelegate TriggerDelegate
    {
        get { return _triggerDelegate; }
    }

    public CheckLifetimeDelegate LifetimeDelegate
    {
        get { return _checkLifetimeDelegate; }
    }

    public bool ExecuteInit(IBehaviorExecutionContext context)
    {
        if (!InitActionsComplete)
        {
            // INIT_BLOCK
              var var_196b0f0f_add4_78ce_a458_e266976aefec= new BehaviorInfo{BehaviorName = "greet"};

  BehaviorModuleHelper.Execute(context, var_196b0f0f_add4_78ce_a458_e266976aefec);

            InitActionsComplete = true;
        }
        return InitActionsComplete;
    }

    public bool ExecuteCyclic(IBehaviorExecutionContext context)
    {
        if (!CyclicActionsComplete && InitActionsComplete)
        {
            // CYCLIC_BLOCK
              var var_4061265f_925c_afba_964d_0c1590c3e75c= new BehaviorInfo{BehaviorName = "greet"};

  BehaviorModuleHelper.Execute(context, var_4061265f_925c_afba_964d_0c1590c3e75c);
  var var_c1886b66_a104_a0b4_8e17_deac46963e25= new BehaviorInfo{BehaviorName = "Say Expressively",Parameters = new Dictionary<string, object>{{"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions(text, true, "string")}}};

  BehaviorModuleHelper.Execute(context, var_c1886b66_a104_a0b4_8e17_deac46963e25);

        }
        return CyclicActionsComplete;
    }

    public bool ExecuteExit(IBehaviorExecutionContext context)
    {
        if (!ExitActionsComplete && CyclicActionsComplete)
        {
            // EXIT_BLOCK
              var var_cd6bf2de_ff03_4490_babb_91ee9208065a= new BehaviorInfo{BehaviorName = "greet"};

  BehaviorModuleHelper.Execute(context, var_cd6bf2de_ff03_4490_babb_91ee9208065a);

            ExitActionsComplete = true;
        }
        return ExitActionsComplete;
    }

    public bool Execute(IBehaviorExecutionContext context)
    {
        ExecuteInit(context);
        ExecuteCyclic(context);
        ExecuteExit(context);
        return ExecutionComplete;
    }
}
public class ExitBehavior : IExecuteOnceBehavior
{
    public void Execute(IBehaviorExecutionContext context)
    {
        // EXIT_BLOCK
          var var_7dc60783_86e9_5230_a181_dd27d9473965= new BehaviorInfo{BehaviorName = "greet"};

  BehaviorModuleHelper.Execute(context, var_7dc60783_86e9_5230_a181_dd27d9473965);

    }
}