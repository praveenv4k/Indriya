using System;
using System.Collections.Generic;
using NCalc;

// Main Behavior Program

public class StartupBehavior : IExecuteOnceBehavior
{
    public void Execute(IBehaviorExecutionContext context)
    {
        // STARTUP_BLOCK
          var var_c587591e_eedd_bbc0_8313_0c8df3742b8c= new BehaviorInfo{BehaviorName = "greet"};

  BehaviorModuleHelper.Execute(context, var_c587591e_eedd_bbc0_8313_0c8df3742b8c);

    }
}
public class Behavior_8ac710b4_8108_e7c5_84e0_ce74cfc20f6c : ITriggerBehavior
{
    public string Name { get; set; }

    protected static BehaviorExecutionPriority Priority;

    public static BehaviorExecutionPriority GetPriority()
    {
        // SET_PRIORITY
        Priority = BehaviorExecutionPriority.low
;
        return Priority;
    }

    protected static BehaviorExecutionLifetime ExecutionLifetime;

    public static BehaviorExecutionLifetime GetExecutionLifetime()
    {
        // SET_EXECUTION_LIFETIME
        ExecutionLifetime = BehaviorExecutionLifetime.forever;

        return ExecutionLifetime;
    }

    public static string ExecutionEvalExpression { get; set; }
    public int Id { get; set; }
    public static string Uid { get; set; }
    private static bool _initActionsComplete;
    private static bool _cyclicActionsComplete;
    private static bool _exitActionsComplete;

    //private void SampleTriggerSetting()
    //{
    //    // Gesture trigger
    //    _triggerDelegate = delegate(IBehaviorExecutionContext ctx, out TriggerResult result)
    //    {
    //        result = new TriggerResult();
    //        if (ctx != null)
    //        {
    //            var gestureInfo = ctx.GetGestureInfo("");
    //            if (gestureInfo.Active && gestureInfo.Confidence > 90)
    //            {
    //                result.HumanId = gestureInfo.HumanId;
    //                result.HumanInLoop = true;
    //                return true;
    //            }
    //        }
    //        return false;
    //    };

    //    // Voice Trigger
    //    _triggerDelegate = delegate(IBehaviorExecutionContext ctx, out TriggerResult result)
    //    {
    //        result = new TriggerResult();
    //        if (ctx != null)
    //        {
    //            var voiceCommand = ctx.GetVoiceCommand("");
    //            if (voiceCommand.Active && voiceCommand.Confidence > 70)
    //            {
    //                return true;
    //            }
    //        }
    //        return false;
    //    };
    //}

    public static bool CheckExecution(IBehaviorExecutionContext context)
    {
        if (ExecutionLifetime == BehaviorExecutionLifetime.forever)
        {
        }
        else if (ExecutionLifetime == BehaviorExecutionLifetime.once)
        {
            if (ExecutionComplete)
            {
                return false;
            }
        }
        else if (ExecutionLifetime == BehaviorExecutionLifetime.until && !string.IsNullOrEmpty(ExecutionEvalExpression))
        {
            var expression = new Expression(ExecutionEvalExpression);
            var result = expression.Evaluate();
            bool complete;
            if (bool.TryParse(result.ToString(), out complete))
            {
                return !complete;
            }
        }
        return true;
    }

    public static bool CheckTrigger(IBehaviorExecutionContext ctx, out TriggerResult result)
    {
        result = new TriggerResult();
        if (ctx != null)
        {
            var gestureInfo = ctx.GetGestureInfo("Greet_Left");
if (gestureInfo.Active && gestureInfo.Confidence > 90)
{
result.HumanId = gestureInfo.HumanId;
result.HumanInLoop = true;
return true;
}

        }
        return false;
    }

    public string ActiveResource { get; set; }

    public static bool InitActionsComplete
    {
        get { return _initActionsComplete; }
        set { _initActionsComplete = value; }
    }

    public static bool CyclicActionsComplete
    {
        get { return _cyclicActionsComplete; }
        set { _cyclicActionsComplete = value; }
    }

    public static bool ExitActionsComplete
    {
        get { return _exitActionsComplete; }
        set { _exitActionsComplete = value; }
    }

    public static bool ExecutionComplete
    {
        get { return InitActionsComplete & CyclicActionsComplete & ExitActionsComplete; }
    }

    //public static CheckTriggerDelegate TriggerDelegate
    //{
    //    get { return _triggerDelegate; }
    //}

    //public static CheckLifetimeDelegate LifetimeDelegate
    //{
    //    get { return CheckLifetimeDelegate; }
    //}

    public bool ExecuteInit(IBehaviorExecutionContext context)
    {
        if (!InitActionsComplete)
        {
            // INIT_BLOCK
              var var_0cef8664_cd37_1dda_ab0a_3c92391dcc6a= new BehaviorInfo{BehaviorName = "greet"};

  BehaviorModuleHelper.Execute(context, var_0cef8664_cd37_1dda_ab0a_3c92391dcc6a);

            InitActionsComplete = true;
        }
        return InitActionsComplete;
    }

    public bool ExecuteCyclic(IBehaviorExecutionContext context)
    {
        if (!CyclicActionsComplete && InitActionsComplete)
        {
            // CYCLIC_BLOCK
              var var_09e0d5b1_5b21_1869_83cc_2c2adb90d728= new BehaviorInfo{BehaviorName = "Say Expressively",Parameters = new Dictionary<string, object>{{"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("text", true, "string")}}};

  BehaviorModuleHelper.Execute(context, var_09e0d5b1_5b21_1869_83cc_2c2adb90d728);

        }
        return CyclicActionsComplete;
    }

    public bool ExecuteExit(IBehaviorExecutionContext context)
    {
        if (!ExitActionsComplete && CyclicActionsComplete)
        {
            // EXIT_BLOCK
              var var_61228976_78a1_079e_9be9_39c0bce2c6b5= new BehaviorInfo{BehaviorName = "Say Expressively",Parameters = new Dictionary<string, object>{{"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("text", true, "string")}}};

  BehaviorModuleHelper.Execute(context, var_61228976_78a1_079e_9be9_39c0bce2c6b5);

            ExitActionsComplete = true;
        }
        return ExitActionsComplete;
    }

    public bool Execute(IBehaviorExecutionContext context)
    {
        ExecuteInit(context);
        ExecuteCyclic(context);
        ExecuteExit(context);
        return ExecutionComplete;
    }
}
public class ExitBehavior : IExecuteOnceBehavior
{
    public void Execute(IBehaviorExecutionContext context)
    {
        // EXIT_BLOCK
          var var_4db527dd_2590_84cd_a30b_b503b1f69004= new BehaviorInfo{BehaviorName = "greet"};

  BehaviorModuleHelper.Execute(context, var_4db527dd_2590_84cd_a30b_b503b1f69004);

    }
}
public class Behavior_f7c79595_564e_8032_9724_2cd296e29025 : ITriggerBehavior
{
    public string Name { get; set; }

    protected static BehaviorExecutionPriority Priority;

    public static BehaviorExecutionPriority GetPriority()
    {
        // SET_PRIORITY
        Priority = BehaviorExecutionPriority.normal
;
        return Priority;
    }

    protected static BehaviorExecutionLifetime ExecutionLifetime;

    public static BehaviorExecutionLifetime GetExecutionLifetime()
    {
        // SET_EXECUTION_LIFETIME
        ExecutionLifetime = BehaviorExecutionLifetime.forever;

        return ExecutionLifetime;
    }

    public static string ExecutionEvalExpression { get; set; }
    public int Id { get; set; }
    public static string Uid { get; set; }
    private static bool _initActionsComplete;
    private static bool _cyclicActionsComplete;
    private static bool _exitActionsComplete;

    //private void SampleTriggerSetting()
    //{
    //    // Gesture trigger
    //    _triggerDelegate = delegate(IBehaviorExecutionContext ctx, out TriggerResult result)
    //    {
    //        result = new TriggerResult();
    //        if (ctx != null)
    //        {
    //            var gestureInfo = ctx.GetGestureInfo("");
    //            if (gestureInfo.Active && gestureInfo.Confidence > 90)
    //            {
    //                result.HumanId = gestureInfo.HumanId;
    //                result.HumanInLoop = true;
    //                return true;
    //            }
    //        }
    //        return false;
    //    };

    //    // Voice Trigger
    //    _triggerDelegate = delegate(IBehaviorExecutionContext ctx, out TriggerResult result)
    //    {
    //        result = new TriggerResult();
    //        if (ctx != null)
    //        {
    //            var voiceCommand = ctx.GetVoiceCommand("");
    //            if (voiceCommand.Active && voiceCommand.Confidence > 70)
    //            {
    //                return true;
    //            }
    //        }
    //        return false;
    //    };
    //}

    public static bool CheckExecution(IBehaviorExecutionContext context)
    {
        if (ExecutionLifetime == BehaviorExecutionLifetime.forever)
        {
        }
        else if (ExecutionLifetime == BehaviorExecutionLifetime.once)
        {
            if (ExecutionComplete)
            {
                return false;
            }
        }
        else if (ExecutionLifetime == BehaviorExecutionLifetime.until && !string.IsNullOrEmpty(ExecutionEvalExpression))
        {
            var expression = new Expression(ExecutionEvalExpression);
            var result = expression.Evaluate();
            bool complete;
            if (bool.TryParse(result.ToString(), out complete))
            {
                return !complete;
            }
        }
        return true;
    }

    public static bool CheckTrigger(IBehaviorExecutionContext ctx, out TriggerResult result)
    {
        result = new TriggerResult();
        if (ctx != null)
        {
            var gestureInfo = ctx.GetGestureInfo("Greet_Right");
if (gestureInfo.Active && gestureInfo.Confidence > 90)
{
result.HumanId = gestureInfo.HumanId;
result.HumanInLoop = true;
return true;
}

        }
        return false;
    }

    public string ActiveResource { get; set; }

    public static bool InitActionsComplete
    {
        get { return _initActionsComplete; }
        set { _initActionsComplete = value; }
    }

    public static bool CyclicActionsComplete
    {
        get { return _cyclicActionsComplete; }
        set { _cyclicActionsComplete = value; }
    }

    public static bool ExitActionsComplete
    {
        get { return _exitActionsComplete; }
        set { _exitActionsComplete = value; }
    }

    public static bool ExecutionComplete
    {
        get { return InitActionsComplete & CyclicActionsComplete & ExitActionsComplete; }
    }

    //public static CheckTriggerDelegate TriggerDelegate
    //{
    //    get { return _triggerDelegate; }
    //}

    //public static CheckLifetimeDelegate LifetimeDelegate
    //{
    //    get { return CheckLifetimeDelegate; }
    //}

    public bool ExecuteInit(IBehaviorExecutionContext context)
    {
        if (!InitActionsComplete)
        {
            // INIT_BLOCK
              var var_4575df13_fa4b_2e95_9dd0_caaeaef7c29b= new BehaviorInfo{BehaviorName = "crouch"};

  BehaviorModuleHelper.Execute(context, var_4575df13_fa4b_2e95_9dd0_caaeaef7c29b);

            InitActionsComplete = true;
        }
        return InitActionsComplete;
    }

    public bool ExecuteCyclic(IBehaviorExecutionContext context)
    {
        if (!CyclicActionsComplete && InitActionsComplete)
        {
            // CYCLIC_BLOCK
              var var_f966495e_dcf8_cdb6_b323_8663540016b7= new BehaviorInfo{BehaviorName = "Say Expressively",Parameters = new Dictionary<string, object>{{"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("text", true, "string")}}};

  BehaviorModuleHelper.Execute(context, var_f966495e_dcf8_cdb6_b323_8663540016b7);

        }
        return CyclicActionsComplete;
    }

    public bool ExecuteExit(IBehaviorExecutionContext context)
    {
        if (!ExitActionsComplete && CyclicActionsComplete)
        {
            // EXIT_BLOCK
              var var_f7a9b15f_51b1_c740_82fd_5c61f5d17120= new BehaviorInfo{BehaviorName = "Say Expressively",Parameters = new Dictionary<string, object>{{"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("bye", true, "string")}}};

  BehaviorModuleHelper.Execute(context, var_f7a9b15f_51b1_c740_82fd_5c61f5d17120);

            ExitActionsComplete = true;
        }
        return ExitActionsComplete;
    }

    public bool Execute(IBehaviorExecutionContext context)
    {
        ExecuteInit(context);
        ExecuteCyclic(context);
        ExecuteExit(context);
        return ExecutionComplete;
    }
}
public class Behavior_be17dc77_79be_d575_8c21_c6618911ca49 : ITriggerBehavior
{
    public string Name { get; set; }

    protected static BehaviorExecutionPriority Priority;

    public static BehaviorExecutionPriority GetPriority()
    {
        // SET_PRIORITY
        Priority = BehaviorExecutionPriority.high
;
        return Priority;
    }

    protected static BehaviorExecutionLifetime ExecutionLifetime;

    public static BehaviorExecutionLifetime GetExecutionLifetime()
    {
        // SET_EXECUTION_LIFETIME
        ExecutionLifetime = BehaviorExecutionLifetime.once;

        return ExecutionLifetime;
    }

    public static string ExecutionEvalExpression { get; set; }
    public int Id { get; set; }
    public static string Uid { get; set; }
    private static bool _initActionsComplete;
    private static bool _cyclicActionsComplete;
    private static bool _exitActionsComplete;

    //private void SampleTriggerSetting()
    //{
    //    // Gesture trigger
    //    _triggerDelegate = delegate(IBehaviorExecutionContext ctx, out TriggerResult result)
    //    {
    //        result = new TriggerResult();
    //        if (ctx != null)
    //        {
    //            var gestureInfo = ctx.GetGestureInfo("");
    //            if (gestureInfo.Active && gestureInfo.Confidence > 90)
    //            {
    //                result.HumanId = gestureInfo.HumanId;
    //                result.HumanInLoop = true;
    //                return true;
    //            }
    //        }
    //        return false;
    //    };

    //    // Voice Trigger
    //    _triggerDelegate = delegate(IBehaviorExecutionContext ctx, out TriggerResult result)
    //    {
    //        result = new TriggerResult();
    //        if (ctx != null)
    //        {
    //            var voiceCommand = ctx.GetVoiceCommand("");
    //            if (voiceCommand.Active && voiceCommand.Confidence > 70)
    //            {
    //                return true;
    //            }
    //        }
    //        return false;
    //    };
    //}

    public static bool CheckExecution(IBehaviorExecutionContext context)
    {
        if (ExecutionLifetime == BehaviorExecutionLifetime.forever)
        {
        }
        else if (ExecutionLifetime == BehaviorExecutionLifetime.once)
        {
            if (ExecutionComplete)
            {
                return false;
            }
        }
        else if (ExecutionLifetime == BehaviorExecutionLifetime.until && !string.IsNullOrEmpty(ExecutionEvalExpression))
        {
            var expression = new Expression(ExecutionEvalExpression);
            var result = expression.Evaluate();
            bool complete;
            if (bool.TryParse(result.ToString(), out complete))
            {
                return !complete;
            }
        }
        return true;
    }

    public static bool CheckTrigger(IBehaviorExecutionContext ctx, out TriggerResult result)
    {
        result = new TriggerResult();
        if (ctx != null)
        {
            var voiceCommand = ctx.GetVoiceCommand("Stop");
if (voiceCommand.Active && voiceCommand.Confidence > 70)
{
return true;
}

        }
        return false;
    }

    public string ActiveResource { get; set; }

    public static bool InitActionsComplete
    {
        get { return _initActionsComplete; }
        set { _initActionsComplete = value; }
    }

    public static bool CyclicActionsComplete
    {
        get { return _cyclicActionsComplete; }
        set { _cyclicActionsComplete = value; }
    }

    public static bool ExitActionsComplete
    {
        get { return _exitActionsComplete; }
        set { _exitActionsComplete = value; }
    }

    public static bool ExecutionComplete
    {
        get { return InitActionsComplete & CyclicActionsComplete & ExitActionsComplete; }
    }

    //public static CheckTriggerDelegate TriggerDelegate
    //{
    //    get { return _triggerDelegate; }
    //}

    //public static CheckLifetimeDelegate LifetimeDelegate
    //{
    //    get { return CheckLifetimeDelegate; }
    //}

    public bool ExecuteInit(IBehaviorExecutionContext context)
    {
        if (!InitActionsComplete)
        {
            // INIT_BLOCK
              var var_184dbc0d_1c55_6c5d_9430_b4a5ae6f1698= new BehaviorInfo{BehaviorName = "Say Expressively",Parameters = new Dictionary<string, object>{{"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("I will stop now!", true, "string")}}};

  BehaviorModuleHelper.Execute(context, var_184dbc0d_1c55_6c5d_9430_b4a5ae6f1698);

            InitActionsComplete = true;
        }
        return InitActionsComplete;
    }

    public bool ExecuteCyclic(IBehaviorExecutionContext context)
    {
        if (!CyclicActionsComplete && InitActionsComplete)
        {
            // CYCLIC_BLOCK
              var var_7a455741_cc3d_9490_8d46_5245ac44888e= new BehaviorInfo{BehaviorName = "crouch"};

  BehaviorModuleHelper.Execute(context, var_7a455741_cc3d_9490_8d46_5245ac44888e);

        }
        return CyclicActionsComplete;
    }

    public bool ExecuteExit(IBehaviorExecutionContext context)
    {
        if (!ExitActionsComplete && CyclicActionsComplete)
        {
            // EXIT_BLOCK
              var var_3b7114c7_917d_be56_acd1_1c2ccb92ba68= new BehaviorInfo{BehaviorName = "Say Expressively",Parameters = new Dictionary<string, object>{{"msg", BehaviorModuleHelper.CreateBehaviorParameterOptions("bye", true, "string")}}};

  BehaviorModuleHelper.Execute(context, var_3b7114c7_917d_be56_acd1_1c2ccb92ba68);

            ExitActionsComplete = true;
        }
        return ExitActionsComplete;
    }

    public bool Execute(IBehaviorExecutionContext context)
    {
        ExecuteInit(context);
        ExecuteCyclic(context);
        ExecuteExit(context);
        return ExecutionComplete;
    }
}