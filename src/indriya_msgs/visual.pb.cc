// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: visual.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "visual.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* Visual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Visual_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_visual_2eproto() {
  protobuf_AddDesc_visual_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "visual.proto");
  GOOGLE_CHECK(file != NULL);
  Visual_descriptor_ = file->message_type(0);
  static const int Visual_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, parent_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, cast_shadows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, transparency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, laser_retro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, delete_me_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, is_static_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, plugin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, scale_),
  };
  Visual_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Visual_descriptor_,
      Visual::default_instance_,
      Visual_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, _has_bits_[0]),
      -1,
      -1,
      sizeof(Visual),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_visual_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Visual_descriptor_, &Visual::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_visual_2eproto() {
  delete Visual::default_instance_;
  delete Visual_reflection_;
}

void protobuf_AddDesc_visual_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Indriya::Core::Msgs::protobuf_AddDesc_pose_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_geometry_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_material_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_plugin_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014visual.proto\022\021Indriya.Core.Msgs\032\npose."
    "proto\032\016geometry.proto\032\016material.proto\032\014p"
    "lugin.proto\032\016vector3d.proto\"\236\003\n\006Visual\022\014"
    "\n\004name\030\001 \002(\t\022\n\n\002id\030\002 \001(\r\022\023\n\013parent_name\030"
    "\003 \002(\t\022\021\n\tparent_id\030\004 \001(\r\022\024\n\014cast_shadows"
    "\030\005 \001(\010\022\024\n\014transparency\030\006 \001(\001\022\023\n\013laser_re"
    "tro\030\007 \001(\001\022%\n\004pose\030\010 \001(\0132\027.Indriya.Core.M"
    "sgs.Pose\022-\n\010geometry\030\t \001(\0132\033.Indriya.Cor"
    "e.Msgs.Geometry\022-\n\010material\030\n \001(\0132\033.Indr"
    "iya.Core.Msgs.Material\022\017\n\007visible\030\013 \001(\010\022"
    "\021\n\tdelete_me\030\014 \001(\010\022\021\n\tis_static\030\r \001(\010\022)\n"
    "\006plugin\030\016 \001(\0132\031.Indriya.Core.Msgs.Plugin"
    "\022*\n\005scale\030\017 \001(\0132\033.Indriya.Core.Msgs.Vect"
    "or3d", 524);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "visual.proto", &protobuf_RegisterTypes);
  Visual::default_instance_ = new Visual();
  Visual::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_visual_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_visual_2eproto {
  StaticDescriptorInitializer_visual_2eproto() {
    protobuf_AddDesc_visual_2eproto();
  }
} static_descriptor_initializer_visual_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Visual::kNameFieldNumber;
const int Visual::kIdFieldNumber;
const int Visual::kParentNameFieldNumber;
const int Visual::kParentIdFieldNumber;
const int Visual::kCastShadowsFieldNumber;
const int Visual::kTransparencyFieldNumber;
const int Visual::kLaserRetroFieldNumber;
const int Visual::kPoseFieldNumber;
const int Visual::kGeometryFieldNumber;
const int Visual::kMaterialFieldNumber;
const int Visual::kVisibleFieldNumber;
const int Visual::kDeleteMeFieldNumber;
const int Visual::kIsStaticFieldNumber;
const int Visual::kPluginFieldNumber;
const int Visual::kScaleFieldNumber;
#endif  // !_MSC_VER

Visual::Visual()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.Visual)
}

void Visual::InitAsDefaultInstance() {
  pose_ = const_cast< ::Indriya::Core::Msgs::Pose*>(&::Indriya::Core::Msgs::Pose::default_instance());
  geometry_ = const_cast< ::Indriya::Core::Msgs::Geometry*>(&::Indriya::Core::Msgs::Geometry::default_instance());
  material_ = const_cast< ::Indriya::Core::Msgs::Material*>(&::Indriya::Core::Msgs::Material::default_instance());
  plugin_ = const_cast< ::Indriya::Core::Msgs::Plugin*>(&::Indriya::Core::Msgs::Plugin::default_instance());
  scale_ = const_cast< ::Indriya::Core::Msgs::Vector3d*>(&::Indriya::Core::Msgs::Vector3d::default_instance());
}

Visual::Visual(const Visual& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.Visual)
}

void Visual::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  parent_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_ = 0u;
  cast_shadows_ = false;
  transparency_ = 0;
  laser_retro_ = 0;
  pose_ = NULL;
  geometry_ = NULL;
  material_ = NULL;
  visible_ = false;
  delete_me_ = false;
  is_static_ = false;
  plugin_ = NULL;
  scale_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Visual::~Visual() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.Visual)
  SharedDtor();
}

void Visual::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete pose_;
    delete geometry_;
    delete material_;
    delete plugin_;
    delete scale_;
  }
}

void Visual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Visual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Visual_descriptor_;
}

const Visual& Visual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_visual_2eproto();
  return *default_instance_;
}

Visual* Visual::default_instance_ = NULL;

Visual* Visual::New(::google::protobuf::Arena* arena) const {
  Visual* n = new Visual;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Visual::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Visual*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, laser_retro_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_parent_name()) {
      parent_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    cast_shadows_ = false;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::Indriya::Core::Msgs::Pose::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(visible_, is_static_);
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::Indriya::Core::Msgs::Geometry::Clear();
    }
    if (has_material()) {
      if (material_ != NULL) material_->::Indriya::Core::Msgs::Material::Clear();
    }
    if (has_plugin()) {
      if (plugin_ != NULL) plugin_->::Indriya::Core::Msgs::Plugin::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::Indriya::Core::Msgs::Vector3d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Visual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.Visual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Indriya.Core.Msgs.Visual.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parent_name;
        break;
      }

      // required string parent_name = 3;
      case 3: {
        if (tag == 26) {
         parse_parent_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_name().data(), this->parent_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Indriya.Core.Msgs.Visual.parent_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_parent_id;
        break;
      }

      // optional uint32 parent_id = 4;
      case 4: {
        if (tag == 32) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cast_shadows;
        break;
      }

      // optional bool cast_shadows = 5;
      case 5: {
        if (tag == 40) {
         parse_cast_shadows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cast_shadows_)));
          set_has_cast_shadows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_transparency;
        break;
      }

      // optional double transparency = 6;
      case 6: {
        if (tag == 49) {
         parse_transparency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transparency_)));
          set_has_transparency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_laser_retro;
        break;
      }

      // optional double laser_retro = 7;
      case 7: {
        if (tag == 57) {
         parse_laser_retro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_retro_)));
          set_has_laser_retro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pose;
        break;
      }

      // optional .Indriya.Core.Msgs.Pose pose = 8;
      case 8: {
        if (tag == 66) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_geometry;
        break;
      }

      // optional .Indriya.Core.Msgs.Geometry geometry = 9;
      case 9: {
        if (tag == 74) {
         parse_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_material;
        break;
      }

      // optional .Indriya.Core.Msgs.Material material = 10;
      case 10: {
        if (tag == 82) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_material()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_visible;
        break;
      }

      // optional bool visible = 11;
      case 11: {
        if (tag == 88) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_delete_me;
        break;
      }

      // optional bool delete_me = 12;
      case 12: {
        if (tag == 96) {
         parse_delete_me:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete_me_)));
          set_has_delete_me();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_static;
        break;
      }

      // optional bool is_static = 13;
      case 13: {
        if (tag == 104) {
         parse_is_static:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_static_)));
          set_has_is_static();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_plugin;
        break;
      }

      // optional .Indriya.Core.Msgs.Plugin plugin = 14;
      case 14: {
        if (tag == 114) {
         parse_plugin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plugin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_scale;
        break;
      }

      // optional .Indriya.Core.Msgs.Vector3d scale = 15;
      case 15: {
        if (tag == 122) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.Visual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.Visual)
  return false;
#undef DO_
}

void Visual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.Visual)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Visual.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required string parent_name = 3;
  if (has_parent_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_name().data(), this->parent_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Visual.parent_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parent_name(), output);
  }

  // optional uint32 parent_id = 4;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->parent_id(), output);
  }

  // optional bool cast_shadows = 5;
  if (has_cast_shadows()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cast_shadows(), output);
  }

  // optional double transparency = 6;
  if (has_transparency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->transparency(), output);
  }

  // optional double laser_retro = 7;
  if (has_laser_retro()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->laser_retro(), output);
  }

  // optional .Indriya.Core.Msgs.Pose pose = 8;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->pose_, output);
  }

  // optional .Indriya.Core.Msgs.Geometry geometry = 9;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->geometry_, output);
  }

  // optional .Indriya.Core.Msgs.Material material = 10;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->material_, output);
  }

  // optional bool visible = 11;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->visible(), output);
  }

  // optional bool delete_me = 12;
  if (has_delete_me()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->delete_me(), output);
  }

  // optional bool is_static = 13;
  if (has_is_static()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_static(), output);
  }

  // optional .Indriya.Core.Msgs.Plugin plugin = 14;
  if (has_plugin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->plugin_, output);
  }

  // optional .Indriya.Core.Msgs.Vector3d scale = 15;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->scale_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.Visual)
}

::google::protobuf::uint8* Visual::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.Visual)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Visual.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required string parent_name = 3;
  if (has_parent_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_name().data(), this->parent_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Visual.parent_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parent_name(), target);
  }

  // optional uint32 parent_id = 4;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->parent_id(), target);
  }

  // optional bool cast_shadows = 5;
  if (has_cast_shadows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cast_shadows(), target);
  }

  // optional double transparency = 6;
  if (has_transparency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->transparency(), target);
  }

  // optional double laser_retro = 7;
  if (has_laser_retro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->laser_retro(), target);
  }

  // optional .Indriya.Core.Msgs.Pose pose = 8;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->pose_, target);
  }

  // optional .Indriya.Core.Msgs.Geometry geometry = 9;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->geometry_, target);
  }

  // optional .Indriya.Core.Msgs.Material material = 10;
  if (has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->material_, target);
  }

  // optional bool visible = 11;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->visible(), target);
  }

  // optional bool delete_me = 12;
  if (has_delete_me()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->delete_me(), target);
  }

  // optional bool is_static = 13;
  if (has_is_static()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_static(), target);
  }

  // optional .Indriya.Core.Msgs.Plugin plugin = 14;
  if (has_plugin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->plugin_, target);
  }

  // optional .Indriya.Core.Msgs.Vector3d scale = 15;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->scale_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.Visual)
  return target;
}

int Visual::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_parent_name()) {
    // required string parent_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent_name());
  }

  return total_size;
}
int Visual::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string parent_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 250) {
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 parent_id = 4;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_id());
    }

    // optional bool cast_shadows = 5;
    if (has_cast_shadows()) {
      total_size += 1 + 1;
    }

    // optional double transparency = 6;
    if (has_transparency()) {
      total_size += 1 + 8;
    }

    // optional double laser_retro = 7;
    if (has_laser_retro()) {
      total_size += 1 + 8;
    }

    // optional .Indriya.Core.Msgs.Pose pose = 8;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

  }
  if (_has_bits_[8 / 32] & 32512) {
    // optional .Indriya.Core.Msgs.Geometry geometry = 9;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->geometry_);
    }

    // optional .Indriya.Core.Msgs.Material material = 10;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->material_);
    }

    // optional bool visible = 11;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional bool delete_me = 12;
    if (has_delete_me()) {
      total_size += 1 + 1;
    }

    // optional bool is_static = 13;
    if (has_is_static()) {
      total_size += 1 + 1;
    }

    // optional .Indriya.Core.Msgs.Plugin plugin = 14;
    if (has_plugin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->plugin_);
    }

    // optional .Indriya.Core.Msgs.Vector3d scale = 15;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scale_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Visual::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Visual* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Visual*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Visual::MergeFrom(const Visual& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent_name()) {
      set_has_parent_name();
      parent_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_name_);
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_cast_shadows()) {
      set_cast_shadows(from.cast_shadows());
    }
    if (from.has_transparency()) {
      set_transparency(from.transparency());
    }
    if (from.has_laser_retro()) {
      set_laser_retro(from.laser_retro());
    }
    if (from.has_pose()) {
      mutable_pose()->::Indriya::Core::Msgs::Pose::MergeFrom(from.pose());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_geometry()) {
      mutable_geometry()->::Indriya::Core::Msgs::Geometry::MergeFrom(from.geometry());
    }
    if (from.has_material()) {
      mutable_material()->::Indriya::Core::Msgs::Material::MergeFrom(from.material());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_delete_me()) {
      set_delete_me(from.delete_me());
    }
    if (from.has_is_static()) {
      set_is_static(from.is_static());
    }
    if (from.has_plugin()) {
      mutable_plugin()->::Indriya::Core::Msgs::Plugin::MergeFrom(from.plugin());
    }
    if (from.has_scale()) {
      mutable_scale()->::Indriya::Core::Msgs::Vector3d::MergeFrom(from.scale());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Visual::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visual::CopyFrom(const Visual& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visual::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry_->IsInitialized()) return false;
  }
  if (has_material()) {
    if (!this->material_->IsInitialized()) return false;
  }
  if (has_plugin()) {
    if (!this->plugin_->IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale_->IsInitialized()) return false;
  }
  return true;
}

void Visual::Swap(Visual* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Visual::InternalSwap(Visual* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  parent_name_.Swap(&other->parent_name_);
  std::swap(parent_id_, other->parent_id_);
  std::swap(cast_shadows_, other->cast_shadows_);
  std::swap(transparency_, other->transparency_);
  std::swap(laser_retro_, other->laser_retro_);
  std::swap(pose_, other->pose_);
  std::swap(geometry_, other->geometry_);
  std::swap(material_, other->material_);
  std::swap(visible_, other->visible_);
  std::swap(delete_me_, other->delete_me_);
  std::swap(is_static_, other->is_static_);
  std::swap(plugin_, other->plugin_);
  std::swap(scale_, other->scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Visual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Visual_descriptor_;
  metadata.reflection = Visual_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Visual

// required string name = 1;
 bool Visual::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Visual::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void Visual::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Visual::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Visual::name() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Visual::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Visual.name)
}
 void Visual::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.Visual.name)
}
 void Visual::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.Visual.name)
}
 ::std::string* Visual::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Visual.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Visual::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Visual::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Visual.name)
}

// optional uint32 id = 2;
 bool Visual::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Visual::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void Visual::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Visual::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 Visual::id() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.id)
  return id_;
}
 void Visual::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Visual.id)
}

// required string parent_name = 3;
 bool Visual::has_parent_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Visual::set_has_parent_name() {
  _has_bits_[0] |= 0x00000004u;
}
 void Visual::clear_has_parent_name() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Visual::clear_parent_name() {
  parent_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_name();
}
 const ::std::string& Visual::parent_name() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.parent_name)
  return parent_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Visual::set_parent_name(const ::std::string& value) {
  set_has_parent_name();
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Visual.parent_name)
}
 void Visual::set_parent_name(const char* value) {
  set_has_parent_name();
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.Visual.parent_name)
}
 void Visual::set_parent_name(const char* value, size_t size) {
  set_has_parent_name();
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.Visual.parent_name)
}
 ::std::string* Visual::mutable_parent_name() {
  set_has_parent_name();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Visual.parent_name)
  return parent_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Visual::release_parent_name() {
  clear_has_parent_name();
  return parent_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Visual::set_allocated_parent_name(::std::string* parent_name) {
  if (parent_name != NULL) {
    set_has_parent_name();
  } else {
    clear_has_parent_name();
  }
  parent_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_name);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Visual.parent_name)
}

// optional uint32 parent_id = 4;
 bool Visual::has_parent_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Visual::set_has_parent_id() {
  _has_bits_[0] |= 0x00000008u;
}
 void Visual::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Visual::clear_parent_id() {
  parent_id_ = 0u;
  clear_has_parent_id();
}
 ::google::protobuf::uint32 Visual::parent_id() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.parent_id)
  return parent_id_;
}
 void Visual::set_parent_id(::google::protobuf::uint32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Visual.parent_id)
}

// optional bool cast_shadows = 5;
 bool Visual::has_cast_shadows() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Visual::set_has_cast_shadows() {
  _has_bits_[0] |= 0x00000010u;
}
 void Visual::clear_has_cast_shadows() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Visual::clear_cast_shadows() {
  cast_shadows_ = false;
  clear_has_cast_shadows();
}
 bool Visual::cast_shadows() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.cast_shadows)
  return cast_shadows_;
}
 void Visual::set_cast_shadows(bool value) {
  set_has_cast_shadows();
  cast_shadows_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Visual.cast_shadows)
}

// optional double transparency = 6;
 bool Visual::has_transparency() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Visual::set_has_transparency() {
  _has_bits_[0] |= 0x00000020u;
}
 void Visual::clear_has_transparency() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Visual::clear_transparency() {
  transparency_ = 0;
  clear_has_transparency();
}
 double Visual::transparency() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.transparency)
  return transparency_;
}
 void Visual::set_transparency(double value) {
  set_has_transparency();
  transparency_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Visual.transparency)
}

// optional double laser_retro = 7;
 bool Visual::has_laser_retro() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Visual::set_has_laser_retro() {
  _has_bits_[0] |= 0x00000040u;
}
 void Visual::clear_has_laser_retro() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Visual::clear_laser_retro() {
  laser_retro_ = 0;
  clear_has_laser_retro();
}
 double Visual::laser_retro() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.laser_retro)
  return laser_retro_;
}
 void Visual::set_laser_retro(double value) {
  set_has_laser_retro();
  laser_retro_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Visual.laser_retro)
}

// optional .Indriya.Core.Msgs.Pose pose = 8;
 bool Visual::has_pose() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Visual::set_has_pose() {
  _has_bits_[0] |= 0x00000080u;
}
 void Visual::clear_has_pose() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Visual::clear_pose() {
  if (pose_ != NULL) pose_->::Indriya::Core::Msgs::Pose::Clear();
  clear_has_pose();
}
 const ::Indriya::Core::Msgs::Pose& Visual::pose() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
 ::Indriya::Core::Msgs::Pose* Visual::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::Indriya::Core::Msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Visual.pose)
  return pose_;
}
 ::Indriya::Core::Msgs::Pose* Visual::release_pose() {
  clear_has_pose();
  ::Indriya::Core::Msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
 void Visual::set_allocated_pose(::Indriya::Core::Msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Visual.pose)
}

// optional .Indriya.Core.Msgs.Geometry geometry = 9;
 bool Visual::has_geometry() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Visual::set_has_geometry() {
  _has_bits_[0] |= 0x00000100u;
}
 void Visual::clear_has_geometry() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Visual::clear_geometry() {
  if (geometry_ != NULL) geometry_->::Indriya::Core::Msgs::Geometry::Clear();
  clear_has_geometry();
}
 const ::Indriya::Core::Msgs::Geometry& Visual::geometry() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.geometry)
  return geometry_ != NULL ? *geometry_ : *default_instance_->geometry_;
}
 ::Indriya::Core::Msgs::Geometry* Visual::mutable_geometry() {
  set_has_geometry();
  if (geometry_ == NULL) {
    geometry_ = new ::Indriya::Core::Msgs::Geometry;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Visual.geometry)
  return geometry_;
}
 ::Indriya::Core::Msgs::Geometry* Visual::release_geometry() {
  clear_has_geometry();
  ::Indriya::Core::Msgs::Geometry* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
 void Visual::set_allocated_geometry(::Indriya::Core::Msgs::Geometry* geometry) {
  delete geometry_;
  geometry_ = geometry;
  if (geometry) {
    set_has_geometry();
  } else {
    clear_has_geometry();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Visual.geometry)
}

// optional .Indriya.Core.Msgs.Material material = 10;
 bool Visual::has_material() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void Visual::set_has_material() {
  _has_bits_[0] |= 0x00000200u;
}
 void Visual::clear_has_material() {
  _has_bits_[0] &= ~0x00000200u;
}
 void Visual::clear_material() {
  if (material_ != NULL) material_->::Indriya::Core::Msgs::Material::Clear();
  clear_has_material();
}
 const ::Indriya::Core::Msgs::Material& Visual::material() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.material)
  return material_ != NULL ? *material_ : *default_instance_->material_;
}
 ::Indriya::Core::Msgs::Material* Visual::mutable_material() {
  set_has_material();
  if (material_ == NULL) {
    material_ = new ::Indriya::Core::Msgs::Material;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Visual.material)
  return material_;
}
 ::Indriya::Core::Msgs::Material* Visual::release_material() {
  clear_has_material();
  ::Indriya::Core::Msgs::Material* temp = material_;
  material_ = NULL;
  return temp;
}
 void Visual::set_allocated_material(::Indriya::Core::Msgs::Material* material) {
  delete material_;
  material_ = material;
  if (material) {
    set_has_material();
  } else {
    clear_has_material();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Visual.material)
}

// optional bool visible = 11;
 bool Visual::has_visible() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void Visual::set_has_visible() {
  _has_bits_[0] |= 0x00000400u;
}
 void Visual::clear_has_visible() {
  _has_bits_[0] &= ~0x00000400u;
}
 void Visual::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
 bool Visual::visible() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.visible)
  return visible_;
}
 void Visual::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Visual.visible)
}

// optional bool delete_me = 12;
 bool Visual::has_delete_me() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void Visual::set_has_delete_me() {
  _has_bits_[0] |= 0x00000800u;
}
 void Visual::clear_has_delete_me() {
  _has_bits_[0] &= ~0x00000800u;
}
 void Visual::clear_delete_me() {
  delete_me_ = false;
  clear_has_delete_me();
}
 bool Visual::delete_me() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.delete_me)
  return delete_me_;
}
 void Visual::set_delete_me(bool value) {
  set_has_delete_me();
  delete_me_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Visual.delete_me)
}

// optional bool is_static = 13;
 bool Visual::has_is_static() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void Visual::set_has_is_static() {
  _has_bits_[0] |= 0x00001000u;
}
 void Visual::clear_has_is_static() {
  _has_bits_[0] &= ~0x00001000u;
}
 void Visual::clear_is_static() {
  is_static_ = false;
  clear_has_is_static();
}
 bool Visual::is_static() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.is_static)
  return is_static_;
}
 void Visual::set_is_static(bool value) {
  set_has_is_static();
  is_static_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Visual.is_static)
}

// optional .Indriya.Core.Msgs.Plugin plugin = 14;
 bool Visual::has_plugin() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
 void Visual::set_has_plugin() {
  _has_bits_[0] |= 0x00002000u;
}
 void Visual::clear_has_plugin() {
  _has_bits_[0] &= ~0x00002000u;
}
 void Visual::clear_plugin() {
  if (plugin_ != NULL) plugin_->::Indriya::Core::Msgs::Plugin::Clear();
  clear_has_plugin();
}
 const ::Indriya::Core::Msgs::Plugin& Visual::plugin() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.plugin)
  return plugin_ != NULL ? *plugin_ : *default_instance_->plugin_;
}
 ::Indriya::Core::Msgs::Plugin* Visual::mutable_plugin() {
  set_has_plugin();
  if (plugin_ == NULL) {
    plugin_ = new ::Indriya::Core::Msgs::Plugin;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Visual.plugin)
  return plugin_;
}
 ::Indriya::Core::Msgs::Plugin* Visual::release_plugin() {
  clear_has_plugin();
  ::Indriya::Core::Msgs::Plugin* temp = plugin_;
  plugin_ = NULL;
  return temp;
}
 void Visual::set_allocated_plugin(::Indriya::Core::Msgs::Plugin* plugin) {
  delete plugin_;
  plugin_ = plugin;
  if (plugin) {
    set_has_plugin();
  } else {
    clear_has_plugin();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Visual.plugin)
}

// optional .Indriya.Core.Msgs.Vector3d scale = 15;
 bool Visual::has_scale() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
 void Visual::set_has_scale() {
  _has_bits_[0] |= 0x00004000u;
}
 void Visual::clear_has_scale() {
  _has_bits_[0] &= ~0x00004000u;
}
 void Visual::clear_scale() {
  if (scale_ != NULL) scale_->::Indriya::Core::Msgs::Vector3d::Clear();
  clear_has_scale();
}
 const ::Indriya::Core::Msgs::Vector3d& Visual::scale() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Visual.scale)
  return scale_ != NULL ? *scale_ : *default_instance_->scale_;
}
 ::Indriya::Core::Msgs::Vector3d* Visual::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) {
    scale_ = new ::Indriya::Core::Msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Visual.scale)
  return scale_;
}
 ::Indriya::Core::Msgs::Vector3d* Visual::release_scale() {
  clear_has_scale();
  ::Indriya::Core::Msgs::Vector3d* temp = scale_;
  scale_ = NULL;
  return temp;
}
 void Visual::set_allocated_scale(::Indriya::Core::Msgs::Vector3d* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    set_has_scale();
  } else {
    clear_has_scale();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Visual.scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.Visual", Visual)
// @@protoc_insertion_point(global_scope)
