// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wrench.proto

#ifndef PROTOBUF_wrench_2eproto__INCLUDED
#define PROTOBUF_wrench_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#include <boost/shared_ptr.hpp>
#include "MsgFactory.h"
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_wrench_2eproto();
void protobuf_AssignDesc_wrench_2eproto();
void protobuf_ShutdownFile_wrench_2eproto();

class Wrench;

// ===================================================================

class Wrench : public ::google::protobuf::Message {
 public:
  Wrench();
  virtual ~Wrench();

  Wrench(const Wrench& from);

  inline Wrench& operator=(const Wrench& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wrench& default_instance();

  void Swap(Wrench* other);

  // implements Message ----------------------------------------------

  inline Wrench* New() const { return New(NULL); }

  Wrench* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wrench& from);
  void MergeFrom(const Wrench& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Wrench* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Indriya.Core.Msgs.Vector3d force = 1;
  bool has_force() const;
  void clear_force();
  static const int kForceFieldNumber = 1;
  const ::Indriya::Core::Msgs::Vector3d& force() const;
  ::Indriya::Core::Msgs::Vector3d* mutable_force();
  ::Indriya::Core::Msgs::Vector3d* release_force();
  void set_allocated_force(::Indriya::Core::Msgs::Vector3d* force);

  // required .Indriya.Core.Msgs.Vector3d torque = 2;
  bool has_torque() const;
  void clear_torque();
  static const int kTorqueFieldNumber = 2;
  const ::Indriya::Core::Msgs::Vector3d& torque() const;
  ::Indriya::Core::Msgs::Vector3d* mutable_torque();
  ::Indriya::Core::Msgs::Vector3d* release_torque();
  void set_allocated_torque(::Indriya::Core::Msgs::Vector3d* torque);

  // @@protoc_insertion_point(class_scope:Indriya.Core.Msgs.Wrench)
 private:
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_torque();
  inline void clear_has_torque();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Indriya::Core::Msgs::Vector3d* force_;
  ::Indriya::Core::Msgs::Vector3d* torque_;
  friend void  protobuf_AddDesc_wrench_2eproto();
  friend void protobuf_AssignDesc_wrench_2eproto();
  friend void protobuf_ShutdownFile_wrench_2eproto();

  void InitAsDefaultInstance();
  static Wrench* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Wrench

// required .Indriya.Core.Msgs.Vector3d force = 1;
inline bool Wrench::has_force() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wrench::set_has_force() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wrench::clear_has_force() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wrench::clear_force() {
  if (force_ != NULL) force_->::Indriya::Core::Msgs::Vector3d::Clear();
  clear_has_force();
}
inline const ::Indriya::Core::Msgs::Vector3d& Wrench::force() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Wrench.force)
  return force_ != NULL ? *force_ : *default_instance_->force_;
}
inline ::Indriya::Core::Msgs::Vector3d* Wrench::mutable_force() {
  set_has_force();
  if (force_ == NULL) {
    force_ = new ::Indriya::Core::Msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Wrench.force)
  return force_;
}
inline ::Indriya::Core::Msgs::Vector3d* Wrench::release_force() {
  clear_has_force();
  ::Indriya::Core::Msgs::Vector3d* temp = force_;
  force_ = NULL;
  return temp;
}
inline void Wrench::set_allocated_force(::Indriya::Core::Msgs::Vector3d* force) {
  delete force_;
  force_ = force;
  if (force) {
    set_has_force();
  } else {
    clear_has_force();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Wrench.force)
}

// required .Indriya.Core.Msgs.Vector3d torque = 2;
inline bool Wrench::has_torque() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Wrench::set_has_torque() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Wrench::clear_has_torque() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Wrench::clear_torque() {
  if (torque_ != NULL) torque_->::Indriya::Core::Msgs::Vector3d::Clear();
  clear_has_torque();
}
inline const ::Indriya::Core::Msgs::Vector3d& Wrench::torque() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Wrench.torque)
  return torque_ != NULL ? *torque_ : *default_instance_->torque_;
}
inline ::Indriya::Core::Msgs::Vector3d* Wrench::mutable_torque() {
  set_has_torque();
  if (torque_ == NULL) {
    torque_ = new ::Indriya::Core::Msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Wrench.torque)
  return torque_;
}
inline ::Indriya::Core::Msgs::Vector3d* Wrench::release_torque() {
  clear_has_torque();
  ::Indriya::Core::Msgs::Vector3d* temp = torque_;
  torque_ = NULL;
  return temp;
}
inline void Wrench::set_allocated_torque(::Indriya::Core::Msgs::Vector3d* torque) {
  delete torque_;
  torque_ = torque;
  if (torque) {
    set_has_torque();
  } else {
    clear_has_torque();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Wrench.torque)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<Indriya::Core::Msgs::Wrench> WrenchPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

typedef const boost::shared_ptr<Indriya::Core::Msgs::Wrench const> ConstWrenchPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wrench_2eproto__INCLUDED
