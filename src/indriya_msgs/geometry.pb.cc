// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* Geometry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Geometry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Geometry_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_geometry_2eproto() {
  protobuf_AddDesc_geometry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "geometry.proto");
  GOOGLE_CHECK(file != NULL);
  Geometry_descriptor_ = file->message_type(0);
  static const int Geometry_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, cylinder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, plane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, sphere_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, heightmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, mesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, polyline_),
  };
  Geometry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Geometry_descriptor_,
      Geometry::default_instance_,
      Geometry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, _has_bits_[0]),
      -1,
      -1,
      sizeof(Geometry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, _internal_metadata_),
      -1);
  Geometry_Type_descriptor_ = Geometry_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_geometry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Geometry_descriptor_, &Geometry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_geometry_2eproto() {
  delete Geometry::default_instance_;
  delete Geometry_reflection_;
}

void protobuf_AddDesc_geometry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Indriya::Core::Msgs::protobuf_AddDesc_boxgeom_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_cylindergeom_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_spheregeom_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_planegeom_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_imagegeom_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_heightmapgeom_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_meshgeom_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_vector3d_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_polylinegeom_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016geometry.proto\022\021Indriya.Core.Msgs\032\rbox"
    "geom.proto\032\022cylindergeom.proto\032\020spherege"
    "om.proto\032\017planegeom.proto\032\017imagegeom.pro"
    "to\032\023heightmapgeom.proto\032\016meshgeom.proto\032"
    "\016vector3d.proto\032\022polylinegeom.proto\"\361\004\n\010"
    "Geometry\022.\n\004type\030\001 \001(\0162 .Indriya.Core.Ms"
    "gs.Geometry.Type\022\'\n\003box\030\002 \001(\0132\032.Indriya."
    "Core.Msgs.BoxGeom\0221\n\010cylinder\030\003 \001(\0132\037.In"
    "driya.Core.Msgs.CylinderGeom\022+\n\005plane\030\004 "
    "\001(\0132\034.Indriya.Core.Msgs.PlaneGeom\022-\n\006sph"
    "ere\030\005 \001(\0132\035.Indriya.Core.Msgs.SphereGeom"
    "\022+\n\005image\030\006 \001(\0132\034.Indriya.Core.Msgs.Imag"
    "eGeom\0223\n\theightmap\030\007 \001(\0132 .Indriya.Core."
    "Msgs.HeightmapGeom\022)\n\004mesh\030\010 \001(\0132\033.Indri"
    "ya.Core.Msgs.MeshGeom\022+\n\006points\030\t \003(\0132\033."
    "Indriya.Core.Msgs.Vector3d\022-\n\010polyline\030\n"
    " \003(\0132\033.Indriya.Core.Msgs.Polyline\"\223\001\n\004Ty"
    "pe\022\007\n\003BOX\020\001\022\014\n\010CYLINDER\020\002\022\n\n\006SPHERE\020\003\022\t\n"
    "\005PLANE\020\004\022\t\n\005IMAGE\020\005\022\r\n\tHEIGHTMAP\020\006\022\010\n\004ME"
    "SH\020\007\022\020\n\014TRIANGLE_FAN\020\010\022\016\n\nLINE_STRIP\020\t\022\014"
    "\n\010POLYLINE\020\n\022\t\n\005EMPTY\020\013", 823);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "geometry.proto", &protobuf_RegisterTypes);
  Geometry::default_instance_ = new Geometry();
  Geometry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_geometry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_geometry_2eproto {
  StaticDescriptorInitializer_geometry_2eproto() {
    protobuf_AddDesc_geometry_2eproto();
  }
} static_descriptor_initializer_geometry_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Geometry_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Geometry_Type_descriptor_;
}
bool Geometry_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Geometry_Type Geometry::BOX;
const Geometry_Type Geometry::CYLINDER;
const Geometry_Type Geometry::SPHERE;
const Geometry_Type Geometry::PLANE;
const Geometry_Type Geometry::IMAGE;
const Geometry_Type Geometry::HEIGHTMAP;
const Geometry_Type Geometry::MESH;
const Geometry_Type Geometry::TRIANGLE_FAN;
const Geometry_Type Geometry::LINE_STRIP;
const Geometry_Type Geometry::POLYLINE;
const Geometry_Type Geometry::EMPTY;
const Geometry_Type Geometry::Type_MIN;
const Geometry_Type Geometry::Type_MAX;
const int Geometry::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Geometry::kTypeFieldNumber;
const int Geometry::kBoxFieldNumber;
const int Geometry::kCylinderFieldNumber;
const int Geometry::kPlaneFieldNumber;
const int Geometry::kSphereFieldNumber;
const int Geometry::kImageFieldNumber;
const int Geometry::kHeightmapFieldNumber;
const int Geometry::kMeshFieldNumber;
const int Geometry::kPointsFieldNumber;
const int Geometry::kPolylineFieldNumber;
#endif  // !_MSC_VER

Geometry::Geometry()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.Geometry)
}

void Geometry::InitAsDefaultInstance() {
  box_ = const_cast< ::Indriya::Core::Msgs::BoxGeom*>(&::Indriya::Core::Msgs::BoxGeom::default_instance());
  cylinder_ = const_cast< ::Indriya::Core::Msgs::CylinderGeom*>(&::Indriya::Core::Msgs::CylinderGeom::default_instance());
  plane_ = const_cast< ::Indriya::Core::Msgs::PlaneGeom*>(&::Indriya::Core::Msgs::PlaneGeom::default_instance());
  sphere_ = const_cast< ::Indriya::Core::Msgs::SphereGeom*>(&::Indriya::Core::Msgs::SphereGeom::default_instance());
  image_ = const_cast< ::Indriya::Core::Msgs::ImageGeom*>(&::Indriya::Core::Msgs::ImageGeom::default_instance());
  heightmap_ = const_cast< ::Indriya::Core::Msgs::HeightmapGeom*>(&::Indriya::Core::Msgs::HeightmapGeom::default_instance());
  mesh_ = const_cast< ::Indriya::Core::Msgs::MeshGeom*>(&::Indriya::Core::Msgs::MeshGeom::default_instance());
}

Geometry::Geometry(const Geometry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.Geometry)
}

void Geometry::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  box_ = NULL;
  cylinder_ = NULL;
  plane_ = NULL;
  sphere_ = NULL;
  image_ = NULL;
  heightmap_ = NULL;
  mesh_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Geometry::~Geometry() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.Geometry)
  SharedDtor();
}

void Geometry::SharedDtor() {
  if (this != default_instance_) {
    delete box_;
    delete cylinder_;
    delete plane_;
    delete sphere_;
    delete image_;
    delete heightmap_;
    delete mesh_;
  }
}

void Geometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Geometry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Geometry_descriptor_;
}

const Geometry& Geometry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_geometry_2eproto();
  return *default_instance_;
}

Geometry* Geometry::default_instance_ = NULL;

Geometry* Geometry::New(::google::protobuf::Arena* arena) const {
  Geometry* n = new Geometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Geometry::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 1;
    if (has_box()) {
      if (box_ != NULL) box_->::Indriya::Core::Msgs::BoxGeom::Clear();
    }
    if (has_cylinder()) {
      if (cylinder_ != NULL) cylinder_->::Indriya::Core::Msgs::CylinderGeom::Clear();
    }
    if (has_plane()) {
      if (plane_ != NULL) plane_->::Indriya::Core::Msgs::PlaneGeom::Clear();
    }
    if (has_sphere()) {
      if (sphere_ != NULL) sphere_->::Indriya::Core::Msgs::SphereGeom::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::Indriya::Core::Msgs::ImageGeom::Clear();
    }
    if (has_heightmap()) {
      if (heightmap_ != NULL) heightmap_->::Indriya::Core::Msgs::HeightmapGeom::Clear();
    }
    if (has_mesh()) {
      if (mesh_ != NULL) mesh_->::Indriya::Core::Msgs::MeshGeom::Clear();
    }
  }
  points_.Clear();
  polyline_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Geometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.Geometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Indriya.Core.Msgs.Geometry.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indriya::Core::Msgs::Geometry_Type_IsValid(value)) {
            set_type(static_cast< ::Indriya::Core::Msgs::Geometry_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_box;
        break;
      }

      // optional .Indriya.Core.Msgs.BoxGeom box = 2;
      case 2: {
        if (tag == 18) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cylinder;
        break;
      }

      // optional .Indriya.Core.Msgs.CylinderGeom cylinder = 3;
      case 3: {
        if (tag == 26) {
         parse_cylinder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cylinder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_plane;
        break;
      }

      // optional .Indriya.Core.Msgs.PlaneGeom plane = 4;
      case 4: {
        if (tag == 34) {
         parse_plane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sphere;
        break;
      }

      // optional .Indriya.Core.Msgs.SphereGeom sphere = 5;
      case 5: {
        if (tag == 42) {
         parse_sphere:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sphere()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_image;
        break;
      }

      // optional .Indriya.Core.Msgs.ImageGeom image = 6;
      case 6: {
        if (tag == 50) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_heightmap;
        break;
      }

      // optional .Indriya.Core.Msgs.HeightmapGeom heightmap = 7;
      case 7: {
        if (tag == 58) {
         parse_heightmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heightmap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mesh;
        break;
      }

      // optional .Indriya.Core.Msgs.MeshGeom mesh = 8;
      case 8: {
        if (tag == 66) {
         parse_mesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mesh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_points;
        break;
      }

      // repeated .Indriya.Core.Msgs.Vector3d points = 9;
      case 9: {
        if (tag == 74) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_points;
        if (input->ExpectTag(82)) goto parse_polyline;
        break;
      }

      // repeated .Indriya.Core.Msgs.Polyline polyline = 10;
      case 10: {
        if (tag == 82) {
         parse_polyline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polyline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_polyline;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.Geometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.Geometry)
  return false;
#undef DO_
}

void Geometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.Geometry)
  // optional .Indriya.Core.Msgs.Geometry.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Indriya.Core.Msgs.BoxGeom box = 2;
  if (has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->box_, output);
  }

  // optional .Indriya.Core.Msgs.CylinderGeom cylinder = 3;
  if (has_cylinder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cylinder_, output);
  }

  // optional .Indriya.Core.Msgs.PlaneGeom plane = 4;
  if (has_plane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->plane_, output);
  }

  // optional .Indriya.Core.Msgs.SphereGeom sphere = 5;
  if (has_sphere()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sphere_, output);
  }

  // optional .Indriya.Core.Msgs.ImageGeom image = 6;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->image_, output);
  }

  // optional .Indriya.Core.Msgs.HeightmapGeom heightmap = 7;
  if (has_heightmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->heightmap_, output);
  }

  // optional .Indriya.Core.Msgs.MeshGeom mesh = 8;
  if (has_mesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->mesh_, output);
  }

  // repeated .Indriya.Core.Msgs.Vector3d points = 9;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->points(i), output);
  }

  // repeated .Indriya.Core.Msgs.Polyline polyline = 10;
  for (unsigned int i = 0, n = this->polyline_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->polyline(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.Geometry)
}

::google::protobuf::uint8* Geometry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.Geometry)
  // optional .Indriya.Core.Msgs.Geometry.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Indriya.Core.Msgs.BoxGeom box = 2;
  if (has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->box_, target);
  }

  // optional .Indriya.Core.Msgs.CylinderGeom cylinder = 3;
  if (has_cylinder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->cylinder_, target);
  }

  // optional .Indriya.Core.Msgs.PlaneGeom plane = 4;
  if (has_plane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->plane_, target);
  }

  // optional .Indriya.Core.Msgs.SphereGeom sphere = 5;
  if (has_sphere()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->sphere_, target);
  }

  // optional .Indriya.Core.Msgs.ImageGeom image = 6;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->image_, target);
  }

  // optional .Indriya.Core.Msgs.HeightmapGeom heightmap = 7;
  if (has_heightmap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->heightmap_, target);
  }

  // optional .Indriya.Core.Msgs.MeshGeom mesh = 8;
  if (has_mesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->mesh_, target);
  }

  // repeated .Indriya.Core.Msgs.Vector3d points = 9;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->points(i), target);
  }

  // repeated .Indriya.Core.Msgs.Polyline polyline = 10;
  for (unsigned int i = 0, n = this->polyline_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->polyline(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.Geometry)
  return target;
}

int Geometry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional .Indriya.Core.Msgs.Geometry.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Indriya.Core.Msgs.BoxGeom box = 2;
    if (has_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->box_);
    }

    // optional .Indriya.Core.Msgs.CylinderGeom cylinder = 3;
    if (has_cylinder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cylinder_);
    }

    // optional .Indriya.Core.Msgs.PlaneGeom plane = 4;
    if (has_plane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->plane_);
    }

    // optional .Indriya.Core.Msgs.SphereGeom sphere = 5;
    if (has_sphere()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sphere_);
    }

    // optional .Indriya.Core.Msgs.ImageGeom image = 6;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_);
    }

    // optional .Indriya.Core.Msgs.HeightmapGeom heightmap = 7;
    if (has_heightmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->heightmap_);
    }

    // optional .Indriya.Core.Msgs.MeshGeom mesh = 8;
    if (has_mesh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mesh_);
    }

  }
  // repeated .Indriya.Core.Msgs.Vector3d points = 9;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  // repeated .Indriya.Core.Msgs.Polyline polyline = 10;
  total_size += 1 * this->polyline_size();
  for (int i = 0; i < this->polyline_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polyline(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Geometry::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Geometry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Geometry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Geometry::MergeFrom(const Geometry& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  points_.MergeFrom(from.points_);
  polyline_.MergeFrom(from.polyline_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_box()) {
      mutable_box()->::Indriya::Core::Msgs::BoxGeom::MergeFrom(from.box());
    }
    if (from.has_cylinder()) {
      mutable_cylinder()->::Indriya::Core::Msgs::CylinderGeom::MergeFrom(from.cylinder());
    }
    if (from.has_plane()) {
      mutable_plane()->::Indriya::Core::Msgs::PlaneGeom::MergeFrom(from.plane());
    }
    if (from.has_sphere()) {
      mutable_sphere()->::Indriya::Core::Msgs::SphereGeom::MergeFrom(from.sphere());
    }
    if (from.has_image()) {
      mutable_image()->::Indriya::Core::Msgs::ImageGeom::MergeFrom(from.image());
    }
    if (from.has_heightmap()) {
      mutable_heightmap()->::Indriya::Core::Msgs::HeightmapGeom::MergeFrom(from.heightmap());
    }
    if (from.has_mesh()) {
      mutable_mesh()->::Indriya::Core::Msgs::MeshGeom::MergeFrom(from.mesh());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Geometry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geometry::CopyFrom(const Geometry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geometry::IsInitialized() const {

  if (has_box()) {
    if (!this->box_->IsInitialized()) return false;
  }
  if (has_cylinder()) {
    if (!this->cylinder_->IsInitialized()) return false;
  }
  if (has_plane()) {
    if (!this->plane_->IsInitialized()) return false;
  }
  if (has_sphere()) {
    if (!this->sphere_->IsInitialized()) return false;
  }
  if (has_image()) {
    if (!this->image_->IsInitialized()) return false;
  }
  if (has_heightmap()) {
    if (!this->heightmap_->IsInitialized()) return false;
  }
  if (has_mesh()) {
    if (!this->mesh_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->points())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->polyline())) return false;
  return true;
}

void Geometry::Swap(Geometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Geometry::InternalSwap(Geometry* other) {
  std::swap(type_, other->type_);
  std::swap(box_, other->box_);
  std::swap(cylinder_, other->cylinder_);
  std::swap(plane_, other->plane_);
  std::swap(sphere_, other->sphere_);
  std::swap(image_, other->image_);
  std::swap(heightmap_, other->heightmap_);
  std::swap(mesh_, other->mesh_);
  points_.UnsafeArenaSwap(&other->points_);
  polyline_.UnsafeArenaSwap(&other->polyline_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Geometry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Geometry_descriptor_;
  metadata.reflection = Geometry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Geometry

// optional .Indriya.Core.Msgs.Geometry.Type type = 1;
 bool Geometry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Geometry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
 void Geometry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Geometry::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::Indriya::Core::Msgs::Geometry_Type Geometry::type() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Geometry.type)
  return static_cast< ::Indriya::Core::Msgs::Geometry_Type >(type_);
}
 void Geometry::set_type(::Indriya::Core::Msgs::Geometry_Type value) {
  assert(::Indriya::Core::Msgs::Geometry_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Geometry.type)
}

// optional .Indriya.Core.Msgs.BoxGeom box = 2;
 bool Geometry::has_box() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Geometry::set_has_box() {
  _has_bits_[0] |= 0x00000002u;
}
 void Geometry::clear_has_box() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Geometry::clear_box() {
  if (box_ != NULL) box_->::Indriya::Core::Msgs::BoxGeom::Clear();
  clear_has_box();
}
 const ::Indriya::Core::Msgs::BoxGeom& Geometry::box() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Geometry.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
 ::Indriya::Core::Msgs::BoxGeom* Geometry::mutable_box() {
  set_has_box();
  if (box_ == NULL) {
    box_ = new ::Indriya::Core::Msgs::BoxGeom;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Geometry.box)
  return box_;
}
 ::Indriya::Core::Msgs::BoxGeom* Geometry::release_box() {
  clear_has_box();
  ::Indriya::Core::Msgs::BoxGeom* temp = box_;
  box_ = NULL;
  return temp;
}
 void Geometry::set_allocated_box(::Indriya::Core::Msgs::BoxGeom* box) {
  delete box_;
  box_ = box;
  if (box) {
    set_has_box();
  } else {
    clear_has_box();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Geometry.box)
}

// optional .Indriya.Core.Msgs.CylinderGeom cylinder = 3;
 bool Geometry::has_cylinder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Geometry::set_has_cylinder() {
  _has_bits_[0] |= 0x00000004u;
}
 void Geometry::clear_has_cylinder() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Geometry::clear_cylinder() {
  if (cylinder_ != NULL) cylinder_->::Indriya::Core::Msgs::CylinderGeom::Clear();
  clear_has_cylinder();
}
 const ::Indriya::Core::Msgs::CylinderGeom& Geometry::cylinder() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Geometry.cylinder)
  return cylinder_ != NULL ? *cylinder_ : *default_instance_->cylinder_;
}
 ::Indriya::Core::Msgs::CylinderGeom* Geometry::mutable_cylinder() {
  set_has_cylinder();
  if (cylinder_ == NULL) {
    cylinder_ = new ::Indriya::Core::Msgs::CylinderGeom;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Geometry.cylinder)
  return cylinder_;
}
 ::Indriya::Core::Msgs::CylinderGeom* Geometry::release_cylinder() {
  clear_has_cylinder();
  ::Indriya::Core::Msgs::CylinderGeom* temp = cylinder_;
  cylinder_ = NULL;
  return temp;
}
 void Geometry::set_allocated_cylinder(::Indriya::Core::Msgs::CylinderGeom* cylinder) {
  delete cylinder_;
  cylinder_ = cylinder;
  if (cylinder) {
    set_has_cylinder();
  } else {
    clear_has_cylinder();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Geometry.cylinder)
}

// optional .Indriya.Core.Msgs.PlaneGeom plane = 4;
 bool Geometry::has_plane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Geometry::set_has_plane() {
  _has_bits_[0] |= 0x00000008u;
}
 void Geometry::clear_has_plane() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Geometry::clear_plane() {
  if (plane_ != NULL) plane_->::Indriya::Core::Msgs::PlaneGeom::Clear();
  clear_has_plane();
}
 const ::Indriya::Core::Msgs::PlaneGeom& Geometry::plane() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Geometry.plane)
  return plane_ != NULL ? *plane_ : *default_instance_->plane_;
}
 ::Indriya::Core::Msgs::PlaneGeom* Geometry::mutable_plane() {
  set_has_plane();
  if (plane_ == NULL) {
    plane_ = new ::Indriya::Core::Msgs::PlaneGeom;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Geometry.plane)
  return plane_;
}
 ::Indriya::Core::Msgs::PlaneGeom* Geometry::release_plane() {
  clear_has_plane();
  ::Indriya::Core::Msgs::PlaneGeom* temp = plane_;
  plane_ = NULL;
  return temp;
}
 void Geometry::set_allocated_plane(::Indriya::Core::Msgs::PlaneGeom* plane) {
  delete plane_;
  plane_ = plane;
  if (plane) {
    set_has_plane();
  } else {
    clear_has_plane();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Geometry.plane)
}

// optional .Indriya.Core.Msgs.SphereGeom sphere = 5;
 bool Geometry::has_sphere() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Geometry::set_has_sphere() {
  _has_bits_[0] |= 0x00000010u;
}
 void Geometry::clear_has_sphere() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Geometry::clear_sphere() {
  if (sphere_ != NULL) sphere_->::Indriya::Core::Msgs::SphereGeom::Clear();
  clear_has_sphere();
}
 const ::Indriya::Core::Msgs::SphereGeom& Geometry::sphere() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Geometry.sphere)
  return sphere_ != NULL ? *sphere_ : *default_instance_->sphere_;
}
 ::Indriya::Core::Msgs::SphereGeom* Geometry::mutable_sphere() {
  set_has_sphere();
  if (sphere_ == NULL) {
    sphere_ = new ::Indriya::Core::Msgs::SphereGeom;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Geometry.sphere)
  return sphere_;
}
 ::Indriya::Core::Msgs::SphereGeom* Geometry::release_sphere() {
  clear_has_sphere();
  ::Indriya::Core::Msgs::SphereGeom* temp = sphere_;
  sphere_ = NULL;
  return temp;
}
 void Geometry::set_allocated_sphere(::Indriya::Core::Msgs::SphereGeom* sphere) {
  delete sphere_;
  sphere_ = sphere;
  if (sphere) {
    set_has_sphere();
  } else {
    clear_has_sphere();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Geometry.sphere)
}

// optional .Indriya.Core.Msgs.ImageGeom image = 6;
 bool Geometry::has_image() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Geometry::set_has_image() {
  _has_bits_[0] |= 0x00000020u;
}
 void Geometry::clear_has_image() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Geometry::clear_image() {
  if (image_ != NULL) image_->::Indriya::Core::Msgs::ImageGeom::Clear();
  clear_has_image();
}
 const ::Indriya::Core::Msgs::ImageGeom& Geometry::image() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Geometry.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
 ::Indriya::Core::Msgs::ImageGeom* Geometry::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::Indriya::Core::Msgs::ImageGeom;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Geometry.image)
  return image_;
}
 ::Indriya::Core::Msgs::ImageGeom* Geometry::release_image() {
  clear_has_image();
  ::Indriya::Core::Msgs::ImageGeom* temp = image_;
  image_ = NULL;
  return temp;
}
 void Geometry::set_allocated_image(::Indriya::Core::Msgs::ImageGeom* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Geometry.image)
}

// optional .Indriya.Core.Msgs.HeightmapGeom heightmap = 7;
 bool Geometry::has_heightmap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Geometry::set_has_heightmap() {
  _has_bits_[0] |= 0x00000040u;
}
 void Geometry::clear_has_heightmap() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Geometry::clear_heightmap() {
  if (heightmap_ != NULL) heightmap_->::Indriya::Core::Msgs::HeightmapGeom::Clear();
  clear_has_heightmap();
}
 const ::Indriya::Core::Msgs::HeightmapGeom& Geometry::heightmap() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Geometry.heightmap)
  return heightmap_ != NULL ? *heightmap_ : *default_instance_->heightmap_;
}
 ::Indriya::Core::Msgs::HeightmapGeom* Geometry::mutable_heightmap() {
  set_has_heightmap();
  if (heightmap_ == NULL) {
    heightmap_ = new ::Indriya::Core::Msgs::HeightmapGeom;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Geometry.heightmap)
  return heightmap_;
}
 ::Indriya::Core::Msgs::HeightmapGeom* Geometry::release_heightmap() {
  clear_has_heightmap();
  ::Indriya::Core::Msgs::HeightmapGeom* temp = heightmap_;
  heightmap_ = NULL;
  return temp;
}
 void Geometry::set_allocated_heightmap(::Indriya::Core::Msgs::HeightmapGeom* heightmap) {
  delete heightmap_;
  heightmap_ = heightmap;
  if (heightmap) {
    set_has_heightmap();
  } else {
    clear_has_heightmap();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Geometry.heightmap)
}

// optional .Indriya.Core.Msgs.MeshGeom mesh = 8;
 bool Geometry::has_mesh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Geometry::set_has_mesh() {
  _has_bits_[0] |= 0x00000080u;
}
 void Geometry::clear_has_mesh() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Geometry::clear_mesh() {
  if (mesh_ != NULL) mesh_->::Indriya::Core::Msgs::MeshGeom::Clear();
  clear_has_mesh();
}
 const ::Indriya::Core::Msgs::MeshGeom& Geometry::mesh() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Geometry.mesh)
  return mesh_ != NULL ? *mesh_ : *default_instance_->mesh_;
}
 ::Indriya::Core::Msgs::MeshGeom* Geometry::mutable_mesh() {
  set_has_mesh();
  if (mesh_ == NULL) {
    mesh_ = new ::Indriya::Core::Msgs::MeshGeom;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Geometry.mesh)
  return mesh_;
}
 ::Indriya::Core::Msgs::MeshGeom* Geometry::release_mesh() {
  clear_has_mesh();
  ::Indriya::Core::Msgs::MeshGeom* temp = mesh_;
  mesh_ = NULL;
  return temp;
}
 void Geometry::set_allocated_mesh(::Indriya::Core::Msgs::MeshGeom* mesh) {
  delete mesh_;
  mesh_ = mesh;
  if (mesh) {
    set_has_mesh();
  } else {
    clear_has_mesh();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Geometry.mesh)
}

// repeated .Indriya.Core.Msgs.Vector3d points = 9;
 int Geometry::points_size() const {
  return points_.size();
}
 void Geometry::clear_points() {
  points_.Clear();
}
 const ::Indriya::Core::Msgs::Vector3d& Geometry::points(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Geometry.points)
  return points_.Get(index);
}
 ::Indriya::Core::Msgs::Vector3d* Geometry::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Geometry.points)
  return points_.Mutable(index);
}
 ::Indriya::Core::Msgs::Vector3d* Geometry::add_points() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Geometry.points)
  return points_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector3d >&
Geometry::points() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Geometry.points)
  return points_;
}
 ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector3d >*
Geometry::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Geometry.points)
  return &points_;
}

// repeated .Indriya.Core.Msgs.Polyline polyline = 10;
 int Geometry::polyline_size() const {
  return polyline_.size();
}
 void Geometry::clear_polyline() {
  polyline_.Clear();
}
 const ::Indriya::Core::Msgs::Polyline& Geometry::polyline(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Geometry.polyline)
  return polyline_.Get(index);
}
 ::Indriya::Core::Msgs::Polyline* Geometry::mutable_polyline(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Geometry.polyline)
  return polyline_.Mutable(index);
}
 ::Indriya::Core::Msgs::Polyline* Geometry::add_polyline() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Geometry.polyline)
  return polyline_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Polyline >&
Geometry::polyline() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Geometry.polyline)
  return polyline_;
}
 ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Polyline >*
Geometry::mutable_polyline() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Geometry.polyline)
  return &polyline_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.Geometry", Geometry)
// @@protoc_insertion_point(global_scope)
