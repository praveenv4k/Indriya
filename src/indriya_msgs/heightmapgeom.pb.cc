// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heightmapgeom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "heightmapgeom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* HeightmapGeom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeightmapGeom_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeightmapGeom_Texture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeightmapGeom_Texture_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeightmapGeom_Blend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeightmapGeom_Blend_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_heightmapgeom_2eproto() {
  protobuf_AddDesc_heightmapgeom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "heightmapgeom.proto");
  GOOGLE_CHECK(file != NULL);
  HeightmapGeom_descriptor_ = file->message_type(0);
  static const int HeightmapGeom_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, blend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, use_terrain_paging_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, filename_),
  };
  HeightmapGeom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeightmapGeom_descriptor_,
      HeightmapGeom::default_instance_,
      HeightmapGeom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeightmapGeom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, _internal_metadata_),
      -1);
  HeightmapGeom_Texture_descriptor_ = HeightmapGeom_descriptor_->nested_type(0);
  static const int HeightmapGeom_Texture_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Texture, diffuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Texture, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Texture, size_),
  };
  HeightmapGeom_Texture_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeightmapGeom_Texture_descriptor_,
      HeightmapGeom_Texture::default_instance_,
      HeightmapGeom_Texture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Texture, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeightmapGeom_Texture),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Texture, _internal_metadata_),
      -1);
  HeightmapGeom_Blend_descriptor_ = HeightmapGeom_descriptor_->nested_type(1);
  static const int HeightmapGeom_Blend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Blend, min_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Blend, fade_dist_),
  };
  HeightmapGeom_Blend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeightmapGeom_Blend_descriptor_,
      HeightmapGeom_Blend::default_instance_,
      HeightmapGeom_Blend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Blend, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeightmapGeom_Blend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Blend, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_heightmapgeom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeightmapGeom_descriptor_, &HeightmapGeom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeightmapGeom_Texture_descriptor_, &HeightmapGeom_Texture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeightmapGeom_Blend_descriptor_, &HeightmapGeom_Blend::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_heightmapgeom_2eproto() {
  delete HeightmapGeom::default_instance_;
  delete HeightmapGeom_reflection_;
  delete HeightmapGeom_Texture::default_instance_;
  delete HeightmapGeom_Texture_reflection_;
  delete HeightmapGeom_Blend::default_instance_;
  delete HeightmapGeom_Blend_reflection_;
}

void protobuf_AddDesc_heightmapgeom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_image_2eproto();
  ::experimot::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023heightmapgeom.proto\022\016experimot.msgs\032\013i"
    "mage.proto\032\016vector3d.proto\"\273\003\n\rHeightmap"
    "Geom\022$\n\005image\030\001 \001(\0132\025.experimot.msgs.Ima"
    "ge\022&\n\004size\030\002 \002(\0132\030.experimot.msgs.Vector"
    "3d\022(\n\006origin\030\003 \001(\0132\030.experimot.msgs.Vect"
    "or3d\022\017\n\007heights\030\004 \003(\002\022\r\n\005width\030\005 \001(\005\022\016\n\006"
    "height\030\006 \001(\005\0226\n\007texture\030\007 \003(\0132%.experimo"
    "t.msgs.HeightmapGeom.Texture\0222\n\005blend\030\010 "
    "\003(\0132#.experimot.msgs.HeightmapGeom.Blend"
    "\022\032\n\022use_terrain_paging\030\t \001(\010\022\020\n\010filename"
    "\030\n \001(\t\0328\n\007Texture\022\017\n\007diffuse\030\001 \002(\t\022\016\n\006no"
    "rmal\030\002 \002(\t\022\014\n\004size\030\003 \002(\001\032.\n\005Blend\022\022\n\nmin"
    "_height\030\001 \002(\001\022\021\n\tfade_dist\030\002 \002(\001", 512);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "heightmapgeom.proto", &protobuf_RegisterTypes);
  HeightmapGeom::default_instance_ = new HeightmapGeom();
  HeightmapGeom_Texture::default_instance_ = new HeightmapGeom_Texture();
  HeightmapGeom_Blend::default_instance_ = new HeightmapGeom_Blend();
  HeightmapGeom::default_instance_->InitAsDefaultInstance();
  HeightmapGeom_Texture::default_instance_->InitAsDefaultInstance();
  HeightmapGeom_Blend::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_heightmapgeom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_heightmapgeom_2eproto {
  StaticDescriptorInitializer_heightmapgeom_2eproto() {
    protobuf_AddDesc_heightmapgeom_2eproto();
  }
} static_descriptor_initializer_heightmapgeom_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int HeightmapGeom_Texture::kDiffuseFieldNumber;
const int HeightmapGeom_Texture::kNormalFieldNumber;
const int HeightmapGeom_Texture::kSizeFieldNumber;
#endif  // !_MSC_VER

HeightmapGeom_Texture::HeightmapGeom_Texture()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.HeightmapGeom.Texture)
}

void HeightmapGeom_Texture::InitAsDefaultInstance() {
}

HeightmapGeom_Texture::HeightmapGeom_Texture(const HeightmapGeom_Texture& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.HeightmapGeom.Texture)
}

void HeightmapGeom_Texture::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  diffuse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeightmapGeom_Texture::~HeightmapGeom_Texture() {
  // @@protoc_insertion_point(destructor:experimot.msgs.HeightmapGeom.Texture)
  SharedDtor();
}

void HeightmapGeom_Texture::SharedDtor() {
  diffuse_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HeightmapGeom_Texture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeightmapGeom_Texture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeightmapGeom_Texture_descriptor_;
}

const HeightmapGeom_Texture& HeightmapGeom_Texture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_heightmapgeom_2eproto();
  return *default_instance_;
}

HeightmapGeom_Texture* HeightmapGeom_Texture::default_instance_ = NULL;

HeightmapGeom_Texture* HeightmapGeom_Texture::New(::google::protobuf::Arena* arena) const {
  HeightmapGeom_Texture* n = new HeightmapGeom_Texture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeightmapGeom_Texture::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_diffuse()) {
      diffuse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_normal()) {
      normal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeightmapGeom_Texture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.HeightmapGeom.Texture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string diffuse = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diffuse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->diffuse().data(), this->diffuse().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.HeightmapGeom.Texture.diffuse");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_normal;
        break;
      }

      // required string normal = 2;
      case 2: {
        if (tag == 18) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->normal().data(), this->normal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.HeightmapGeom.Texture.normal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_size;
        break;
      }

      // required double size = 3;
      case 3: {
        if (tag == 25) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.HeightmapGeom.Texture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.HeightmapGeom.Texture)
  return false;
#undef DO_
}

void HeightmapGeom_Texture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.HeightmapGeom.Texture)
  // required string diffuse = 1;
  if (has_diffuse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->diffuse().data(), this->diffuse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.HeightmapGeom.Texture.diffuse");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diffuse(), output);
  }

  // required string normal = 2;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normal().data(), this->normal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.HeightmapGeom.Texture.normal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->normal(), output);
  }

  // required double size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.HeightmapGeom.Texture)
}

::google::protobuf::uint8* HeightmapGeom_Texture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.HeightmapGeom.Texture)
  // required string diffuse = 1;
  if (has_diffuse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->diffuse().data(), this->diffuse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.HeightmapGeom.Texture.diffuse");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->diffuse(), target);
  }

  // required string normal = 2;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normal().data(), this->normal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.HeightmapGeom.Texture.normal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->normal(), target);
  }

  // required double size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.HeightmapGeom.Texture)
  return target;
}

int HeightmapGeom_Texture::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_diffuse()) {
    // required string diffuse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diffuse());
  }

  if (has_normal()) {
    // required string normal = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->normal());
  }

  if (has_size()) {
    // required double size = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
int HeightmapGeom_Texture::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string diffuse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diffuse());

    // required string normal = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->normal());

    // required double size = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeightmapGeom_Texture::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeightmapGeom_Texture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeightmapGeom_Texture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeightmapGeom_Texture::MergeFrom(const HeightmapGeom_Texture& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diffuse()) {
      set_has_diffuse();
      diffuse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diffuse_);
    }
    if (from.has_normal()) {
      set_has_normal();
      normal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_);
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeightmapGeom_Texture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom_Texture::CopyFrom(const HeightmapGeom_Texture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom_Texture::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void HeightmapGeom_Texture::Swap(HeightmapGeom_Texture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeightmapGeom_Texture::InternalSwap(HeightmapGeom_Texture* other) {
  diffuse_.Swap(&other->diffuse_);
  normal_.Swap(&other->normal_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeightmapGeom_Texture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeightmapGeom_Texture_descriptor_;
  metadata.reflection = HeightmapGeom_Texture_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HeightmapGeom_Blend::kMinHeightFieldNumber;
const int HeightmapGeom_Blend::kFadeDistFieldNumber;
#endif  // !_MSC_VER

HeightmapGeom_Blend::HeightmapGeom_Blend()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.HeightmapGeom.Blend)
}

void HeightmapGeom_Blend::InitAsDefaultInstance() {
}

HeightmapGeom_Blend::HeightmapGeom_Blend(const HeightmapGeom_Blend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.HeightmapGeom.Blend)
}

void HeightmapGeom_Blend::SharedCtor() {
  _cached_size_ = 0;
  min_height_ = 0;
  fade_dist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeightmapGeom_Blend::~HeightmapGeom_Blend() {
  // @@protoc_insertion_point(destructor:experimot.msgs.HeightmapGeom.Blend)
  SharedDtor();
}

void HeightmapGeom_Blend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeightmapGeom_Blend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeightmapGeom_Blend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeightmapGeom_Blend_descriptor_;
}

const HeightmapGeom_Blend& HeightmapGeom_Blend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_heightmapgeom_2eproto();
  return *default_instance_;
}

HeightmapGeom_Blend* HeightmapGeom_Blend::default_instance_ = NULL;

HeightmapGeom_Blend* HeightmapGeom_Blend::New(::google::protobuf::Arena* arena) const {
  HeightmapGeom_Blend* n = new HeightmapGeom_Blend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeightmapGeom_Blend::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeightmapGeom_Blend*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(min_height_, fade_dist_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeightmapGeom_Blend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.HeightmapGeom.Blend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double min_height = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_height_)));
          set_has_min_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_fade_dist;
        break;
      }

      // required double fade_dist = 2;
      case 2: {
        if (tag == 17) {
         parse_fade_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fade_dist_)));
          set_has_fade_dist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.HeightmapGeom.Blend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.HeightmapGeom.Blend)
  return false;
#undef DO_
}

void HeightmapGeom_Blend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.HeightmapGeom.Blend)
  // required double min_height = 1;
  if (has_min_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_height(), output);
  }

  // required double fade_dist = 2;
  if (has_fade_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fade_dist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.HeightmapGeom.Blend)
}

::google::protobuf::uint8* HeightmapGeom_Blend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.HeightmapGeom.Blend)
  // required double min_height = 1;
  if (has_min_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_height(), target);
  }

  // required double fade_dist = 2;
  if (has_fade_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fade_dist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.HeightmapGeom.Blend)
  return target;
}

int HeightmapGeom_Blend::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_min_height()) {
    // required double min_height = 1;
    total_size += 1 + 8;
  }

  if (has_fade_dist()) {
    // required double fade_dist = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int HeightmapGeom_Blend::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double min_height = 1;
    total_size += 1 + 8;

    // required double fade_dist = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeightmapGeom_Blend::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeightmapGeom_Blend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeightmapGeom_Blend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeightmapGeom_Blend::MergeFrom(const HeightmapGeom_Blend& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_height()) {
      set_min_height(from.min_height());
    }
    if (from.has_fade_dist()) {
      set_fade_dist(from.fade_dist());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeightmapGeom_Blend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom_Blend::CopyFrom(const HeightmapGeom_Blend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom_Blend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeightmapGeom_Blend::Swap(HeightmapGeom_Blend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeightmapGeom_Blend::InternalSwap(HeightmapGeom_Blend* other) {
  std::swap(min_height_, other->min_height_);
  std::swap(fade_dist_, other->fade_dist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeightmapGeom_Blend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeightmapGeom_Blend_descriptor_;
  metadata.reflection = HeightmapGeom_Blend_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HeightmapGeom::kImageFieldNumber;
const int HeightmapGeom::kSizeFieldNumber;
const int HeightmapGeom::kOriginFieldNumber;
const int HeightmapGeom::kHeightsFieldNumber;
const int HeightmapGeom::kWidthFieldNumber;
const int HeightmapGeom::kHeightFieldNumber;
const int HeightmapGeom::kTextureFieldNumber;
const int HeightmapGeom::kBlendFieldNumber;
const int HeightmapGeom::kUseTerrainPagingFieldNumber;
const int HeightmapGeom::kFilenameFieldNumber;
#endif  // !_MSC_VER

HeightmapGeom::HeightmapGeom()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.HeightmapGeom)
}

void HeightmapGeom::InitAsDefaultInstance() {
  image_ = const_cast< ::experimot::msgs::Image*>(&::experimot::msgs::Image::default_instance());
  size_ = const_cast< ::experimot::msgs::Vector3d*>(&::experimot::msgs::Vector3d::default_instance());
  origin_ = const_cast< ::experimot::msgs::Vector3d*>(&::experimot::msgs::Vector3d::default_instance());
}

HeightmapGeom::HeightmapGeom(const HeightmapGeom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.HeightmapGeom)
}

void HeightmapGeom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  image_ = NULL;
  size_ = NULL;
  origin_ = NULL;
  width_ = 0;
  height_ = 0;
  use_terrain_paging_ = false;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeightmapGeom::~HeightmapGeom() {
  // @@protoc_insertion_point(destructor:experimot.msgs.HeightmapGeom)
  SharedDtor();
}

void HeightmapGeom::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete image_;
    delete size_;
    delete origin_;
  }
}

void HeightmapGeom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeightmapGeom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeightmapGeom_descriptor_;
}

const HeightmapGeom& HeightmapGeom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_heightmapgeom_2eproto();
  return *default_instance_;
}

HeightmapGeom* HeightmapGeom::default_instance_ = NULL;

HeightmapGeom* HeightmapGeom::New(::google::protobuf::Arena* arena) const {
  HeightmapGeom* n = new HeightmapGeom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeightmapGeom::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeightmapGeom*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(width_, height_);
    if (has_image()) {
      if (image_ != NULL) image_->::experimot::msgs::Image::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::experimot::msgs::Vector3d::Clear();
    }
    if (has_origin()) {
      if (origin_ != NULL) origin_->::experimot::msgs::Vector3d::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    use_terrain_paging_ = false;
    if (has_filename()) {
      filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  heights_.Clear();
  texture_.Clear();
  blend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeightmapGeom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.HeightmapGeom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .experimot.msgs.Image image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_size;
        break;
      }

      // required .experimot.msgs.Vector3d size = 2;
      case 2: {
        if (tag == 18) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_origin;
        break;
      }

      // optional .experimot.msgs.Vector3d origin = 3;
      case 3: {
        if (tag == 26) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_heights;
        break;
      }

      // repeated float heights = 4;
      case 4: {
        if (tag == 37) {
         parse_heights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_heights())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_heights())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_heights;
        if (input->ExpectTag(40)) goto parse_width;
        break;
      }

      // optional int32 width = 5;
      case 5: {
        if (tag == 40) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_height;
        break;
      }

      // optional int32 height = 6;
      case 6: {
        if (tag == 48) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_texture;
        break;
      }

      // repeated .experimot.msgs.HeightmapGeom.Texture texture = 7;
      case 7: {
        if (tag == 58) {
         parse_texture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_texture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_texture;
        if (input->ExpectTag(66)) goto parse_blend;
        break;
      }

      // repeated .experimot.msgs.HeightmapGeom.Blend blend = 8;
      case 8: {
        if (tag == 66) {
         parse_blend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_blend;
        if (input->ExpectTag(72)) goto parse_use_terrain_paging;
        break;
      }

      // optional bool use_terrain_paging = 9;
      case 9: {
        if (tag == 72) {
         parse_use_terrain_paging:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_terrain_paging_)));
          set_has_use_terrain_paging();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_filename;
        break;
      }

      // optional string filename = 10;
      case 10: {
        if (tag == 82) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.HeightmapGeom.filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.HeightmapGeom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.HeightmapGeom)
  return false;
#undef DO_
}

void HeightmapGeom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.HeightmapGeom)
  // optional .experimot.msgs.Image image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->image_, output);
  }

  // required .experimot.msgs.Vector3d size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->size_, output);
  }

  // optional .experimot.msgs.Vector3d origin = 3;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->origin_, output);
  }

  // repeated float heights = 4;
  for (int i = 0; i < this->heights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->heights(i), output);
  }

  // optional int32 width = 5;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->width(), output);
  }

  // optional int32 height = 6;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->height(), output);
  }

  // repeated .experimot.msgs.HeightmapGeom.Texture texture = 7;
  for (unsigned int i = 0, n = this->texture_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->texture(i), output);
  }

  // repeated .experimot.msgs.HeightmapGeom.Blend blend = 8;
  for (unsigned int i = 0, n = this->blend_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->blend(i), output);
  }

  // optional bool use_terrain_paging = 9;
  if (has_use_terrain_paging()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->use_terrain_paging(), output);
  }

  // optional string filename = 10;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.HeightmapGeom.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.HeightmapGeom)
}

::google::protobuf::uint8* HeightmapGeom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.HeightmapGeom)
  // optional .experimot.msgs.Image image = 1;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->image_, target);
  }

  // required .experimot.msgs.Vector3d size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->size_, target);
  }

  // optional .experimot.msgs.Vector3d origin = 3;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->origin_, target);
  }

  // repeated float heights = 4;
  for (int i = 0; i < this->heights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->heights(i), target);
  }

  // optional int32 width = 5;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->width(), target);
  }

  // optional int32 height = 6;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->height(), target);
  }

  // repeated .experimot.msgs.HeightmapGeom.Texture texture = 7;
  for (unsigned int i = 0, n = this->texture_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->texture(i), target);
  }

  // repeated .experimot.msgs.HeightmapGeom.Blend blend = 8;
  for (unsigned int i = 0, n = this->blend_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->blend(i), target);
  }

  // optional bool use_terrain_paging = 9;
  if (has_use_terrain_paging()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->use_terrain_paging(), target);
  }

  // optional string filename = 10;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.HeightmapGeom.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.HeightmapGeom)
  return target;
}

int HeightmapGeom::ByteSize() const {
  int total_size = 0;

  // required .experimot.msgs.Vector3d size = 2;
  if (has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->size_);
  }
  if (_has_bits_[0 / 32] & 53) {
    // optional .experimot.msgs.Image image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_);
    }

    // optional .experimot.msgs.Vector3d origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional int32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (_has_bits_[8 / 32] & 768) {
    // optional bool use_terrain_paging = 9;
    if (has_use_terrain_paging()) {
      total_size += 1 + 1;
    }

    // optional string filename = 10;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  // repeated float heights = 4;
  {
    int data_size = 0;
    data_size = 4 * this->heights_size();
    total_size += 1 * this->heights_size() + data_size;
  }

  // repeated .experimot.msgs.HeightmapGeom.Texture texture = 7;
  total_size += 1 * this->texture_size();
  for (int i = 0; i < this->texture_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->texture(i));
  }

  // repeated .experimot.msgs.HeightmapGeom.Blend blend = 8;
  total_size += 1 * this->blend_size();
  for (int i = 0; i < this->blend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blend(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeightmapGeom::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeightmapGeom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeightmapGeom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeightmapGeom::MergeFrom(const HeightmapGeom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  heights_.MergeFrom(from.heights_);
  texture_.MergeFrom(from.texture_);
  blend_.MergeFrom(from.blend_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      mutable_image()->::experimot::msgs::Image::MergeFrom(from.image());
    }
    if (from.has_size()) {
      mutable_size()->::experimot::msgs::Vector3d::MergeFrom(from.size());
    }
    if (from.has_origin()) {
      mutable_origin()->::experimot::msgs::Vector3d::MergeFrom(from.origin());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_use_terrain_paging()) {
      set_use_terrain_paging(from.use_terrain_paging());
    }
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeightmapGeom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom::CopyFrom(const HeightmapGeom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_image()) {
    if (!this->image_->IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size_->IsInitialized()) return false;
  }
  if (has_origin()) {
    if (!this->origin_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->texture())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->blend())) return false;
  return true;
}

void HeightmapGeom::Swap(HeightmapGeom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeightmapGeom::InternalSwap(HeightmapGeom* other) {
  std::swap(image_, other->image_);
  std::swap(size_, other->size_);
  std::swap(origin_, other->origin_);
  heights_.UnsafeArenaSwap(&other->heights_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  texture_.UnsafeArenaSwap(&other->texture_);
  blend_.UnsafeArenaSwap(&other->blend_);
  std::swap(use_terrain_paging_, other->use_terrain_paging_);
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeightmapGeom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeightmapGeom_descriptor_;
  metadata.reflection = HeightmapGeom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeightmapGeom_Texture

// required string diffuse = 1;
 bool HeightmapGeom_Texture::has_diffuse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void HeightmapGeom_Texture::set_has_diffuse() {
  _has_bits_[0] |= 0x00000001u;
}
 void HeightmapGeom_Texture::clear_has_diffuse() {
  _has_bits_[0] &= ~0x00000001u;
}
 void HeightmapGeom_Texture::clear_diffuse() {
  diffuse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_diffuse();
}
 const ::std::string& HeightmapGeom_Texture::diffuse() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.Texture.diffuse)
  return diffuse_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeightmapGeom_Texture::set_diffuse(const ::std::string& value) {
  set_has_diffuse();
  diffuse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.HeightmapGeom.Texture.diffuse)
}
 void HeightmapGeom_Texture::set_diffuse(const char* value) {
  set_has_diffuse();
  diffuse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.HeightmapGeom.Texture.diffuse)
}
 void HeightmapGeom_Texture::set_diffuse(const char* value, size_t size) {
  set_has_diffuse();
  diffuse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.HeightmapGeom.Texture.diffuse)
}
 ::std::string* HeightmapGeom_Texture::mutable_diffuse() {
  set_has_diffuse();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.HeightmapGeom.Texture.diffuse)
  return diffuse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HeightmapGeom_Texture::release_diffuse() {
  clear_has_diffuse();
  return diffuse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeightmapGeom_Texture::set_allocated_diffuse(::std::string* diffuse) {
  if (diffuse != NULL) {
    set_has_diffuse();
  } else {
    clear_has_diffuse();
  }
  diffuse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diffuse);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.HeightmapGeom.Texture.diffuse)
}

// required string normal = 2;
 bool HeightmapGeom_Texture::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void HeightmapGeom_Texture::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
 void HeightmapGeom_Texture::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
 void HeightmapGeom_Texture::clear_normal() {
  normal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_normal();
}
 const ::std::string& HeightmapGeom_Texture::normal() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.Texture.normal)
  return normal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeightmapGeom_Texture::set_normal(const ::std::string& value) {
  set_has_normal();
  normal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.HeightmapGeom.Texture.normal)
}
 void HeightmapGeom_Texture::set_normal(const char* value) {
  set_has_normal();
  normal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.HeightmapGeom.Texture.normal)
}
 void HeightmapGeom_Texture::set_normal(const char* value, size_t size) {
  set_has_normal();
  normal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.HeightmapGeom.Texture.normal)
}
 ::std::string* HeightmapGeom_Texture::mutable_normal() {
  set_has_normal();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.HeightmapGeom.Texture.normal)
  return normal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HeightmapGeom_Texture::release_normal() {
  clear_has_normal();
  return normal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeightmapGeom_Texture::set_allocated_normal(::std::string* normal) {
  if (normal != NULL) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  normal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normal);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.HeightmapGeom.Texture.normal)
}

// required double size = 3;
 bool HeightmapGeom_Texture::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void HeightmapGeom_Texture::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
 void HeightmapGeom_Texture::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
 void HeightmapGeom_Texture::clear_size() {
  size_ = 0;
  clear_has_size();
}
 double HeightmapGeom_Texture::size() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.Texture.size)
  return size_;
}
 void HeightmapGeom_Texture::set_size(double value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.HeightmapGeom.Texture.size)
}

// -------------------------------------------------------------------

// HeightmapGeom_Blend

// required double min_height = 1;
 bool HeightmapGeom_Blend::has_min_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void HeightmapGeom_Blend::set_has_min_height() {
  _has_bits_[0] |= 0x00000001u;
}
 void HeightmapGeom_Blend::clear_has_min_height() {
  _has_bits_[0] &= ~0x00000001u;
}
 void HeightmapGeom_Blend::clear_min_height() {
  min_height_ = 0;
  clear_has_min_height();
}
 double HeightmapGeom_Blend::min_height() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.Blend.min_height)
  return min_height_;
}
 void HeightmapGeom_Blend::set_min_height(double value) {
  set_has_min_height();
  min_height_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.HeightmapGeom.Blend.min_height)
}

// required double fade_dist = 2;
 bool HeightmapGeom_Blend::has_fade_dist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void HeightmapGeom_Blend::set_has_fade_dist() {
  _has_bits_[0] |= 0x00000002u;
}
 void HeightmapGeom_Blend::clear_has_fade_dist() {
  _has_bits_[0] &= ~0x00000002u;
}
 void HeightmapGeom_Blend::clear_fade_dist() {
  fade_dist_ = 0;
  clear_has_fade_dist();
}
 double HeightmapGeom_Blend::fade_dist() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.Blend.fade_dist)
  return fade_dist_;
}
 void HeightmapGeom_Blend::set_fade_dist(double value) {
  set_has_fade_dist();
  fade_dist_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.HeightmapGeom.Blend.fade_dist)
}

// -------------------------------------------------------------------

// HeightmapGeom

// optional .experimot.msgs.Image image = 1;
 bool HeightmapGeom::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void HeightmapGeom::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
 void HeightmapGeom::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
 void HeightmapGeom::clear_image() {
  if (image_ != NULL) image_->::experimot::msgs::Image::Clear();
  clear_has_image();
}
 const ::experimot::msgs::Image& HeightmapGeom::image() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
 ::experimot::msgs::Image* HeightmapGeom::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::experimot::msgs::Image;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.HeightmapGeom.image)
  return image_;
}
 ::experimot::msgs::Image* HeightmapGeom::release_image() {
  clear_has_image();
  ::experimot::msgs::Image* temp = image_;
  image_ = NULL;
  return temp;
}
 void HeightmapGeom::set_allocated_image(::experimot::msgs::Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.HeightmapGeom.image)
}

// required .experimot.msgs.Vector3d size = 2;
 bool HeightmapGeom::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void HeightmapGeom::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
 void HeightmapGeom::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
 void HeightmapGeom::clear_size() {
  if (size_ != NULL) size_->::experimot::msgs::Vector3d::Clear();
  clear_has_size();
}
 const ::experimot::msgs::Vector3d& HeightmapGeom::size() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.size)
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
 ::experimot::msgs::Vector3d* HeightmapGeom::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::experimot::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.HeightmapGeom.size)
  return size_;
}
 ::experimot::msgs::Vector3d* HeightmapGeom::release_size() {
  clear_has_size();
  ::experimot::msgs::Vector3d* temp = size_;
  size_ = NULL;
  return temp;
}
 void HeightmapGeom::set_allocated_size(::experimot::msgs::Vector3d* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.HeightmapGeom.size)
}

// optional .experimot.msgs.Vector3d origin = 3;
 bool HeightmapGeom::has_origin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void HeightmapGeom::set_has_origin() {
  _has_bits_[0] |= 0x00000004u;
}
 void HeightmapGeom::clear_has_origin() {
  _has_bits_[0] &= ~0x00000004u;
}
 void HeightmapGeom::clear_origin() {
  if (origin_ != NULL) origin_->::experimot::msgs::Vector3d::Clear();
  clear_has_origin();
}
 const ::experimot::msgs::Vector3d& HeightmapGeom::origin() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
 ::experimot::msgs::Vector3d* HeightmapGeom::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::experimot::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.HeightmapGeom.origin)
  return origin_;
}
 ::experimot::msgs::Vector3d* HeightmapGeom::release_origin() {
  clear_has_origin();
  ::experimot::msgs::Vector3d* temp = origin_;
  origin_ = NULL;
  return temp;
}
 void HeightmapGeom::set_allocated_origin(::experimot::msgs::Vector3d* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.HeightmapGeom.origin)
}

// repeated float heights = 4;
 int HeightmapGeom::heights_size() const {
  return heights_.size();
}
 void HeightmapGeom::clear_heights() {
  heights_.Clear();
}
 float HeightmapGeom::heights(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.heights)
  return heights_.Get(index);
}
 void HeightmapGeom::set_heights(int index, float value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:experimot.msgs.HeightmapGeom.heights)
}
 void HeightmapGeom::add_heights(float value) {
  heights_.Add(value);
  // @@protoc_insertion_point(field_add:experimot.msgs.HeightmapGeom.heights)
}
 const ::google::protobuf::RepeatedField< float >&
HeightmapGeom::heights() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.HeightmapGeom.heights)
  return heights_;
}
 ::google::protobuf::RepeatedField< float >*
HeightmapGeom::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.HeightmapGeom.heights)
  return &heights_;
}

// optional int32 width = 5;
 bool HeightmapGeom::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void HeightmapGeom::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
 void HeightmapGeom::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
 void HeightmapGeom::clear_width() {
  width_ = 0;
  clear_has_width();
}
 ::google::protobuf::int32 HeightmapGeom::width() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.width)
  return width_;
}
 void HeightmapGeom::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.HeightmapGeom.width)
}

// optional int32 height = 6;
 bool HeightmapGeom::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void HeightmapGeom::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
 void HeightmapGeom::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
 void HeightmapGeom::clear_height() {
  height_ = 0;
  clear_has_height();
}
 ::google::protobuf::int32 HeightmapGeom::height() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.height)
  return height_;
}
 void HeightmapGeom::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.HeightmapGeom.height)
}

// repeated .experimot.msgs.HeightmapGeom.Texture texture = 7;
 int HeightmapGeom::texture_size() const {
  return texture_.size();
}
 void HeightmapGeom::clear_texture() {
  texture_.Clear();
}
 const ::experimot::msgs::HeightmapGeom_Texture& HeightmapGeom::texture(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.texture)
  return texture_.Get(index);
}
 ::experimot::msgs::HeightmapGeom_Texture* HeightmapGeom::mutable_texture(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.HeightmapGeom.texture)
  return texture_.Mutable(index);
}
 ::experimot::msgs::HeightmapGeom_Texture* HeightmapGeom::add_texture() {
  // @@protoc_insertion_point(field_add:experimot.msgs.HeightmapGeom.texture)
  return texture_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::HeightmapGeom_Texture >&
HeightmapGeom::texture() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.HeightmapGeom.texture)
  return texture_;
}
 ::google::protobuf::RepeatedPtrField< ::experimot::msgs::HeightmapGeom_Texture >*
HeightmapGeom::mutable_texture() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.HeightmapGeom.texture)
  return &texture_;
}

// repeated .experimot.msgs.HeightmapGeom.Blend blend = 8;
 int HeightmapGeom::blend_size() const {
  return blend_.size();
}
 void HeightmapGeom::clear_blend() {
  blend_.Clear();
}
 const ::experimot::msgs::HeightmapGeom_Blend& HeightmapGeom::blend(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.blend)
  return blend_.Get(index);
}
 ::experimot::msgs::HeightmapGeom_Blend* HeightmapGeom::mutable_blend(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.HeightmapGeom.blend)
  return blend_.Mutable(index);
}
 ::experimot::msgs::HeightmapGeom_Blend* HeightmapGeom::add_blend() {
  // @@protoc_insertion_point(field_add:experimot.msgs.HeightmapGeom.blend)
  return blend_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::HeightmapGeom_Blend >&
HeightmapGeom::blend() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.HeightmapGeom.blend)
  return blend_;
}
 ::google::protobuf::RepeatedPtrField< ::experimot::msgs::HeightmapGeom_Blend >*
HeightmapGeom::mutable_blend() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.HeightmapGeom.blend)
  return &blend_;
}

// optional bool use_terrain_paging = 9;
 bool HeightmapGeom::has_use_terrain_paging() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void HeightmapGeom::set_has_use_terrain_paging() {
  _has_bits_[0] |= 0x00000100u;
}
 void HeightmapGeom::clear_has_use_terrain_paging() {
  _has_bits_[0] &= ~0x00000100u;
}
 void HeightmapGeom::clear_use_terrain_paging() {
  use_terrain_paging_ = false;
  clear_has_use_terrain_paging();
}
 bool HeightmapGeom::use_terrain_paging() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.use_terrain_paging)
  return use_terrain_paging_;
}
 void HeightmapGeom::set_use_terrain_paging(bool value) {
  set_has_use_terrain_paging();
  use_terrain_paging_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.HeightmapGeom.use_terrain_paging)
}

// optional string filename = 10;
 bool HeightmapGeom::has_filename() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void HeightmapGeom::set_has_filename() {
  _has_bits_[0] |= 0x00000200u;
}
 void HeightmapGeom::clear_has_filename() {
  _has_bits_[0] &= ~0x00000200u;
}
 void HeightmapGeom::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& HeightmapGeom::filename() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.HeightmapGeom.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeightmapGeom::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.HeightmapGeom.filename)
}
 void HeightmapGeom::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.HeightmapGeom.filename)
}
 void HeightmapGeom::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.HeightmapGeom.filename)
}
 ::std::string* HeightmapGeom::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.HeightmapGeom.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HeightmapGeom::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeightmapGeom::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.HeightmapGeom.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.HeightmapGeom", HeightmapGeom)
// @@protoc_insertion_point(global_scope)
