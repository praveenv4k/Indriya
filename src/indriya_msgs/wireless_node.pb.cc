// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wireless_node.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wireless_node.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* WirelessNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WirelessNode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wireless_5fnode_2eproto() {
  protobuf_AddDesc_wireless_5fnode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wireless_node.proto");
  GOOGLE_CHECK(file != NULL);
  WirelessNode_descriptor_ = file->message_type(0);
  static const int WirelessNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WirelessNode, essid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WirelessNode, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WirelessNode, signal_level_),
  };
  WirelessNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WirelessNode_descriptor_,
      WirelessNode::default_instance_,
      WirelessNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WirelessNode, _has_bits_[0]),
      -1,
      -1,
      sizeof(WirelessNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WirelessNode, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wireless_5fnode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WirelessNode_descriptor_, &WirelessNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wireless_5fnode_2eproto() {
  delete WirelessNode::default_instance_;
  delete WirelessNode_reflection_;
}

void protobuf_AddDesc_wireless_5fnode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023wireless_node.proto\022\016experimot.msgs\"F\n"
    "\014WirelessNode\022\r\n\005essid\030\001 \002(\t\022\021\n\tfrequenc"
    "y\030\002 \002(\001\022\024\n\014signal_level\030\003 \002(\001", 109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wireless_node.proto", &protobuf_RegisterTypes);
  WirelessNode::default_instance_ = new WirelessNode();
  WirelessNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wireless_5fnode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wireless_5fnode_2eproto {
  StaticDescriptorInitializer_wireless_5fnode_2eproto() {
    protobuf_AddDesc_wireless_5fnode_2eproto();
  }
} static_descriptor_initializer_wireless_5fnode_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int WirelessNode::kEssidFieldNumber;
const int WirelessNode::kFrequencyFieldNumber;
const int WirelessNode::kSignalLevelFieldNumber;
#endif  // !_MSC_VER

WirelessNode::WirelessNode()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.WirelessNode)
}

void WirelessNode::InitAsDefaultInstance() {
}

WirelessNode::WirelessNode(const WirelessNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.WirelessNode)
}

void WirelessNode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  essid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequency_ = 0;
  signal_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WirelessNode::~WirelessNode() {
  // @@protoc_insertion_point(destructor:experimot.msgs.WirelessNode)
  SharedDtor();
}

void WirelessNode::SharedDtor() {
  essid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WirelessNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WirelessNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WirelessNode_descriptor_;
}

const WirelessNode& WirelessNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wireless_5fnode_2eproto();
  return *default_instance_;
}

WirelessNode* WirelessNode::default_instance_ = NULL;

WirelessNode* WirelessNode::New(::google::protobuf::Arena* arena) const {
  WirelessNode* n = new WirelessNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WirelessNode::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WirelessNode*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(frequency_, signal_level_);
    if (has_essid()) {
      essid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WirelessNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.WirelessNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string essid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_essid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->essid().data(), this->essid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.WirelessNode.essid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_frequency;
        break;
      }

      // required double frequency = 2;
      case 2: {
        if (tag == 17) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_signal_level;
        break;
      }

      // required double signal_level = 3;
      case 3: {
        if (tag == 25) {
         parse_signal_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &signal_level_)));
          set_has_signal_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.WirelessNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.WirelessNode)
  return false;
#undef DO_
}

void WirelessNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.WirelessNode)
  // required string essid = 1;
  if (has_essid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->essid().data(), this->essid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.WirelessNode.essid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->essid(), output);
  }

  // required double frequency = 2;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->frequency(), output);
  }

  // required double signal_level = 3;
  if (has_signal_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->signal_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.WirelessNode)
}

::google::protobuf::uint8* WirelessNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.WirelessNode)
  // required string essid = 1;
  if (has_essid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->essid().data(), this->essid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.WirelessNode.essid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->essid(), target);
  }

  // required double frequency = 2;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->frequency(), target);
  }

  // required double signal_level = 3;
  if (has_signal_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->signal_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.WirelessNode)
  return target;
}

int WirelessNode::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_essid()) {
    // required string essid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->essid());
  }

  if (has_frequency()) {
    // required double frequency = 2;
    total_size += 1 + 8;
  }

  if (has_signal_level()) {
    // required double signal_level = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
int WirelessNode::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string essid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->essid());

    // required double frequency = 2;
    total_size += 1 + 8;

    // required double signal_level = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WirelessNode::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WirelessNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WirelessNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WirelessNode::MergeFrom(const WirelessNode& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_essid()) {
      set_has_essid();
      essid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.essid_);
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_signal_level()) {
      set_signal_level(from.signal_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WirelessNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WirelessNode::CopyFrom(const WirelessNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WirelessNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void WirelessNode::Swap(WirelessNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WirelessNode::InternalSwap(WirelessNode* other) {
  essid_.Swap(&other->essid_);
  std::swap(frequency_, other->frequency_);
  std::swap(signal_level_, other->signal_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WirelessNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WirelessNode_descriptor_;
  metadata.reflection = WirelessNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WirelessNode

// required string essid = 1;
 bool WirelessNode::has_essid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WirelessNode::set_has_essid() {
  _has_bits_[0] |= 0x00000001u;
}
 void WirelessNode::clear_has_essid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WirelessNode::clear_essid() {
  essid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_essid();
}
 const ::std::string& WirelessNode::essid() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.WirelessNode.essid)
  return essid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WirelessNode::set_essid(const ::std::string& value) {
  set_has_essid();
  essid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.WirelessNode.essid)
}
 void WirelessNode::set_essid(const char* value) {
  set_has_essid();
  essid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.WirelessNode.essid)
}
 void WirelessNode::set_essid(const char* value, size_t size) {
  set_has_essid();
  essid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.WirelessNode.essid)
}
 ::std::string* WirelessNode::mutable_essid() {
  set_has_essid();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.WirelessNode.essid)
  return essid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WirelessNode::release_essid() {
  clear_has_essid();
  return essid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WirelessNode::set_allocated_essid(::std::string* essid) {
  if (essid != NULL) {
    set_has_essid();
  } else {
    clear_has_essid();
  }
  essid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), essid);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.WirelessNode.essid)
}

// required double frequency = 2;
 bool WirelessNode::has_frequency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void WirelessNode::set_has_frequency() {
  _has_bits_[0] |= 0x00000002u;
}
 void WirelessNode::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000002u;
}
 void WirelessNode::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
 double WirelessNode::frequency() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.WirelessNode.frequency)
  return frequency_;
}
 void WirelessNode::set_frequency(double value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.WirelessNode.frequency)
}

// required double signal_level = 3;
 bool WirelessNode::has_signal_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void WirelessNode::set_has_signal_level() {
  _has_bits_[0] |= 0x00000004u;
}
 void WirelessNode::clear_has_signal_level() {
  _has_bits_[0] &= ~0x00000004u;
}
 void WirelessNode::clear_signal_level() {
  signal_level_ = 0;
  clear_has_signal_level();
}
 double WirelessNode::signal_level() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.WirelessNode.signal_level)
  return signal_level_;
}
 void WirelessNode::set_signal_level(double value) {
  set_has_signal_level();
  signal_level_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.WirelessNode.signal_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.WirelessNode", WirelessNode)
// @@protoc_insertion_point(global_scope)
