// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distortion.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "distortion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Distortion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Distortion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_distortion_2eproto() {
  protobuf_AddDesc_distortion_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "distortion.proto");
  GOOGLE_CHECK(file != NULL);
  Distortion_descriptor_ = file->message_type(0);
  static const int Distortion_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, k1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, k2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, k3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, p1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, p2_),
  };
  Distortion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Distortion_descriptor_,
      Distortion::default_instance_,
      Distortion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, _has_bits_[0]),
      -1,
      -1,
      sizeof(Distortion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_distortion_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Distortion_descriptor_, &Distortion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_distortion_2eproto() {
  delete Distortion::default_instance_;
  delete Distortion_reflection_;
}

void protobuf_AddDesc_distortion_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_vector2d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020distortion.proto\022\016experimot.msgs\032\016vect"
    "or2d.proto\"r\n\nDistortion\022(\n\006center\030\001 \001(\013"
    "2\030.experimot.msgs.Vector2d\022\n\n\002k1\030\002 \001(\001\022\n"
    "\n\002k2\030\003 \001(\001\022\n\n\002k3\030\004 \001(\001\022\n\n\002p1\030\005 \001(\001\022\n\n\002p2"
    "\030\006 \001(\001", 166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "distortion.proto", &protobuf_RegisterTypes);
  Distortion::default_instance_ = new Distortion();
  Distortion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_distortion_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_distortion_2eproto {
  StaticDescriptorInitializer_distortion_2eproto() {
    protobuf_AddDesc_distortion_2eproto();
  }
} static_descriptor_initializer_distortion_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Distortion::kCenterFieldNumber;
const int Distortion::kK1FieldNumber;
const int Distortion::kK2FieldNumber;
const int Distortion::kK3FieldNumber;
const int Distortion::kP1FieldNumber;
const int Distortion::kP2FieldNumber;
#endif  // !_MSC_VER

Distortion::Distortion()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Distortion)
}

void Distortion::InitAsDefaultInstance() {
  center_ = const_cast< ::experimot::msgs::Vector2d*>(&::experimot::msgs::Vector2d::default_instance());
}

Distortion::Distortion(const Distortion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Distortion)
}

void Distortion::SharedCtor() {
  _cached_size_ = 0;
  center_ = NULL;
  k1_ = 0;
  k2_ = 0;
  k3_ = 0;
  p1_ = 0;
  p2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Distortion::~Distortion() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Distortion)
  SharedDtor();
}

void Distortion::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
  }
}

void Distortion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Distortion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Distortion_descriptor_;
}

const Distortion& Distortion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_distortion_2eproto();
  return *default_instance_;
}

Distortion* Distortion::default_instance_ = NULL;

Distortion* Distortion::New(::google::protobuf::Arena* arena) const {
  Distortion* n = new Distortion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Distortion::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Distortion*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(k1_, p2_);
    if (has_center()) {
      if (center_ != NULL) center_->::experimot::msgs::Vector2d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Distortion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Distortion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .experimot.msgs.Vector2d center = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_k1;
        break;
      }

      // optional double k1 = 2;
      case 2: {
        if (tag == 17) {
         parse_k1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k1_)));
          set_has_k1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_k2;
        break;
      }

      // optional double k2 = 3;
      case 3: {
        if (tag == 25) {
         parse_k2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k2_)));
          set_has_k2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_k3;
        break;
      }

      // optional double k3 = 4;
      case 4: {
        if (tag == 33) {
         parse_k3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k3_)));
          set_has_k3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_p1;
        break;
      }

      // optional double p1 = 5;
      case 5: {
        if (tag == 41) {
         parse_p1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p1_)));
          set_has_p1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_p2;
        break;
      }

      // optional double p2 = 6;
      case 6: {
        if (tag == 49) {
         parse_p2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p2_)));
          set_has_p2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Distortion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Distortion)
  return false;
#undef DO_
}

void Distortion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Distortion)
  // optional .experimot.msgs.Vector2d center = 1;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->center_, output);
  }

  // optional double k1 = 2;
  if (has_k1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->k1(), output);
  }

  // optional double k2 = 3;
  if (has_k2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->k2(), output);
  }

  // optional double k3 = 4;
  if (has_k3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->k3(), output);
  }

  // optional double p1 = 5;
  if (has_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->p1(), output);
  }

  // optional double p2 = 6;
  if (has_p2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->p2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Distortion)
}

::google::protobuf::uint8* Distortion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Distortion)
  // optional .experimot.msgs.Vector2d center = 1;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->center_, target);
  }

  // optional double k1 = 2;
  if (has_k1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->k1(), target);
  }

  // optional double k2 = 3;
  if (has_k2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->k2(), target);
  }

  // optional double k3 = 4;
  if (has_k3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->k3(), target);
  }

  // optional double p1 = 5;
  if (has_p1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->p1(), target);
  }

  // optional double p2 = 6;
  if (has_p2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->p2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Distortion)
  return target;
}

int Distortion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63) {
    // optional .experimot.msgs.Vector2d center = 1;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->center_);
    }

    // optional double k1 = 2;
    if (has_k1()) {
      total_size += 1 + 8;
    }

    // optional double k2 = 3;
    if (has_k2()) {
      total_size += 1 + 8;
    }

    // optional double k3 = 4;
    if (has_k3()) {
      total_size += 1 + 8;
    }

    // optional double p1 = 5;
    if (has_p1()) {
      total_size += 1 + 8;
    }

    // optional double p2 = 6;
    if (has_p2()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Distortion::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Distortion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Distortion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Distortion::MergeFrom(const Distortion& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center()) {
      mutable_center()->::experimot::msgs::Vector2d::MergeFrom(from.center());
    }
    if (from.has_k1()) {
      set_k1(from.k1());
    }
    if (from.has_k2()) {
      set_k2(from.k2());
    }
    if (from.has_k3()) {
      set_k3(from.k3());
    }
    if (from.has_p1()) {
      set_p1(from.p1());
    }
    if (from.has_p2()) {
      set_p2(from.p2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Distortion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distortion::CopyFrom(const Distortion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distortion::IsInitialized() const {

  if (has_center()) {
    if (!this->center_->IsInitialized()) return false;
  }
  return true;
}

void Distortion::Swap(Distortion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Distortion::InternalSwap(Distortion* other) {
  std::swap(center_, other->center_);
  std::swap(k1_, other->k1_);
  std::swap(k2_, other->k2_);
  std::swap(k3_, other->k3_);
  std::swap(p1_, other->p1_);
  std::swap(p2_, other->p2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Distortion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Distortion_descriptor_;
  metadata.reflection = Distortion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Distortion

// optional .experimot.msgs.Vector2d center = 1;
 bool Distortion::has_center() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Distortion::set_has_center() {
  _has_bits_[0] |= 0x00000001u;
}
 void Distortion::clear_has_center() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Distortion::clear_center() {
  if (center_ != NULL) center_->::experimot::msgs::Vector2d::Clear();
  clear_has_center();
}
 const ::experimot::msgs::Vector2d& Distortion::center() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Distortion.center)
  return center_ != NULL ? *center_ : *default_instance_->center_;
}
 ::experimot::msgs::Vector2d* Distortion::mutable_center() {
  set_has_center();
  if (center_ == NULL) {
    center_ = new ::experimot::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Distortion.center)
  return center_;
}
 ::experimot::msgs::Vector2d* Distortion::release_center() {
  clear_has_center();
  ::experimot::msgs::Vector2d* temp = center_;
  center_ = NULL;
  return temp;
}
 void Distortion::set_allocated_center(::experimot::msgs::Vector2d* center) {
  delete center_;
  center_ = center;
  if (center) {
    set_has_center();
  } else {
    clear_has_center();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Distortion.center)
}

// optional double k1 = 2;
 bool Distortion::has_k1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Distortion::set_has_k1() {
  _has_bits_[0] |= 0x00000002u;
}
 void Distortion::clear_has_k1() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Distortion::clear_k1() {
  k1_ = 0;
  clear_has_k1();
}
 double Distortion::k1() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Distortion.k1)
  return k1_;
}
 void Distortion::set_k1(double value) {
  set_has_k1();
  k1_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Distortion.k1)
}

// optional double k2 = 3;
 bool Distortion::has_k2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Distortion::set_has_k2() {
  _has_bits_[0] |= 0x00000004u;
}
 void Distortion::clear_has_k2() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Distortion::clear_k2() {
  k2_ = 0;
  clear_has_k2();
}
 double Distortion::k2() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Distortion.k2)
  return k2_;
}
 void Distortion::set_k2(double value) {
  set_has_k2();
  k2_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Distortion.k2)
}

// optional double k3 = 4;
 bool Distortion::has_k3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Distortion::set_has_k3() {
  _has_bits_[0] |= 0x00000008u;
}
 void Distortion::clear_has_k3() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Distortion::clear_k3() {
  k3_ = 0;
  clear_has_k3();
}
 double Distortion::k3() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Distortion.k3)
  return k3_;
}
 void Distortion::set_k3(double value) {
  set_has_k3();
  k3_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Distortion.k3)
}

// optional double p1 = 5;
 bool Distortion::has_p1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Distortion::set_has_p1() {
  _has_bits_[0] |= 0x00000010u;
}
 void Distortion::clear_has_p1() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Distortion::clear_p1() {
  p1_ = 0;
  clear_has_p1();
}
 double Distortion::p1() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Distortion.p1)
  return p1_;
}
 void Distortion::set_p1(double value) {
  set_has_p1();
  p1_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Distortion.p1)
}

// optional double p2 = 6;
 bool Distortion::has_p2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Distortion::set_has_p2() {
  _has_bits_[0] |= 0x00000020u;
}
 void Distortion::clear_has_p2() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Distortion::clear_p2() {
  p2_ = 0;
  clear_has_p2();
}
 double Distortion::p2() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Distortion.p2)
  return p2_;
}
 void Distortion::set_p2(double value) {
  set_has_p2();
  p2_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Distortion.p2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.Distortion", Distortion)
// @@protoc_insertion_point(global_scope)
