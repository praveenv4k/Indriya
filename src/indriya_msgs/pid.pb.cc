// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pid.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* PID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PID_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pid_2eproto() {
  protobuf_AddDesc_pid_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pid.proto");
  GOOGLE_CHECK(file != NULL);
  PID_descriptor_ = file->message_type(0);
  static const int PID_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, p_gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, i_gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, d_gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, i_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, i_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, limit_),
  };
  PID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PID_descriptor_,
      PID::default_instance_,
      PID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, _has_bits_[0]),
      -1,
      -1,
      sizeof(PID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pid_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PID_descriptor_, &PID::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pid_2eproto() {
  delete PID::default_instance_;
  delete PID_reflection_;
}

void protobuf_AddDesc_pid_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpid.proto\022\021Indriya.Core.Msgs\"\207\001\n\003PID\022\021"
    "\n\006target\030\001 \001(\001:\0010\022\021\n\006p_gain\030\002 \001(\001:\0010\022\021\n\006"
    "i_gain\030\003 \001(\001:\0010\022\021\n\006d_gain\030\004 \001(\001:\0010\022\020\n\005i_"
    "max\030\005 \001(\001:\0010\022\020\n\005i_min\030\006 \001(\001:\0010\022\020\n\005limit\030"
    "\007 \001(\001:\0010", 168);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pid.proto", &protobuf_RegisterTypes);
  PID::default_instance_ = new PID();
  PID::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pid_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pid_2eproto {
  StaticDescriptorInitializer_pid_2eproto() {
    protobuf_AddDesc_pid_2eproto();
  }
} static_descriptor_initializer_pid_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int PID::kTargetFieldNumber;
const int PID::kPGainFieldNumber;
const int PID::kIGainFieldNumber;
const int PID::kDGainFieldNumber;
const int PID::kIMaxFieldNumber;
const int PID::kIMinFieldNumber;
const int PID::kLimitFieldNumber;
#endif  // !_MSC_VER

PID::PID()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.PID)
}

void PID::InitAsDefaultInstance() {
}

PID::PID(const PID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.PID)
}

void PID::SharedCtor() {
  _cached_size_ = 0;
  target_ = 0;
  p_gain_ = 0;
  i_gain_ = 0;
  d_gain_ = 0;
  i_max_ = 0;
  i_min_ = 0;
  limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PID::~PID() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.PID)
  SharedDtor();
}

void PID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PID_descriptor_;
}

const PID& PID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pid_2eproto();
  return *default_instance_;
}

PID* PID::default_instance_ = NULL;

PID* PID::New(::google::protobuf::Arena* arena) const {
  PID* n = new PID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PID::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PID*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(target_, limit_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.PID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double target = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_p_gain;
        break;
      }

      // optional double p_gain = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_p_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_gain_)));
          set_has_p_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_i_gain;
        break;
      }

      // optional double i_gain = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_i_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &i_gain_)));
          set_has_i_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_d_gain;
        break;
      }

      // optional double d_gain = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_d_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &d_gain_)));
          set_has_d_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_i_max;
        break;
      }

      // optional double i_max = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_i_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &i_max_)));
          set_has_i_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_i_min;
        break;
      }

      // optional double i_min = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_i_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &i_min_)));
          set_has_i_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_limit;
        break;
      }

      // optional double limit = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.PID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.PID)
  return false;
#undef DO_
}

void PID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.PID)
  // optional double target = 1 [default = 0];
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->target(), output);
  }

  // optional double p_gain = 2 [default = 0];
  if (has_p_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->p_gain(), output);
  }

  // optional double i_gain = 3 [default = 0];
  if (has_i_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->i_gain(), output);
  }

  // optional double d_gain = 4 [default = 0];
  if (has_d_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->d_gain(), output);
  }

  // optional double i_max = 5 [default = 0];
  if (has_i_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->i_max(), output);
  }

  // optional double i_min = 6 [default = 0];
  if (has_i_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->i_min(), output);
  }

  // optional double limit = 7 [default = 0];
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.PID)
}

::google::protobuf::uint8* PID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.PID)
  // optional double target = 1 [default = 0];
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->target(), target);
  }

  // optional double p_gain = 2 [default = 0];
  if (has_p_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->p_gain(), target);
  }

  // optional double i_gain = 3 [default = 0];
  if (has_i_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->i_gain(), target);
  }

  // optional double d_gain = 4 [default = 0];
  if (has_d_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->d_gain(), target);
  }

  // optional double i_max = 5 [default = 0];
  if (has_i_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->i_max(), target);
  }

  // optional double i_min = 6 [default = 0];
  if (has_i_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->i_min(), target);
  }

  // optional double limit = 7 [default = 0];
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.PID)
  return target;
}

int PID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127) {
    // optional double target = 1 [default = 0];
    if (has_target()) {
      total_size += 1 + 8;
    }

    // optional double p_gain = 2 [default = 0];
    if (has_p_gain()) {
      total_size += 1 + 8;
    }

    // optional double i_gain = 3 [default = 0];
    if (has_i_gain()) {
      total_size += 1 + 8;
    }

    // optional double d_gain = 4 [default = 0];
    if (has_d_gain()) {
      total_size += 1 + 8;
    }

    // optional double i_max = 5 [default = 0];
    if (has_i_max()) {
      total_size += 1 + 8;
    }

    // optional double i_min = 6 [default = 0];
    if (has_i_min()) {
      total_size += 1 + 8;
    }

    // optional double limit = 7 [default = 0];
    if (has_limit()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PID::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PID::MergeFrom(const PID& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_p_gain()) {
      set_p_gain(from.p_gain());
    }
    if (from.has_i_gain()) {
      set_i_gain(from.i_gain());
    }
    if (from.has_d_gain()) {
      set_d_gain(from.d_gain());
    }
    if (from.has_i_max()) {
      set_i_max(from.i_max());
    }
    if (from.has_i_min()) {
      set_i_min(from.i_min());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PID::CopyFrom(const PID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PID::IsInitialized() const {

  return true;
}

void PID::Swap(PID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PID::InternalSwap(PID* other) {
  std::swap(target_, other->target_);
  std::swap(p_gain_, other->p_gain_);
  std::swap(i_gain_, other->i_gain_);
  std::swap(d_gain_, other->d_gain_);
  std::swap(i_max_, other->i_max_);
  std::swap(i_min_, other->i_min_);
  std::swap(limit_, other->limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PID_descriptor_;
  metadata.reflection = PID_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PID

// optional double target = 1 [default = 0];
 bool PID::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void PID::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
 void PID::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
 void PID::clear_target() {
  target_ = 0;
  clear_has_target();
}
 double PID::target() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.PID.target)
  return target_;
}
 void PID::set_target(double value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.PID.target)
}

// optional double p_gain = 2 [default = 0];
 bool PID::has_p_gain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void PID::set_has_p_gain() {
  _has_bits_[0] |= 0x00000002u;
}
 void PID::clear_has_p_gain() {
  _has_bits_[0] &= ~0x00000002u;
}
 void PID::clear_p_gain() {
  p_gain_ = 0;
  clear_has_p_gain();
}
 double PID::p_gain() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.PID.p_gain)
  return p_gain_;
}
 void PID::set_p_gain(double value) {
  set_has_p_gain();
  p_gain_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.PID.p_gain)
}

// optional double i_gain = 3 [default = 0];
 bool PID::has_i_gain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void PID::set_has_i_gain() {
  _has_bits_[0] |= 0x00000004u;
}
 void PID::clear_has_i_gain() {
  _has_bits_[0] &= ~0x00000004u;
}
 void PID::clear_i_gain() {
  i_gain_ = 0;
  clear_has_i_gain();
}
 double PID::i_gain() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.PID.i_gain)
  return i_gain_;
}
 void PID::set_i_gain(double value) {
  set_has_i_gain();
  i_gain_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.PID.i_gain)
}

// optional double d_gain = 4 [default = 0];
 bool PID::has_d_gain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void PID::set_has_d_gain() {
  _has_bits_[0] |= 0x00000008u;
}
 void PID::clear_has_d_gain() {
  _has_bits_[0] &= ~0x00000008u;
}
 void PID::clear_d_gain() {
  d_gain_ = 0;
  clear_has_d_gain();
}
 double PID::d_gain() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.PID.d_gain)
  return d_gain_;
}
 void PID::set_d_gain(double value) {
  set_has_d_gain();
  d_gain_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.PID.d_gain)
}

// optional double i_max = 5 [default = 0];
 bool PID::has_i_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void PID::set_has_i_max() {
  _has_bits_[0] |= 0x00000010u;
}
 void PID::clear_has_i_max() {
  _has_bits_[0] &= ~0x00000010u;
}
 void PID::clear_i_max() {
  i_max_ = 0;
  clear_has_i_max();
}
 double PID::i_max() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.PID.i_max)
  return i_max_;
}
 void PID::set_i_max(double value) {
  set_has_i_max();
  i_max_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.PID.i_max)
}

// optional double i_min = 6 [default = 0];
 bool PID::has_i_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void PID::set_has_i_min() {
  _has_bits_[0] |= 0x00000020u;
}
 void PID::clear_has_i_min() {
  _has_bits_[0] &= ~0x00000020u;
}
 void PID::clear_i_min() {
  i_min_ = 0;
  clear_has_i_min();
}
 double PID::i_min() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.PID.i_min)
  return i_min_;
}
 void PID::set_i_min(double value) {
  set_has_i_min();
  i_min_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.PID.i_min)
}

// optional double limit = 7 [default = 0];
 bool PID::has_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void PID::set_has_limit() {
  _has_bits_[0] |= 0x00000040u;
}
 void PID::clear_has_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
 void PID::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
 double PID::limit() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.PID.limit)
  return limit_;
}
 void PID::set_limit(double value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.PID.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.PID", PID)
// @@protoc_insertion_point(global_scope)
