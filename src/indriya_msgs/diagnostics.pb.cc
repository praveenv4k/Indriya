// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diagnostics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "diagnostics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* Diagnostics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Diagnostics_reflection_ = NULL;
const ::google::protobuf::Descriptor* Diagnostics_DiagTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Diagnostics_DiagTime_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_diagnostics_2eproto() {
  protobuf_AddDesc_diagnostics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "diagnostics.proto");
  GOOGLE_CHECK(file != NULL);
  Diagnostics_descriptor_ = file->message_type(0);
  static const int Diagnostics_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics, real_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics, sim_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics, real_time_factor_),
  };
  Diagnostics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Diagnostics_descriptor_,
      Diagnostics::default_instance_,
      Diagnostics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics, _has_bits_[0]),
      -1,
      -1,
      sizeof(Diagnostics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics, _internal_metadata_),
      -1);
  Diagnostics_DiagTime_descriptor_ = Diagnostics_descriptor_->nested_type(0);
  static const int Diagnostics_DiagTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics_DiagTime, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics_DiagTime, elapsed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics_DiagTime, wall_),
  };
  Diagnostics_DiagTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Diagnostics_DiagTime_descriptor_,
      Diagnostics_DiagTime::default_instance_,
      Diagnostics_DiagTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics_DiagTime, _has_bits_[0]),
      -1,
      -1,
      sizeof(Diagnostics_DiagTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics_DiagTime, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_diagnostics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Diagnostics_descriptor_, &Diagnostics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Diagnostics_DiagTime_descriptor_, &Diagnostics_DiagTime::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_diagnostics_2eproto() {
  delete Diagnostics::default_instance_;
  delete Diagnostics_reflection_;
  delete Diagnostics_DiagTime::default_instance_;
  delete Diagnostics_DiagTime_reflection_;
}

void protobuf_AddDesc_diagnostics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Indriya::Core::Msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021diagnostics.proto\022\021Indriya.Core.Msgs\032\n"
    "time.proto\"\240\002\n\013Diagnostics\0225\n\004time\030\001 \003(\013"
    "2\'.Indriya.Core.Msgs.Diagnostics.DiagTim"
    "e\022*\n\treal_time\030\002 \002(\0132\027.Indriya.Core.Msgs"
    ".Time\022)\n\010sim_time\030\003 \002(\0132\027.Indriya.Core.M"
    "sgs.Time\022\030\n\020real_time_factor\030\004 \002(\001\032i\n\010Di"
    "agTime\022\014\n\004name\030\001 \002(\t\022(\n\007elapsed\030\002 \002(\0132\027."
    "Indriya.Core.Msgs.Time\022%\n\004wall\030\003 \002(\0132\027.I"
    "ndriya.Core.Msgs.Time", 341);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diagnostics.proto", &protobuf_RegisterTypes);
  Diagnostics::default_instance_ = new Diagnostics();
  Diagnostics_DiagTime::default_instance_ = new Diagnostics_DiagTime();
  Diagnostics::default_instance_->InitAsDefaultInstance();
  Diagnostics_DiagTime::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_diagnostics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_diagnostics_2eproto {
  StaticDescriptorInitializer_diagnostics_2eproto() {
    protobuf_AddDesc_diagnostics_2eproto();
  }
} static_descriptor_initializer_diagnostics_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Diagnostics_DiagTime::kNameFieldNumber;
const int Diagnostics_DiagTime::kElapsedFieldNumber;
const int Diagnostics_DiagTime::kWallFieldNumber;
#endif  // !_MSC_VER

Diagnostics_DiagTime::Diagnostics_DiagTime()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.Diagnostics.DiagTime)
}

void Diagnostics_DiagTime::InitAsDefaultInstance() {
  elapsed_ = const_cast< ::Indriya::Core::Msgs::Time*>(&::Indriya::Core::Msgs::Time::default_instance());
  wall_ = const_cast< ::Indriya::Core::Msgs::Time*>(&::Indriya::Core::Msgs::Time::default_instance());
}

Diagnostics_DiagTime::Diagnostics_DiagTime(const Diagnostics_DiagTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.Diagnostics.DiagTime)
}

void Diagnostics_DiagTime::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elapsed_ = NULL;
  wall_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Diagnostics_DiagTime::~Diagnostics_DiagTime() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.Diagnostics.DiagTime)
  SharedDtor();
}

void Diagnostics_DiagTime::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete elapsed_;
    delete wall_;
  }
}

void Diagnostics_DiagTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Diagnostics_DiagTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Diagnostics_DiagTime_descriptor_;
}

const Diagnostics_DiagTime& Diagnostics_DiagTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_diagnostics_2eproto();
  return *default_instance_;
}

Diagnostics_DiagTime* Diagnostics_DiagTime::default_instance_ = NULL;

Diagnostics_DiagTime* Diagnostics_DiagTime::New(::google::protobuf::Arena* arena) const {
  Diagnostics_DiagTime* n = new Diagnostics_DiagTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Diagnostics_DiagTime::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_elapsed()) {
      if (elapsed_ != NULL) elapsed_->::Indriya::Core::Msgs::Time::Clear();
    }
    if (has_wall()) {
      if (wall_ != NULL) wall_->::Indriya::Core::Msgs::Time::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Diagnostics_DiagTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.Diagnostics.DiagTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Indriya.Core.Msgs.Diagnostics.DiagTime.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_elapsed;
        break;
      }

      // required .Indriya.Core.Msgs.Time elapsed = 2;
      case 2: {
        if (tag == 18) {
         parse_elapsed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elapsed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wall;
        break;
      }

      // required .Indriya.Core.Msgs.Time wall = 3;
      case 3: {
        if (tag == 26) {
         parse_wall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.Diagnostics.DiagTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.Diagnostics.DiagTime)
  return false;
#undef DO_
}

void Diagnostics_DiagTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.Diagnostics.DiagTime)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Diagnostics.DiagTime.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Indriya.Core.Msgs.Time elapsed = 2;
  if (has_elapsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->elapsed_, output);
  }

  // required .Indriya.Core.Msgs.Time wall = 3;
  if (has_wall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->wall_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.Diagnostics.DiagTime)
}

::google::protobuf::uint8* Diagnostics_DiagTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.Diagnostics.DiagTime)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Diagnostics.DiagTime.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Indriya.Core.Msgs.Time elapsed = 2;
  if (has_elapsed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->elapsed_, target);
  }

  // required .Indriya.Core.Msgs.Time wall = 3;
  if (has_wall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->wall_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.Diagnostics.DiagTime)
  return target;
}

int Diagnostics_DiagTime::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_elapsed()) {
    // required .Indriya.Core.Msgs.Time elapsed = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->elapsed_);
  }

  if (has_wall()) {
    // required .Indriya.Core.Msgs.Time wall = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wall_);
  }

  return total_size;
}
int Diagnostics_DiagTime::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .Indriya.Core.Msgs.Time elapsed = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->elapsed_);

    // required .Indriya.Core.Msgs.Time wall = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wall_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Diagnostics_DiagTime::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Diagnostics_DiagTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Diagnostics_DiagTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Diagnostics_DiagTime::MergeFrom(const Diagnostics_DiagTime& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_elapsed()) {
      mutable_elapsed()->::Indriya::Core::Msgs::Time::MergeFrom(from.elapsed());
    }
    if (from.has_wall()) {
      mutable_wall()->::Indriya::Core::Msgs::Time::MergeFrom(from.wall());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Diagnostics_DiagTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnostics_DiagTime::CopyFrom(const Diagnostics_DiagTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostics_DiagTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_elapsed()) {
    if (!this->elapsed_->IsInitialized()) return false;
  }
  if (has_wall()) {
    if (!this->wall_->IsInitialized()) return false;
  }
  return true;
}

void Diagnostics_DiagTime::Swap(Diagnostics_DiagTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Diagnostics_DiagTime::InternalSwap(Diagnostics_DiagTime* other) {
  name_.Swap(&other->name_);
  std::swap(elapsed_, other->elapsed_);
  std::swap(wall_, other->wall_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Diagnostics_DiagTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Diagnostics_DiagTime_descriptor_;
  metadata.reflection = Diagnostics_DiagTime_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Diagnostics::kTimeFieldNumber;
const int Diagnostics::kRealTimeFieldNumber;
const int Diagnostics::kSimTimeFieldNumber;
const int Diagnostics::kRealTimeFactorFieldNumber;
#endif  // !_MSC_VER

Diagnostics::Diagnostics()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.Diagnostics)
}

void Diagnostics::InitAsDefaultInstance() {
  real_time_ = const_cast< ::Indriya::Core::Msgs::Time*>(&::Indriya::Core::Msgs::Time::default_instance());
  sim_time_ = const_cast< ::Indriya::Core::Msgs::Time*>(&::Indriya::Core::Msgs::Time::default_instance());
}

Diagnostics::Diagnostics(const Diagnostics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.Diagnostics)
}

void Diagnostics::SharedCtor() {
  _cached_size_ = 0;
  real_time_ = NULL;
  sim_time_ = NULL;
  real_time_factor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Diagnostics::~Diagnostics() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.Diagnostics)
  SharedDtor();
}

void Diagnostics::SharedDtor() {
  if (this != default_instance_) {
    delete real_time_;
    delete sim_time_;
  }
}

void Diagnostics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Diagnostics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Diagnostics_descriptor_;
}

const Diagnostics& Diagnostics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_diagnostics_2eproto();
  return *default_instance_;
}

Diagnostics* Diagnostics::default_instance_ = NULL;

Diagnostics* Diagnostics::New(::google::protobuf::Arena* arena) const {
  Diagnostics* n = new Diagnostics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Diagnostics::Clear() {
  if (_has_bits_[0 / 32] & 14) {
    if (has_real_time()) {
      if (real_time_ != NULL) real_time_->::Indriya::Core::Msgs::Time::Clear();
    }
    if (has_sim_time()) {
      if (sim_time_ != NULL) sim_time_->::Indriya::Core::Msgs::Time::Clear();
    }
    real_time_factor_ = 0;
  }
  time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Diagnostics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.Diagnostics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Indriya.Core.Msgs.Diagnostics.DiagTime time = 1;
      case 1: {
        if (tag == 10) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_time;
        if (input->ExpectTag(18)) goto parse_real_time;
        break;
      }

      // required .Indriya.Core.Msgs.Time real_time = 2;
      case 2: {
        if (tag == 18) {
         parse_real_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sim_time;
        break;
      }

      // required .Indriya.Core.Msgs.Time sim_time = 3;
      case 3: {
        if (tag == 26) {
         parse_sim_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sim_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_real_time_factor;
        break;
      }

      // required double real_time_factor = 4;
      case 4: {
        if (tag == 33) {
         parse_real_time_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_time_factor_)));
          set_has_real_time_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.Diagnostics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.Diagnostics)
  return false;
#undef DO_
}

void Diagnostics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.Diagnostics)
  // repeated .Indriya.Core.Msgs.Diagnostics.DiagTime time = 1;
  for (unsigned int i = 0, n = this->time_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->time(i), output);
  }

  // required .Indriya.Core.Msgs.Time real_time = 2;
  if (has_real_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->real_time_, output);
  }

  // required .Indriya.Core.Msgs.Time sim_time = 3;
  if (has_sim_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sim_time_, output);
  }

  // required double real_time_factor = 4;
  if (has_real_time_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->real_time_factor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.Diagnostics)
}

::google::protobuf::uint8* Diagnostics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.Diagnostics)
  // repeated .Indriya.Core.Msgs.Diagnostics.DiagTime time = 1;
  for (unsigned int i = 0, n = this->time_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->time(i), target);
  }

  // required .Indriya.Core.Msgs.Time real_time = 2;
  if (has_real_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->real_time_, target);
  }

  // required .Indriya.Core.Msgs.Time sim_time = 3;
  if (has_sim_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->sim_time_, target);
  }

  // required double real_time_factor = 4;
  if (has_real_time_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->real_time_factor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.Diagnostics)
  return target;
}

int Diagnostics::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_real_time()) {
    // required .Indriya.Core.Msgs.Time real_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->real_time_);
  }

  if (has_sim_time()) {
    // required .Indriya.Core.Msgs.Time sim_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sim_time_);
  }

  if (has_real_time_factor()) {
    // required double real_time_factor = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
int Diagnostics::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .Indriya.Core.Msgs.Time real_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->real_time_);

    // required .Indriya.Core.Msgs.Time sim_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sim_time_);

    // required double real_time_factor = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .Indriya.Core.Msgs.Diagnostics.DiagTime time = 1;
  total_size += 1 * this->time_size();
  for (int i = 0; i < this->time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Diagnostics::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Diagnostics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Diagnostics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Diagnostics::MergeFrom(const Diagnostics& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  time_.MergeFrom(from.time_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_real_time()) {
      mutable_real_time()->::Indriya::Core::Msgs::Time::MergeFrom(from.real_time());
    }
    if (from.has_sim_time()) {
      mutable_sim_time()->::Indriya::Core::Msgs::Time::MergeFrom(from.sim_time());
    }
    if (from.has_real_time_factor()) {
      set_real_time_factor(from.real_time_factor());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Diagnostics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnostics::CopyFrom(const Diagnostics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostics::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->time())) return false;
  if (has_real_time()) {
    if (!this->real_time_->IsInitialized()) return false;
  }
  if (has_sim_time()) {
    if (!this->sim_time_->IsInitialized()) return false;
  }
  return true;
}

void Diagnostics::Swap(Diagnostics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Diagnostics::InternalSwap(Diagnostics* other) {
  time_.UnsafeArenaSwap(&other->time_);
  std::swap(real_time_, other->real_time_);
  std::swap(sim_time_, other->sim_time_);
  std::swap(real_time_factor_, other->real_time_factor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Diagnostics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Diagnostics_descriptor_;
  metadata.reflection = Diagnostics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Diagnostics_DiagTime

// required string name = 1;
 bool Diagnostics_DiagTime::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Diagnostics_DiagTime::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void Diagnostics_DiagTime::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Diagnostics_DiagTime::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Diagnostics_DiagTime::name() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Diagnostics.DiagTime.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Diagnostics_DiagTime::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Diagnostics.DiagTime.name)
}
 void Diagnostics_DiagTime::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.Diagnostics.DiagTime.name)
}
 void Diagnostics_DiagTime::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.Diagnostics.DiagTime.name)
}
 ::std::string* Diagnostics_DiagTime::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Diagnostics.DiagTime.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Diagnostics_DiagTime::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Diagnostics_DiagTime::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Diagnostics.DiagTime.name)
}

// required .Indriya.Core.Msgs.Time elapsed = 2;
 bool Diagnostics_DiagTime::has_elapsed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Diagnostics_DiagTime::set_has_elapsed() {
  _has_bits_[0] |= 0x00000002u;
}
 void Diagnostics_DiagTime::clear_has_elapsed() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Diagnostics_DiagTime::clear_elapsed() {
  if (elapsed_ != NULL) elapsed_->::Indriya::Core::Msgs::Time::Clear();
  clear_has_elapsed();
}
 const ::Indriya::Core::Msgs::Time& Diagnostics_DiagTime::elapsed() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Diagnostics.DiagTime.elapsed)
  return elapsed_ != NULL ? *elapsed_ : *default_instance_->elapsed_;
}
 ::Indriya::Core::Msgs::Time* Diagnostics_DiagTime::mutable_elapsed() {
  set_has_elapsed();
  if (elapsed_ == NULL) {
    elapsed_ = new ::Indriya::Core::Msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Diagnostics.DiagTime.elapsed)
  return elapsed_;
}
 ::Indriya::Core::Msgs::Time* Diagnostics_DiagTime::release_elapsed() {
  clear_has_elapsed();
  ::Indriya::Core::Msgs::Time* temp = elapsed_;
  elapsed_ = NULL;
  return temp;
}
 void Diagnostics_DiagTime::set_allocated_elapsed(::Indriya::Core::Msgs::Time* elapsed) {
  delete elapsed_;
  elapsed_ = elapsed;
  if (elapsed) {
    set_has_elapsed();
  } else {
    clear_has_elapsed();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Diagnostics.DiagTime.elapsed)
}

// required .Indriya.Core.Msgs.Time wall = 3;
 bool Diagnostics_DiagTime::has_wall() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Diagnostics_DiagTime::set_has_wall() {
  _has_bits_[0] |= 0x00000004u;
}
 void Diagnostics_DiagTime::clear_has_wall() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Diagnostics_DiagTime::clear_wall() {
  if (wall_ != NULL) wall_->::Indriya::Core::Msgs::Time::Clear();
  clear_has_wall();
}
 const ::Indriya::Core::Msgs::Time& Diagnostics_DiagTime::wall() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Diagnostics.DiagTime.wall)
  return wall_ != NULL ? *wall_ : *default_instance_->wall_;
}
 ::Indriya::Core::Msgs::Time* Diagnostics_DiagTime::mutable_wall() {
  set_has_wall();
  if (wall_ == NULL) {
    wall_ = new ::Indriya::Core::Msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Diagnostics.DiagTime.wall)
  return wall_;
}
 ::Indriya::Core::Msgs::Time* Diagnostics_DiagTime::release_wall() {
  clear_has_wall();
  ::Indriya::Core::Msgs::Time* temp = wall_;
  wall_ = NULL;
  return temp;
}
 void Diagnostics_DiagTime::set_allocated_wall(::Indriya::Core::Msgs::Time* wall) {
  delete wall_;
  wall_ = wall;
  if (wall) {
    set_has_wall();
  } else {
    clear_has_wall();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Diagnostics.DiagTime.wall)
}

// -------------------------------------------------------------------

// Diagnostics

// repeated .Indriya.Core.Msgs.Diagnostics.DiagTime time = 1;
 int Diagnostics::time_size() const {
  return time_.size();
}
 void Diagnostics::clear_time() {
  time_.Clear();
}
 const ::Indriya::Core::Msgs::Diagnostics_DiagTime& Diagnostics::time(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Diagnostics.time)
  return time_.Get(index);
}
 ::Indriya::Core::Msgs::Diagnostics_DiagTime* Diagnostics::mutable_time(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Diagnostics.time)
  return time_.Mutable(index);
}
 ::Indriya::Core::Msgs::Diagnostics_DiagTime* Diagnostics::add_time() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Diagnostics.time)
  return time_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Diagnostics_DiagTime >&
Diagnostics::time() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Diagnostics.time)
  return time_;
}
 ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Diagnostics_DiagTime >*
Diagnostics::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Diagnostics.time)
  return &time_;
}

// required .Indriya.Core.Msgs.Time real_time = 2;
 bool Diagnostics::has_real_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Diagnostics::set_has_real_time() {
  _has_bits_[0] |= 0x00000002u;
}
 void Diagnostics::clear_has_real_time() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Diagnostics::clear_real_time() {
  if (real_time_ != NULL) real_time_->::Indriya::Core::Msgs::Time::Clear();
  clear_has_real_time();
}
 const ::Indriya::Core::Msgs::Time& Diagnostics::real_time() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Diagnostics.real_time)
  return real_time_ != NULL ? *real_time_ : *default_instance_->real_time_;
}
 ::Indriya::Core::Msgs::Time* Diagnostics::mutable_real_time() {
  set_has_real_time();
  if (real_time_ == NULL) {
    real_time_ = new ::Indriya::Core::Msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Diagnostics.real_time)
  return real_time_;
}
 ::Indriya::Core::Msgs::Time* Diagnostics::release_real_time() {
  clear_has_real_time();
  ::Indriya::Core::Msgs::Time* temp = real_time_;
  real_time_ = NULL;
  return temp;
}
 void Diagnostics::set_allocated_real_time(::Indriya::Core::Msgs::Time* real_time) {
  delete real_time_;
  real_time_ = real_time;
  if (real_time) {
    set_has_real_time();
  } else {
    clear_has_real_time();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Diagnostics.real_time)
}

// required .Indriya.Core.Msgs.Time sim_time = 3;
 bool Diagnostics::has_sim_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Diagnostics::set_has_sim_time() {
  _has_bits_[0] |= 0x00000004u;
}
 void Diagnostics::clear_has_sim_time() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Diagnostics::clear_sim_time() {
  if (sim_time_ != NULL) sim_time_->::Indriya::Core::Msgs::Time::Clear();
  clear_has_sim_time();
}
 const ::Indriya::Core::Msgs::Time& Diagnostics::sim_time() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Diagnostics.sim_time)
  return sim_time_ != NULL ? *sim_time_ : *default_instance_->sim_time_;
}
 ::Indriya::Core::Msgs::Time* Diagnostics::mutable_sim_time() {
  set_has_sim_time();
  if (sim_time_ == NULL) {
    sim_time_ = new ::Indriya::Core::Msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Diagnostics.sim_time)
  return sim_time_;
}
 ::Indriya::Core::Msgs::Time* Diagnostics::release_sim_time() {
  clear_has_sim_time();
  ::Indriya::Core::Msgs::Time* temp = sim_time_;
  sim_time_ = NULL;
  return temp;
}
 void Diagnostics::set_allocated_sim_time(::Indriya::Core::Msgs::Time* sim_time) {
  delete sim_time_;
  sim_time_ = sim_time;
  if (sim_time) {
    set_has_sim_time();
  } else {
    clear_has_sim_time();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Diagnostics.sim_time)
}

// required double real_time_factor = 4;
 bool Diagnostics::has_real_time_factor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Diagnostics::set_has_real_time_factor() {
  _has_bits_[0] |= 0x00000008u;
}
 void Diagnostics::clear_has_real_time_factor() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Diagnostics::clear_real_time_factor() {
  real_time_factor_ = 0;
  clear_has_real_time_factor();
}
 double Diagnostics::real_time_factor() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Diagnostics.real_time_factor)
  return real_time_factor_;
}
 void Diagnostics::set_real_time_factor(double value) {
  set_has_real_time_factor();
  real_time_factor_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Diagnostics.real_time_factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.Diagnostics", Diagnostics)
// @@protoc_insertion_point(global_scope)
