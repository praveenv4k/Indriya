// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boxgeom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "boxgeom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* BoxGeom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxGeom_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_boxgeom_2eproto() {
  protobuf_AddDesc_boxgeom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "boxgeom.proto");
  GOOGLE_CHECK(file != NULL);
  BoxGeom_descriptor_ = file->message_type(0);
  static const int BoxGeom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxGeom, size_),
  };
  BoxGeom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoxGeom_descriptor_,
      BoxGeom::default_instance_,
      BoxGeom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxGeom, _has_bits_[0]),
      -1,
      -1,
      sizeof(BoxGeom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxGeom, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_boxgeom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoxGeom_descriptor_, &BoxGeom::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_boxgeom_2eproto() {
  delete BoxGeom::default_instance_;
  delete BoxGeom_reflection_;
}

void protobuf_AddDesc_boxgeom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Indriya::Core::Msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rboxgeom.proto\022\021Indriya.Core.Msgs\032\016vect"
    "or3d.proto\"4\n\007BoxGeom\022)\n\004size\030\001 \002(\0132\033.In"
    "driya.Core.Msgs.Vector3d", 104);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "boxgeom.proto", &protobuf_RegisterTypes);
  BoxGeom::default_instance_ = new BoxGeom();
  BoxGeom::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_boxgeom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_boxgeom_2eproto {
  StaticDescriptorInitializer_boxgeom_2eproto() {
    protobuf_AddDesc_boxgeom_2eproto();
  }
} static_descriptor_initializer_boxgeom_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int BoxGeom::kSizeFieldNumber;
#endif  // !_MSC_VER

BoxGeom::BoxGeom()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.BoxGeom)
}

void BoxGeom::InitAsDefaultInstance() {
  size_ = const_cast< ::Indriya::Core::Msgs::Vector3d*>(&::Indriya::Core::Msgs::Vector3d::default_instance());
}

BoxGeom::BoxGeom(const BoxGeom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.BoxGeom)
}

void BoxGeom::SharedCtor() {
  _cached_size_ = 0;
  size_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxGeom::~BoxGeom() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.BoxGeom)
  SharedDtor();
}

void BoxGeom::SharedDtor() {
  if (this != default_instance_) {
    delete size_;
  }
}

void BoxGeom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxGeom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxGeom_descriptor_;
}

const BoxGeom& BoxGeom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boxgeom_2eproto();
  return *default_instance_;
}

BoxGeom* BoxGeom::default_instance_ = NULL;

BoxGeom* BoxGeom::New(::google::protobuf::Arena* arena) const {
  BoxGeom* n = new BoxGeom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoxGeom::Clear() {
  if (has_size()) {
    if (size_ != NULL) size_->::Indriya::Core::Msgs::Vector3d::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BoxGeom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.BoxGeom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Indriya.Core.Msgs.Vector3d size = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.BoxGeom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.BoxGeom)
  return false;
#undef DO_
}

void BoxGeom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.BoxGeom)
  // required .Indriya.Core.Msgs.Vector3d size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->size_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.BoxGeom)
}

::google::protobuf::uint8* BoxGeom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.BoxGeom)
  // required .Indriya.Core.Msgs.Vector3d size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->size_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.BoxGeom)
  return target;
}

int BoxGeom::ByteSize() const {
  int total_size = 0;

  // required .Indriya.Core.Msgs.Vector3d size = 1;
  if (has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->size_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxGeom::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BoxGeom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxGeom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxGeom::MergeFrom(const BoxGeom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      mutable_size()->::Indriya::Core::Msgs::Vector3d::MergeFrom(from.size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BoxGeom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxGeom::CopyFrom(const BoxGeom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxGeom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_size()) {
    if (!this->size_->IsInitialized()) return false;
  }
  return true;
}

void BoxGeom::Swap(BoxGeom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoxGeom::InternalSwap(BoxGeom* other) {
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoxGeom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxGeom_descriptor_;
  metadata.reflection = BoxGeom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoxGeom

// required .Indriya.Core.Msgs.Vector3d size = 1;
 bool BoxGeom::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void BoxGeom::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
 void BoxGeom::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
 void BoxGeom::clear_size() {
  if (size_ != NULL) size_->::Indriya::Core::Msgs::Vector3d::Clear();
  clear_has_size();
}
 const ::Indriya::Core::Msgs::Vector3d& BoxGeom::size() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.BoxGeom.size)
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
 ::Indriya::Core::Msgs::Vector3d* BoxGeom::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::Indriya::Core::Msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.BoxGeom.size)
  return size_;
}
 ::Indriya::Core::Msgs::Vector3d* BoxGeom::release_size() {
  clear_has_size();
  ::Indriya::Core::Msgs::Vector3d* temp = size_;
  size_ = NULL;
  return temp;
}
 void BoxGeom::set_allocated_size(::Indriya::Core::Msgs::Vector3d* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.BoxGeom.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.BoxGeom", BoxGeom)
// @@protoc_insertion_point(global_scope)
