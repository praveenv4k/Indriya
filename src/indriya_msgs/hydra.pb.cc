// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hydra.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hydra.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* Hydra_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hydra_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hydra_Paddle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hydra_Paddle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hydra_2eproto() {
  protobuf_AddDesc_hydra_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hydra.proto");
  GOOGLE_CHECK(file != NULL);
  Hydra_descriptor_ = file->message_type(0);
  static const int Hydra_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra, left_),
  };
  Hydra_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Hydra_descriptor_,
      Hydra::default_instance_,
      Hydra_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra, _has_bits_[0]),
      -1,
      -1,
      sizeof(Hydra),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra, _internal_metadata_),
      -1);
  Hydra_Paddle_descriptor_ = Hydra_descriptor_->nested_type(0);
  static const int Hydra_Paddle_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, button_bumper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, button_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, button_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, button_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, button_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, button_joy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, button_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, joy_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, joy_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, trigger_),
  };
  Hydra_Paddle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Hydra_Paddle_descriptor_,
      Hydra_Paddle::default_instance_,
      Hydra_Paddle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, _has_bits_[0]),
      -1,
      -1,
      sizeof(Hydra_Paddle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra_Paddle, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hydra_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Hydra_descriptor_, &Hydra::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Hydra_Paddle_descriptor_, &Hydra_Paddle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hydra_2eproto() {
  delete Hydra::default_instance_;
  delete Hydra_reflection_;
  delete Hydra_Paddle::default_instance_;
  delete Hydra_Paddle_reflection_;
}

void protobuf_AddDesc_hydra_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Indriya::Core::Msgs::protobuf_AddDesc_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013hydra.proto\022\021Indriya.Core.Msgs\032\npose.p"
    "roto\"\321\002\n\005Hydra\022.\n\005right\030\001 \002(\0132\037.Indriya."
    "Core.Msgs.Hydra.Paddle\022-\n\004left\030\002 \002(\0132\037.I"
    "ndriya.Core.Msgs.Hydra.Paddle\032\350\001\n\006Paddle"
    "\022%\n\004pose\030\001 \002(\0132\027.Indriya.Core.Msgs.Pose\022"
    "\025\n\rbutton_bumper\030\002 \002(\010\022\020\n\010button_1\030\003 \002(\010"
    "\022\020\n\010button_2\030\004 \002(\010\022\020\n\010button_3\030\005 \002(\010\022\020\n\010"
    "button_4\030\006 \002(\010\022\022\n\nbutton_joy\030\007 \002(\010\022\025\n\rbu"
    "tton_center\030\010 \002(\010\022\r\n\005joy_x\030\t \002(\001\022\r\n\005joy_"
    "y\030\n \002(\001\022\017\n\007trigger\030\013 \002(\001", 384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hydra.proto", &protobuf_RegisterTypes);
  Hydra::default_instance_ = new Hydra();
  Hydra_Paddle::default_instance_ = new Hydra_Paddle();
  Hydra::default_instance_->InitAsDefaultInstance();
  Hydra_Paddle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hydra_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hydra_2eproto {
  StaticDescriptorInitializer_hydra_2eproto() {
    protobuf_AddDesc_hydra_2eproto();
  }
} static_descriptor_initializer_hydra_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Hydra_Paddle::kPoseFieldNumber;
const int Hydra_Paddle::kButtonBumperFieldNumber;
const int Hydra_Paddle::kButton1FieldNumber;
const int Hydra_Paddle::kButton2FieldNumber;
const int Hydra_Paddle::kButton3FieldNumber;
const int Hydra_Paddle::kButton4FieldNumber;
const int Hydra_Paddle::kButtonJoyFieldNumber;
const int Hydra_Paddle::kButtonCenterFieldNumber;
const int Hydra_Paddle::kJoyXFieldNumber;
const int Hydra_Paddle::kJoyYFieldNumber;
const int Hydra_Paddle::kTriggerFieldNumber;
#endif  // !_MSC_VER

Hydra_Paddle::Hydra_Paddle()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.Hydra.Paddle)
}

void Hydra_Paddle::InitAsDefaultInstance() {
  pose_ = const_cast< ::Indriya::Core::Msgs::Pose*>(&::Indriya::Core::Msgs::Pose::default_instance());
}

Hydra_Paddle::Hydra_Paddle(const Hydra_Paddle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.Hydra.Paddle)
}

void Hydra_Paddle::SharedCtor() {
  _cached_size_ = 0;
  pose_ = NULL;
  button_bumper_ = false;
  button_1_ = false;
  button_2_ = false;
  button_3_ = false;
  button_4_ = false;
  button_joy_ = false;
  button_center_ = false;
  joy_x_ = 0;
  joy_y_ = 0;
  trigger_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hydra_Paddle::~Hydra_Paddle() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.Hydra.Paddle)
  SharedDtor();
}

void Hydra_Paddle::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void Hydra_Paddle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hydra_Paddle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hydra_Paddle_descriptor_;
}

const Hydra_Paddle& Hydra_Paddle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hydra_2eproto();
  return *default_instance_;
}

Hydra_Paddle* Hydra_Paddle::default_instance_ = NULL;

Hydra_Paddle* Hydra_Paddle::New(::google::protobuf::Arena* arena) const {
  Hydra_Paddle* n = new Hydra_Paddle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Hydra_Paddle::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Hydra_Paddle*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(button_bumper_, button_center_);
    if (has_pose()) {
      if (pose_ != NULL) pose_->::Indriya::Core::Msgs::Pose::Clear();
    }
  }
  ZR_(joy_x_, trigger_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Hydra_Paddle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.Hydra.Paddle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Indriya.Core.Msgs.Pose pose = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_button_bumper;
        break;
      }

      // required bool button_bumper = 2;
      case 2: {
        if (tag == 16) {
         parse_button_bumper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &button_bumper_)));
          set_has_button_bumper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_button_1;
        break;
      }

      // required bool button_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_button_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &button_1_)));
          set_has_button_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_button_2;
        break;
      }

      // required bool button_2 = 4;
      case 4: {
        if (tag == 32) {
         parse_button_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &button_2_)));
          set_has_button_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_button_3;
        break;
      }

      // required bool button_3 = 5;
      case 5: {
        if (tag == 40) {
         parse_button_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &button_3_)));
          set_has_button_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_button_4;
        break;
      }

      // required bool button_4 = 6;
      case 6: {
        if (tag == 48) {
         parse_button_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &button_4_)));
          set_has_button_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_button_joy;
        break;
      }

      // required bool button_joy = 7;
      case 7: {
        if (tag == 56) {
         parse_button_joy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &button_joy_)));
          set_has_button_joy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_button_center;
        break;
      }

      // required bool button_center = 8;
      case 8: {
        if (tag == 64) {
         parse_button_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &button_center_)));
          set_has_button_center();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_joy_x;
        break;
      }

      // required double joy_x = 9;
      case 9: {
        if (tag == 73) {
         parse_joy_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &joy_x_)));
          set_has_joy_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_joy_y;
        break;
      }

      // required double joy_y = 10;
      case 10: {
        if (tag == 81) {
         parse_joy_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &joy_y_)));
          set_has_joy_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_trigger;
        break;
      }

      // required double trigger = 11;
      case 11: {
        if (tag == 89) {
         parse_trigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trigger_)));
          set_has_trigger();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.Hydra.Paddle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.Hydra.Paddle)
  return false;
#undef DO_
}

void Hydra_Paddle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.Hydra.Paddle)
  // required .Indriya.Core.Msgs.Pose pose = 1;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pose_, output);
  }

  // required bool button_bumper = 2;
  if (has_button_bumper()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->button_bumper(), output);
  }

  // required bool button_1 = 3;
  if (has_button_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->button_1(), output);
  }

  // required bool button_2 = 4;
  if (has_button_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->button_2(), output);
  }

  // required bool button_3 = 5;
  if (has_button_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->button_3(), output);
  }

  // required bool button_4 = 6;
  if (has_button_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->button_4(), output);
  }

  // required bool button_joy = 7;
  if (has_button_joy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->button_joy(), output);
  }

  // required bool button_center = 8;
  if (has_button_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->button_center(), output);
  }

  // required double joy_x = 9;
  if (has_joy_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->joy_x(), output);
  }

  // required double joy_y = 10;
  if (has_joy_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->joy_y(), output);
  }

  // required double trigger = 11;
  if (has_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->trigger(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.Hydra.Paddle)
}

::google::protobuf::uint8* Hydra_Paddle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.Hydra.Paddle)
  // required .Indriya.Core.Msgs.Pose pose = 1;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->pose_, target);
  }

  // required bool button_bumper = 2;
  if (has_button_bumper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->button_bumper(), target);
  }

  // required bool button_1 = 3;
  if (has_button_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->button_1(), target);
  }

  // required bool button_2 = 4;
  if (has_button_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->button_2(), target);
  }

  // required bool button_3 = 5;
  if (has_button_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->button_3(), target);
  }

  // required bool button_4 = 6;
  if (has_button_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->button_4(), target);
  }

  // required bool button_joy = 7;
  if (has_button_joy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->button_joy(), target);
  }

  // required bool button_center = 8;
  if (has_button_center()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->button_center(), target);
  }

  // required double joy_x = 9;
  if (has_joy_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->joy_x(), target);
  }

  // required double joy_y = 10;
  if (has_joy_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->joy_y(), target);
  }

  // required double trigger = 11;
  if (has_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->trigger(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.Hydra.Paddle)
  return target;
}

int Hydra_Paddle::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_pose()) {
    // required .Indriya.Core.Msgs.Pose pose = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  if (has_button_bumper()) {
    // required bool button_bumper = 2;
    total_size += 1 + 1;
  }

  if (has_button_1()) {
    // required bool button_1 = 3;
    total_size += 1 + 1;
  }

  if (has_button_2()) {
    // required bool button_2 = 4;
    total_size += 1 + 1;
  }

  if (has_button_3()) {
    // required bool button_3 = 5;
    total_size += 1 + 1;
  }

  if (has_button_4()) {
    // required bool button_4 = 6;
    total_size += 1 + 1;
  }

  if (has_button_joy()) {
    // required bool button_joy = 7;
    total_size += 1 + 1;
  }

  if (has_button_center()) {
    // required bool button_center = 8;
    total_size += 1 + 1;
  }

  if (has_joy_x()) {
    // required double joy_x = 9;
    total_size += 1 + 8;
  }

  if (has_joy_y()) {
    // required double joy_y = 10;
    total_size += 1 + 8;
  }

  if (has_trigger()) {
    // required double trigger = 11;
    total_size += 1 + 8;
  }

  return total_size;
}
int Hydra_Paddle::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required .Indriya.Core.Msgs.Pose pose = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);

    // required bool button_bumper = 2;
    total_size += 1 + 1;

    // required bool button_1 = 3;
    total_size += 1 + 1;

    // required bool button_2 = 4;
    total_size += 1 + 1;

    // required bool button_3 = 5;
    total_size += 1 + 1;

    // required bool button_4 = 6;
    total_size += 1 + 1;

    // required bool button_joy = 7;
    total_size += 1 + 1;

    // required bool button_center = 8;
    total_size += 1 + 1;

    // required double joy_x = 9;
    total_size += 1 + 8;

    // required double joy_y = 10;
    total_size += 1 + 8;

    // required double trigger = 11;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hydra_Paddle::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Hydra_Paddle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hydra_Paddle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hydra_Paddle::MergeFrom(const Hydra_Paddle& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pose()) {
      mutable_pose()->::Indriya::Core::Msgs::Pose::MergeFrom(from.pose());
    }
    if (from.has_button_bumper()) {
      set_button_bumper(from.button_bumper());
    }
    if (from.has_button_1()) {
      set_button_1(from.button_1());
    }
    if (from.has_button_2()) {
      set_button_2(from.button_2());
    }
    if (from.has_button_3()) {
      set_button_3(from.button_3());
    }
    if (from.has_button_4()) {
      set_button_4(from.button_4());
    }
    if (from.has_button_joy()) {
      set_button_joy(from.button_joy());
    }
    if (from.has_button_center()) {
      set_button_center(from.button_center());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_joy_x()) {
      set_joy_x(from.joy_x());
    }
    if (from.has_joy_y()) {
      set_joy_y(from.joy_y());
    }
    if (from.has_trigger()) {
      set_trigger(from.trigger());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Hydra_Paddle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hydra_Paddle::CopyFrom(const Hydra_Paddle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hydra_Paddle::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  return true;
}

void Hydra_Paddle::Swap(Hydra_Paddle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Hydra_Paddle::InternalSwap(Hydra_Paddle* other) {
  std::swap(pose_, other->pose_);
  std::swap(button_bumper_, other->button_bumper_);
  std::swap(button_1_, other->button_1_);
  std::swap(button_2_, other->button_2_);
  std::swap(button_3_, other->button_3_);
  std::swap(button_4_, other->button_4_);
  std::swap(button_joy_, other->button_joy_);
  std::swap(button_center_, other->button_center_);
  std::swap(joy_x_, other->joy_x_);
  std::swap(joy_y_, other->joy_y_);
  std::swap(trigger_, other->trigger_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Hydra_Paddle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hydra_Paddle_descriptor_;
  metadata.reflection = Hydra_Paddle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Hydra::kRightFieldNumber;
const int Hydra::kLeftFieldNumber;
#endif  // !_MSC_VER

Hydra::Hydra()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.Hydra)
}

void Hydra::InitAsDefaultInstance() {
  right_ = const_cast< ::Indriya::Core::Msgs::Hydra_Paddle*>(&::Indriya::Core::Msgs::Hydra_Paddle::default_instance());
  left_ = const_cast< ::Indriya::Core::Msgs::Hydra_Paddle*>(&::Indriya::Core::Msgs::Hydra_Paddle::default_instance());
}

Hydra::Hydra(const Hydra& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.Hydra)
}

void Hydra::SharedCtor() {
  _cached_size_ = 0;
  right_ = NULL;
  left_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hydra::~Hydra() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.Hydra)
  SharedDtor();
}

void Hydra::SharedDtor() {
  if (this != default_instance_) {
    delete right_;
    delete left_;
  }
}

void Hydra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hydra::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hydra_descriptor_;
}

const Hydra& Hydra::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hydra_2eproto();
  return *default_instance_;
}

Hydra* Hydra::default_instance_ = NULL;

Hydra* Hydra::New(::google::protobuf::Arena* arena) const {
  Hydra* n = new Hydra;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Hydra::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_right()) {
      if (right_ != NULL) right_->::Indriya::Core::Msgs::Hydra_Paddle::Clear();
    }
    if (has_left()) {
      if (left_ != NULL) left_->::Indriya::Core::Msgs::Hydra_Paddle::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Hydra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.Hydra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Indriya.Core.Msgs.Hydra.Paddle right = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_left;
        break;
      }

      // required .Indriya.Core.Msgs.Hydra.Paddle left = 2;
      case 2: {
        if (tag == 18) {
         parse_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.Hydra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.Hydra)
  return false;
#undef DO_
}

void Hydra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.Hydra)
  // required .Indriya.Core.Msgs.Hydra.Paddle right = 1;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->right_, output);
  }

  // required .Indriya.Core.Msgs.Hydra.Paddle left = 2;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->left_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.Hydra)
}

::google::protobuf::uint8* Hydra::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.Hydra)
  // required .Indriya.Core.Msgs.Hydra.Paddle right = 1;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->right_, target);
  }

  // required .Indriya.Core.Msgs.Hydra.Paddle left = 2;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->left_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.Hydra)
  return target;
}

int Hydra::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_right()) {
    // required .Indriya.Core.Msgs.Hydra.Paddle right = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_);
  }

  if (has_left()) {
    // required .Indriya.Core.Msgs.Hydra.Paddle left = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_);
  }

  return total_size;
}
int Hydra::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Indriya.Core.Msgs.Hydra.Paddle right = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_);

    // required .Indriya.Core.Msgs.Hydra.Paddle left = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hydra::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Hydra* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hydra*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hydra::MergeFrom(const Hydra& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_right()) {
      mutable_right()->::Indriya::Core::Msgs::Hydra_Paddle::MergeFrom(from.right());
    }
    if (from.has_left()) {
      mutable_left()->::Indriya::Core::Msgs::Hydra_Paddle::MergeFrom(from.left());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Hydra::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hydra::CopyFrom(const Hydra& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hydra::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_right()) {
    if (!this->right_->IsInitialized()) return false;
  }
  if (has_left()) {
    if (!this->left_->IsInitialized()) return false;
  }
  return true;
}

void Hydra::Swap(Hydra* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Hydra::InternalSwap(Hydra* other) {
  std::swap(right_, other->right_);
  std::swap(left_, other->left_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Hydra::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hydra_descriptor_;
  metadata.reflection = Hydra_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Hydra_Paddle

// required .Indriya.Core.Msgs.Pose pose = 1;
 bool Hydra_Paddle::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Hydra_Paddle::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
 void Hydra_Paddle::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Hydra_Paddle::clear_pose() {
  if (pose_ != NULL) pose_->::Indriya::Core::Msgs::Pose::Clear();
  clear_has_pose();
}
 const ::Indriya::Core::Msgs::Pose& Hydra_Paddle::pose() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.Paddle.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
 ::Indriya::Core::Msgs::Pose* Hydra_Paddle::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::Indriya::Core::Msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Hydra.Paddle.pose)
  return pose_;
}
 ::Indriya::Core::Msgs::Pose* Hydra_Paddle::release_pose() {
  clear_has_pose();
  ::Indriya::Core::Msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
 void Hydra_Paddle::set_allocated_pose(::Indriya::Core::Msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Hydra.Paddle.pose)
}

// required bool button_bumper = 2;
 bool Hydra_Paddle::has_button_bumper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Hydra_Paddle::set_has_button_bumper() {
  _has_bits_[0] |= 0x00000002u;
}
 void Hydra_Paddle::clear_has_button_bumper() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Hydra_Paddle::clear_button_bumper() {
  button_bumper_ = false;
  clear_has_button_bumper();
}
 bool Hydra_Paddle::button_bumper() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.Paddle.button_bumper)
  return button_bumper_;
}
 void Hydra_Paddle::set_button_bumper(bool value) {
  set_has_button_bumper();
  button_bumper_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Hydra.Paddle.button_bumper)
}

// required bool button_1 = 3;
 bool Hydra_Paddle::has_button_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Hydra_Paddle::set_has_button_1() {
  _has_bits_[0] |= 0x00000004u;
}
 void Hydra_Paddle::clear_has_button_1() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Hydra_Paddle::clear_button_1() {
  button_1_ = false;
  clear_has_button_1();
}
 bool Hydra_Paddle::button_1() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.Paddle.button_1)
  return button_1_;
}
 void Hydra_Paddle::set_button_1(bool value) {
  set_has_button_1();
  button_1_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Hydra.Paddle.button_1)
}

// required bool button_2 = 4;
 bool Hydra_Paddle::has_button_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Hydra_Paddle::set_has_button_2() {
  _has_bits_[0] |= 0x00000008u;
}
 void Hydra_Paddle::clear_has_button_2() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Hydra_Paddle::clear_button_2() {
  button_2_ = false;
  clear_has_button_2();
}
 bool Hydra_Paddle::button_2() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.Paddle.button_2)
  return button_2_;
}
 void Hydra_Paddle::set_button_2(bool value) {
  set_has_button_2();
  button_2_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Hydra.Paddle.button_2)
}

// required bool button_3 = 5;
 bool Hydra_Paddle::has_button_3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Hydra_Paddle::set_has_button_3() {
  _has_bits_[0] |= 0x00000010u;
}
 void Hydra_Paddle::clear_has_button_3() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Hydra_Paddle::clear_button_3() {
  button_3_ = false;
  clear_has_button_3();
}
 bool Hydra_Paddle::button_3() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.Paddle.button_3)
  return button_3_;
}
 void Hydra_Paddle::set_button_3(bool value) {
  set_has_button_3();
  button_3_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Hydra.Paddle.button_3)
}

// required bool button_4 = 6;
 bool Hydra_Paddle::has_button_4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Hydra_Paddle::set_has_button_4() {
  _has_bits_[0] |= 0x00000020u;
}
 void Hydra_Paddle::clear_has_button_4() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Hydra_Paddle::clear_button_4() {
  button_4_ = false;
  clear_has_button_4();
}
 bool Hydra_Paddle::button_4() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.Paddle.button_4)
  return button_4_;
}
 void Hydra_Paddle::set_button_4(bool value) {
  set_has_button_4();
  button_4_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Hydra.Paddle.button_4)
}

// required bool button_joy = 7;
 bool Hydra_Paddle::has_button_joy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Hydra_Paddle::set_has_button_joy() {
  _has_bits_[0] |= 0x00000040u;
}
 void Hydra_Paddle::clear_has_button_joy() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Hydra_Paddle::clear_button_joy() {
  button_joy_ = false;
  clear_has_button_joy();
}
 bool Hydra_Paddle::button_joy() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.Paddle.button_joy)
  return button_joy_;
}
 void Hydra_Paddle::set_button_joy(bool value) {
  set_has_button_joy();
  button_joy_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Hydra.Paddle.button_joy)
}

// required bool button_center = 8;
 bool Hydra_Paddle::has_button_center() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Hydra_Paddle::set_has_button_center() {
  _has_bits_[0] |= 0x00000080u;
}
 void Hydra_Paddle::clear_has_button_center() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Hydra_Paddle::clear_button_center() {
  button_center_ = false;
  clear_has_button_center();
}
 bool Hydra_Paddle::button_center() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.Paddle.button_center)
  return button_center_;
}
 void Hydra_Paddle::set_button_center(bool value) {
  set_has_button_center();
  button_center_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Hydra.Paddle.button_center)
}

// required double joy_x = 9;
 bool Hydra_Paddle::has_joy_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Hydra_Paddle::set_has_joy_x() {
  _has_bits_[0] |= 0x00000100u;
}
 void Hydra_Paddle::clear_has_joy_x() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Hydra_Paddle::clear_joy_x() {
  joy_x_ = 0;
  clear_has_joy_x();
}
 double Hydra_Paddle::joy_x() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.Paddle.joy_x)
  return joy_x_;
}
 void Hydra_Paddle::set_joy_x(double value) {
  set_has_joy_x();
  joy_x_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Hydra.Paddle.joy_x)
}

// required double joy_y = 10;
 bool Hydra_Paddle::has_joy_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void Hydra_Paddle::set_has_joy_y() {
  _has_bits_[0] |= 0x00000200u;
}
 void Hydra_Paddle::clear_has_joy_y() {
  _has_bits_[0] &= ~0x00000200u;
}
 void Hydra_Paddle::clear_joy_y() {
  joy_y_ = 0;
  clear_has_joy_y();
}
 double Hydra_Paddle::joy_y() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.Paddle.joy_y)
  return joy_y_;
}
 void Hydra_Paddle::set_joy_y(double value) {
  set_has_joy_y();
  joy_y_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Hydra.Paddle.joy_y)
}

// required double trigger = 11;
 bool Hydra_Paddle::has_trigger() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void Hydra_Paddle::set_has_trigger() {
  _has_bits_[0] |= 0x00000400u;
}
 void Hydra_Paddle::clear_has_trigger() {
  _has_bits_[0] &= ~0x00000400u;
}
 void Hydra_Paddle::clear_trigger() {
  trigger_ = 0;
  clear_has_trigger();
}
 double Hydra_Paddle::trigger() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.Paddle.trigger)
  return trigger_;
}
 void Hydra_Paddle::set_trigger(double value) {
  set_has_trigger();
  trigger_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Hydra.Paddle.trigger)
}

// -------------------------------------------------------------------

// Hydra

// required .Indriya.Core.Msgs.Hydra.Paddle right = 1;
 bool Hydra::has_right() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Hydra::set_has_right() {
  _has_bits_[0] |= 0x00000001u;
}
 void Hydra::clear_has_right() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Hydra::clear_right() {
  if (right_ != NULL) right_->::Indriya::Core::Msgs::Hydra_Paddle::Clear();
  clear_has_right();
}
 const ::Indriya::Core::Msgs::Hydra_Paddle& Hydra::right() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.right)
  return right_ != NULL ? *right_ : *default_instance_->right_;
}
 ::Indriya::Core::Msgs::Hydra_Paddle* Hydra::mutable_right() {
  set_has_right();
  if (right_ == NULL) {
    right_ = new ::Indriya::Core::Msgs::Hydra_Paddle;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Hydra.right)
  return right_;
}
 ::Indriya::Core::Msgs::Hydra_Paddle* Hydra::release_right() {
  clear_has_right();
  ::Indriya::Core::Msgs::Hydra_Paddle* temp = right_;
  right_ = NULL;
  return temp;
}
 void Hydra::set_allocated_right(::Indriya::Core::Msgs::Hydra_Paddle* right) {
  delete right_;
  right_ = right;
  if (right) {
    set_has_right();
  } else {
    clear_has_right();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Hydra.right)
}

// required .Indriya.Core.Msgs.Hydra.Paddle left = 2;
 bool Hydra::has_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Hydra::set_has_left() {
  _has_bits_[0] |= 0x00000002u;
}
 void Hydra::clear_has_left() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Hydra::clear_left() {
  if (left_ != NULL) left_->::Indriya::Core::Msgs::Hydra_Paddle::Clear();
  clear_has_left();
}
 const ::Indriya::Core::Msgs::Hydra_Paddle& Hydra::left() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Hydra.left)
  return left_ != NULL ? *left_ : *default_instance_->left_;
}
 ::Indriya::Core::Msgs::Hydra_Paddle* Hydra::mutable_left() {
  set_has_left();
  if (left_ == NULL) {
    left_ = new ::Indriya::Core::Msgs::Hydra_Paddle;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Hydra.left)
  return left_;
}
 ::Indriya::Core::Msgs::Hydra_Paddle* Hydra::release_left() {
  clear_has_left();
  ::Indriya::Core::Msgs::Hydra_Paddle* temp = left_;
  left_ = NULL;
  return temp;
}
 void Hydra::set_allocated_left(::Indriya::Core::Msgs::Hydra_Paddle* left) {
  delete left_;
  left_ = left;
  if (left) {
    set_has_left();
  } else {
    clear_has_left();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Hydra.left)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.Hydra", Hydra)
// @@protoc_insertion_point(global_scope)
