// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sonar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sonar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* Sonar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sonar_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sonar_2eproto() {
  protobuf_AddDesc_sonar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sonar.proto");
  GOOGLE_CHECK(file != NULL);
  Sonar_descriptor_ = file->message_type(0);
  static const int Sonar_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, world_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, range_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, range_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, contact_),
  };
  Sonar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Sonar_descriptor_,
      Sonar::default_instance_,
      Sonar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, _has_bits_[0]),
      -1,
      -1,
      sizeof(Sonar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sonar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Sonar_descriptor_, &Sonar::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sonar_2eproto() {
  delete Sonar::default_instance_;
  delete Sonar_reflection_;
}

void protobuf_AddDesc_sonar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Indriya::Core::Msgs::protobuf_AddDesc_pose_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013sonar.proto\022\021Indriya.Core.Msgs\032\npose.p"
    "roto\032\016vector3d.proto\"\266\001\n\005Sonar\022\r\n\005frame\030"
    "\001 \002(\t\022+\n\nworld_pose\030\002 \002(\0132\027.Indriya.Core"
    ".Msgs.Pose\022\021\n\trange_min\030\003 \002(\001\022\021\n\trange_m"
    "ax\030\004 \002(\001\022\016\n\006radius\030\005 \002(\001\022\r\n\005range\030\006 \002(\001\022"
    ",\n\007contact\030\007 \001(\0132\033.Indriya.Core.Msgs.Vec"
    "tor3d", 245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sonar.proto", &protobuf_RegisterTypes);
  Sonar::default_instance_ = new Sonar();
  Sonar::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sonar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sonar_2eproto {
  StaticDescriptorInitializer_sonar_2eproto() {
    protobuf_AddDesc_sonar_2eproto();
  }
} static_descriptor_initializer_sonar_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Sonar::kFrameFieldNumber;
const int Sonar::kWorldPoseFieldNumber;
const int Sonar::kRangeMinFieldNumber;
const int Sonar::kRangeMaxFieldNumber;
const int Sonar::kRadiusFieldNumber;
const int Sonar::kRangeFieldNumber;
const int Sonar::kContactFieldNumber;
#endif  // !_MSC_VER

Sonar::Sonar()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.Sonar)
}

void Sonar::InitAsDefaultInstance() {
  world_pose_ = const_cast< ::Indriya::Core::Msgs::Pose*>(&::Indriya::Core::Msgs::Pose::default_instance());
  contact_ = const_cast< ::Indriya::Core::Msgs::Vector3d*>(&::Indriya::Core::Msgs::Vector3d::default_instance());
}

Sonar::Sonar(const Sonar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.Sonar)
}

void Sonar::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_pose_ = NULL;
  range_min_ = 0;
  range_max_ = 0;
  radius_ = 0;
  range_ = 0;
  contact_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sonar::~Sonar() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.Sonar)
  SharedDtor();
}

void Sonar::SharedDtor() {
  frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete world_pose_;
    delete contact_;
  }
}

void Sonar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sonar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sonar_descriptor_;
}

const Sonar& Sonar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sonar_2eproto();
  return *default_instance_;
}

Sonar* Sonar::default_instance_ = NULL;

Sonar* Sonar::New(::google::protobuf::Arena* arena) const {
  Sonar* n = new Sonar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sonar::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Sonar*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(range_min_, range_);
    if (has_frame()) {
      frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_world_pose()) {
      if (world_pose_ != NULL) world_pose_->::Indriya::Core::Msgs::Pose::Clear();
    }
    if (has_contact()) {
      if (contact_ != NULL) contact_->::Indriya::Core::Msgs::Vector3d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Sonar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.Sonar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string frame = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame().data(), this->frame().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Indriya.Core.Msgs.Sonar.frame");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_world_pose;
        break;
      }

      // required .Indriya.Core.Msgs.Pose world_pose = 2;
      case 2: {
        if (tag == 18) {
         parse_world_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_range_min;
        break;
      }

      // required double range_min = 3;
      case 3: {
        if (tag == 25) {
         parse_range_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_min_)));
          set_has_range_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_range_max;
        break;
      }

      // required double range_max = 4;
      case 4: {
        if (tag == 33) {
         parse_range_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_max_)));
          set_has_range_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_radius;
        break;
      }

      // required double radius = 5;
      case 5: {
        if (tag == 41) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_range;
        break;
      }

      // required double range = 6;
      case 6: {
        if (tag == 49) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_contact;
        break;
      }

      // optional .Indriya.Core.Msgs.Vector3d contact = 7;
      case 7: {
        if (tag == 58) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contact()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.Sonar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.Sonar)
  return false;
#undef DO_
}

void Sonar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.Sonar)
  // required string frame = 1;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame().data(), this->frame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Sonar.frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->frame(), output);
  }

  // required .Indriya.Core.Msgs.Pose world_pose = 2;
  if (has_world_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->world_pose_, output);
  }

  // required double range_min = 3;
  if (has_range_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->range_min(), output);
  }

  // required double range_max = 4;
  if (has_range_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->range_max(), output);
  }

  // required double radius = 5;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->radius(), output);
  }

  // required double range = 6;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->range(), output);
  }

  // optional .Indriya.Core.Msgs.Vector3d contact = 7;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->contact_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.Sonar)
}

::google::protobuf::uint8* Sonar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.Sonar)
  // required string frame = 1;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame().data(), this->frame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Sonar.frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->frame(), target);
  }

  // required .Indriya.Core.Msgs.Pose world_pose = 2;
  if (has_world_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->world_pose_, target);
  }

  // required double range_min = 3;
  if (has_range_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->range_min(), target);
  }

  // required double range_max = 4;
  if (has_range_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->range_max(), target);
  }

  // required double radius = 5;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->radius(), target);
  }

  // required double range = 6;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->range(), target);
  }

  // optional .Indriya.Core.Msgs.Vector3d contact = 7;
  if (has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->contact_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.Sonar)
  return target;
}

int Sonar::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_frame()) {
    // required string frame = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame());
  }

  if (has_world_pose()) {
    // required .Indriya.Core.Msgs.Pose world_pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->world_pose_);
  }

  if (has_range_min()) {
    // required double range_min = 3;
    total_size += 1 + 8;
  }

  if (has_range_max()) {
    // required double range_max = 4;
    total_size += 1 + 8;
  }

  if (has_radius()) {
    // required double radius = 5;
    total_size += 1 + 8;
  }

  if (has_range()) {
    // required double range = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
int Sonar::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string frame = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame());

    // required .Indriya.Core.Msgs.Pose world_pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->world_pose_);

    // required double range_min = 3;
    total_size += 1 + 8;

    // required double range_max = 4;
    total_size += 1 + 8;

    // required double radius = 5;
    total_size += 1 + 8;

    // required double range = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .Indriya.Core.Msgs.Vector3d contact = 7;
  if (has_contact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->contact_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sonar::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Sonar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sonar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sonar::MergeFrom(const Sonar& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame()) {
      set_has_frame();
      frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_);
    }
    if (from.has_world_pose()) {
      mutable_world_pose()->::Indriya::Core::Msgs::Pose::MergeFrom(from.world_pose());
    }
    if (from.has_range_min()) {
      set_range_min(from.range_min());
    }
    if (from.has_range_max()) {
      set_range_max(from.range_max());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_contact()) {
      mutable_contact()->::Indriya::Core::Msgs::Vector3d::MergeFrom(from.contact());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Sonar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sonar::CopyFrom(const Sonar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sonar::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_world_pose()) {
    if (!this->world_pose_->IsInitialized()) return false;
  }
  if (has_contact()) {
    if (!this->contact_->IsInitialized()) return false;
  }
  return true;
}

void Sonar::Swap(Sonar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sonar::InternalSwap(Sonar* other) {
  frame_.Swap(&other->frame_);
  std::swap(world_pose_, other->world_pose_);
  std::swap(range_min_, other->range_min_);
  std::swap(range_max_, other->range_max_);
  std::swap(radius_, other->radius_);
  std::swap(range_, other->range_);
  std::swap(contact_, other->contact_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sonar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sonar_descriptor_;
  metadata.reflection = Sonar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sonar

// required string frame = 1;
 bool Sonar::has_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Sonar::set_has_frame() {
  _has_bits_[0] |= 0x00000001u;
}
 void Sonar::clear_has_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Sonar::clear_frame() {
  frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame();
}
 const ::std::string& Sonar::frame() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Sonar.frame)
  return frame_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Sonar::set_frame(const ::std::string& value) {
  set_has_frame();
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Sonar.frame)
}
 void Sonar::set_frame(const char* value) {
  set_has_frame();
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.Sonar.frame)
}
 void Sonar::set_frame(const char* value, size_t size) {
  set_has_frame();
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.Sonar.frame)
}
 ::std::string* Sonar::mutable_frame() {
  set_has_frame();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Sonar.frame)
  return frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Sonar::release_frame() {
  clear_has_frame();
  return frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Sonar::set_allocated_frame(::std::string* frame) {
  if (frame != NULL) {
    set_has_frame();
  } else {
    clear_has_frame();
  }
  frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Sonar.frame)
}

// required .Indriya.Core.Msgs.Pose world_pose = 2;
 bool Sonar::has_world_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Sonar::set_has_world_pose() {
  _has_bits_[0] |= 0x00000002u;
}
 void Sonar::clear_has_world_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Sonar::clear_world_pose() {
  if (world_pose_ != NULL) world_pose_->::Indriya::Core::Msgs::Pose::Clear();
  clear_has_world_pose();
}
 const ::Indriya::Core::Msgs::Pose& Sonar::world_pose() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Sonar.world_pose)
  return world_pose_ != NULL ? *world_pose_ : *default_instance_->world_pose_;
}
 ::Indriya::Core::Msgs::Pose* Sonar::mutable_world_pose() {
  set_has_world_pose();
  if (world_pose_ == NULL) {
    world_pose_ = new ::Indriya::Core::Msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Sonar.world_pose)
  return world_pose_;
}
 ::Indriya::Core::Msgs::Pose* Sonar::release_world_pose() {
  clear_has_world_pose();
  ::Indriya::Core::Msgs::Pose* temp = world_pose_;
  world_pose_ = NULL;
  return temp;
}
 void Sonar::set_allocated_world_pose(::Indriya::Core::Msgs::Pose* world_pose) {
  delete world_pose_;
  world_pose_ = world_pose;
  if (world_pose) {
    set_has_world_pose();
  } else {
    clear_has_world_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Sonar.world_pose)
}

// required double range_min = 3;
 bool Sonar::has_range_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Sonar::set_has_range_min() {
  _has_bits_[0] |= 0x00000004u;
}
 void Sonar::clear_has_range_min() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Sonar::clear_range_min() {
  range_min_ = 0;
  clear_has_range_min();
}
 double Sonar::range_min() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Sonar.range_min)
  return range_min_;
}
 void Sonar::set_range_min(double value) {
  set_has_range_min();
  range_min_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Sonar.range_min)
}

// required double range_max = 4;
 bool Sonar::has_range_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Sonar::set_has_range_max() {
  _has_bits_[0] |= 0x00000008u;
}
 void Sonar::clear_has_range_max() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Sonar::clear_range_max() {
  range_max_ = 0;
  clear_has_range_max();
}
 double Sonar::range_max() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Sonar.range_max)
  return range_max_;
}
 void Sonar::set_range_max(double value) {
  set_has_range_max();
  range_max_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Sonar.range_max)
}

// required double radius = 5;
 bool Sonar::has_radius() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Sonar::set_has_radius() {
  _has_bits_[0] |= 0x00000010u;
}
 void Sonar::clear_has_radius() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Sonar::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
 double Sonar::radius() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Sonar.radius)
  return radius_;
}
 void Sonar::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Sonar.radius)
}

// required double range = 6;
 bool Sonar::has_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Sonar::set_has_range() {
  _has_bits_[0] |= 0x00000020u;
}
 void Sonar::clear_has_range() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Sonar::clear_range() {
  range_ = 0;
  clear_has_range();
}
 double Sonar::range() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Sonar.range)
  return range_;
}
 void Sonar::set_range(double value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Sonar.range)
}

// optional .Indriya.Core.Msgs.Vector3d contact = 7;
 bool Sonar::has_contact() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Sonar::set_has_contact() {
  _has_bits_[0] |= 0x00000040u;
}
 void Sonar::clear_has_contact() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Sonar::clear_contact() {
  if (contact_ != NULL) contact_->::Indriya::Core::Msgs::Vector3d::Clear();
  clear_has_contact();
}
 const ::Indriya::Core::Msgs::Vector3d& Sonar::contact() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Sonar.contact)
  return contact_ != NULL ? *contact_ : *default_instance_->contact_;
}
 ::Indriya::Core::Msgs::Vector3d* Sonar::mutable_contact() {
  set_has_contact();
  if (contact_ == NULL) {
    contact_ = new ::Indriya::Core::Msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Sonar.contact)
  return contact_;
}
 ::Indriya::Core::Msgs::Vector3d* Sonar::release_contact() {
  clear_has_contact();
  ::Indriya::Core::Msgs::Vector3d* temp = contact_;
  contact_ = NULL;
  return temp;
}
 void Sonar::set_allocated_contact(::Indriya::Core::Msgs::Vector3d* contact) {
  delete contact_;
  contact_ = contact;
  if (contact) {
    set_has_contact();
  } else {
    clear_has_contact();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Sonar.contact)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.Sonar", Sonar)
// @@protoc_insertion_point(global_scope)
