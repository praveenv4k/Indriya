// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: color.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "color.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_color_2eproto() {
  protobuf_AddDesc_color_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "color.proto");
  GOOGLE_CHECK(file != NULL);
  Color_descriptor_ = file->message_type(0);
  static const int Color_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, a_),
  };
  Color_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Color_descriptor_,
      Color::default_instance_,
      Color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _has_bits_[0]),
      -1,
      -1,
      sizeof(Color),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_color_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Color_descriptor_, &Color::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_color_2eproto() {
  delete Color::default_instance_;
  delete Color_reflection_;
}

void protobuf_AddDesc_color_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013color.proto\022\021Indriya.Core.Msgs\"6\n\005Colo"
    "r\022\t\n\001r\030\002 \002(\002\022\t\n\001g\030\003 \002(\002\022\t\n\001b\030\004 \002(\002\022\014\n\001a\030"
    "\005 \001(\002:\0011", 88);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "color.proto", &protobuf_RegisterTypes);
  Color::default_instance_ = new Color();
  Color::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_color_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_color_2eproto {
  StaticDescriptorInitializer_color_2eproto() {
    protobuf_AddDesc_color_2eproto();
  }
} static_descriptor_initializer_color_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Color::kRFieldNumber;
const int Color::kGFieldNumber;
const int Color::kBFieldNumber;
const int Color::kAFieldNumber;
#endif  // !_MSC_VER

Color::Color()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.Color)
}

void Color::InitAsDefaultInstance() {
}

Color::Color(const Color& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.Color)
}

void Color::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  a_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}

const Color& Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_color_2eproto();
  return *default_instance_;
}

Color* Color::default_instance_ = NULL;

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Color*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(r_, b_);
    a_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float r = 2;
      case 2: {
        if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_g;
        break;
      }

      // required float g = 3;
      case 3: {
        if (tag == 29) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_b;
        break;
      }

      // required float b = 4;
      case 4: {
        if (tag == 37) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_a;
        break;
      }

      // optional float a = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.Color)
  // required float r = 2;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->r(), output);
  }

  // required float g = 3;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->g(), output);
  }

  // required float b = 4;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->b(), output);
  }

  // optional float a = 5 [default = 1];
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->a(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.Color)
}

::google::protobuf::uint8* Color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.Color)
  // required float r = 2;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->r(), target);
  }

  // required float g = 3;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->g(), target);
  }

  // required float b = 4;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->b(), target);
  }

  // optional float a = 5 [default = 1];
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->a(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.Color)
  return target;
}

int Color::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_r()) {
    // required float r = 2;
    total_size += 1 + 4;
  }

  if (has_g()) {
    // required float g = 3;
    total_size += 1 + 4;
  }

  if (has_b()) {
    // required float b = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int Color::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float r = 2;
    total_size += 1 + 4;

    // required float g = 3;
    total_size += 1 + 4;

    // required float b = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional float a = 5 [default = 1];
  if (has_a()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Color* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Color*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(a_, other->a_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color_descriptor_;
  metadata.reflection = Color_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// required float r = 2;
 bool Color::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Color::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
 void Color::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Color::clear_r() {
  r_ = 0;
  clear_has_r();
}
 float Color::r() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Color.r)
  return r_;
}
 void Color::set_r(float value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Color.r)
}

// required float g = 3;
 bool Color::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Color::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
 void Color::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Color::clear_g() {
  g_ = 0;
  clear_has_g();
}
 float Color::g() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Color.g)
  return g_;
}
 void Color::set_g(float value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Color.g)
}

// required float b = 4;
 bool Color::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Color::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
 void Color::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Color::clear_b() {
  b_ = 0;
  clear_has_b();
}
 float Color::b() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Color.b)
  return b_;
}
 void Color::set_b(float value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Color.b)
}

// optional float a = 5 [default = 1];
 bool Color::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Color::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
 void Color::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Color::clear_a() {
  a_ = 1;
  clear_has_a();
}
 float Color::a() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Color.a)
  return a_;
}
 void Color::set_a(float value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Color.a)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.Color", Color)
// @@protoc_insertion_point(global_scope)
