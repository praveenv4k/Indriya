// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* Friction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friction_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_friction_2eproto() {
  protobuf_AddDesc_friction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friction.proto");
  GOOGLE_CHECK(file != NULL);
  Friction_descriptor_ = file->message_type(0);
  static const int Friction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, mu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, mu2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, fdir1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, slip1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, slip2_),
  };
  Friction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Friction_descriptor_,
      Friction::default_instance_,
      Friction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, _has_bits_[0]),
      -1,
      -1,
      sizeof(Friction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Friction_descriptor_, &Friction::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friction_2eproto() {
  delete Friction::default_instance_;
  delete Friction_reflection_;
}

void protobuf_AddDesc_friction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Indriya::Core::Msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016friction.proto\022\021Indriya.Core.Msgs\032\016vec"
    "tor3d.proto\"m\n\010Friction\022\n\n\002mu\030\001 \001(\001\022\013\n\003m"
    "u2\030\002 \001(\001\022*\n\005fdir1\030\003 \001(\0132\033.Indriya.Core.M"
    "sgs.Vector3d\022\r\n\005slip1\030\004 \001(\001\022\r\n\005slip2\030\005 \001"
    "(\001", 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friction.proto", &protobuf_RegisterTypes);
  Friction::default_instance_ = new Friction();
  Friction::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friction_2eproto {
  StaticDescriptorInitializer_friction_2eproto() {
    protobuf_AddDesc_friction_2eproto();
  }
} static_descriptor_initializer_friction_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Friction::kMuFieldNumber;
const int Friction::kMu2FieldNumber;
const int Friction::kFdir1FieldNumber;
const int Friction::kSlip1FieldNumber;
const int Friction::kSlip2FieldNumber;
#endif  // !_MSC_VER

Friction::Friction()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.Friction)
}

void Friction::InitAsDefaultInstance() {
  fdir1_ = const_cast< ::Indriya::Core::Msgs::Vector3d*>(&::Indriya::Core::Msgs::Vector3d::default_instance());
}

Friction::Friction(const Friction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.Friction)
}

void Friction::SharedCtor() {
  _cached_size_ = 0;
  mu_ = 0;
  mu2_ = 0;
  fdir1_ = NULL;
  slip1_ = 0;
  slip2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friction::~Friction() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.Friction)
  SharedDtor();
}

void Friction::SharedDtor() {
  if (this != default_instance_) {
    delete fdir1_;
  }
}

void Friction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friction_descriptor_;
}

const Friction& Friction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friction_2eproto();
  return *default_instance_;
}

Friction* Friction::default_instance_ = NULL;

Friction* Friction::New(::google::protobuf::Arena* arena) const {
  Friction* n = new Friction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Friction::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Friction*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(mu_, mu2_);
    ZR_(slip1_, slip2_);
    if (has_fdir1()) {
      if (fdir1_ != NULL) fdir1_->::Indriya::Core::Msgs::Vector3d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Friction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.Friction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double mu = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mu_)));
          set_has_mu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_mu2;
        break;
      }

      // optional double mu2 = 2;
      case 2: {
        if (tag == 17) {
         parse_mu2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mu2_)));
          set_has_mu2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fdir1;
        break;
      }

      // optional .Indriya.Core.Msgs.Vector3d fdir1 = 3;
      case 3: {
        if (tag == 26) {
         parse_fdir1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fdir1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_slip1;
        break;
      }

      // optional double slip1 = 4;
      case 4: {
        if (tag == 33) {
         parse_slip1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slip1_)));
          set_has_slip1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_slip2;
        break;
      }

      // optional double slip2 = 5;
      case 5: {
        if (tag == 41) {
         parse_slip2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slip2_)));
          set_has_slip2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.Friction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.Friction)
  return false;
#undef DO_
}

void Friction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.Friction)
  // optional double mu = 1;
  if (has_mu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mu(), output);
  }

  // optional double mu2 = 2;
  if (has_mu2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mu2(), output);
  }

  // optional .Indriya.Core.Msgs.Vector3d fdir1 = 3;
  if (has_fdir1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fdir1_, output);
  }

  // optional double slip1 = 4;
  if (has_slip1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->slip1(), output);
  }

  // optional double slip2 = 5;
  if (has_slip2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->slip2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.Friction)
}

::google::protobuf::uint8* Friction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.Friction)
  // optional double mu = 1;
  if (has_mu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mu(), target);
  }

  // optional double mu2 = 2;
  if (has_mu2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->mu2(), target);
  }

  // optional .Indriya.Core.Msgs.Vector3d fdir1 = 3;
  if (has_fdir1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->fdir1_, target);
  }

  // optional double slip1 = 4;
  if (has_slip1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->slip1(), target);
  }

  // optional double slip2 = 5;
  if (has_slip2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->slip2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.Friction)
  return target;
}

int Friction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional double mu = 1;
    if (has_mu()) {
      total_size += 1 + 8;
    }

    // optional double mu2 = 2;
    if (has_mu2()) {
      total_size += 1 + 8;
    }

    // optional .Indriya.Core.Msgs.Vector3d fdir1 = 3;
    if (has_fdir1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fdir1_);
    }

    // optional double slip1 = 4;
    if (has_slip1()) {
      total_size += 1 + 8;
    }

    // optional double slip2 = 5;
    if (has_slip2()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Friction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friction::MergeFrom(const Friction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mu()) {
      set_mu(from.mu());
    }
    if (from.has_mu2()) {
      set_mu2(from.mu2());
    }
    if (from.has_fdir1()) {
      mutable_fdir1()->::Indriya::Core::Msgs::Vector3d::MergeFrom(from.fdir1());
    }
    if (from.has_slip1()) {
      set_slip1(from.slip1());
    }
    if (from.has_slip2()) {
      set_slip2(from.slip2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Friction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friction::CopyFrom(const Friction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friction::IsInitialized() const {

  if (has_fdir1()) {
    if (!this->fdir1_->IsInitialized()) return false;
  }
  return true;
}

void Friction::Swap(Friction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Friction::InternalSwap(Friction* other) {
  std::swap(mu_, other->mu_);
  std::swap(mu2_, other->mu2_);
  std::swap(fdir1_, other->fdir1_);
  std::swap(slip1_, other->slip1_);
  std::swap(slip2_, other->slip2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Friction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friction_descriptor_;
  metadata.reflection = Friction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Friction

// optional double mu = 1;
 bool Friction::has_mu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Friction::set_has_mu() {
  _has_bits_[0] |= 0x00000001u;
}
 void Friction::clear_has_mu() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Friction::clear_mu() {
  mu_ = 0;
  clear_has_mu();
}
 double Friction::mu() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Friction.mu)
  return mu_;
}
 void Friction::set_mu(double value) {
  set_has_mu();
  mu_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Friction.mu)
}

// optional double mu2 = 2;
 bool Friction::has_mu2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Friction::set_has_mu2() {
  _has_bits_[0] |= 0x00000002u;
}
 void Friction::clear_has_mu2() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Friction::clear_mu2() {
  mu2_ = 0;
  clear_has_mu2();
}
 double Friction::mu2() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Friction.mu2)
  return mu2_;
}
 void Friction::set_mu2(double value) {
  set_has_mu2();
  mu2_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Friction.mu2)
}

// optional .Indriya.Core.Msgs.Vector3d fdir1 = 3;
 bool Friction::has_fdir1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Friction::set_has_fdir1() {
  _has_bits_[0] |= 0x00000004u;
}
 void Friction::clear_has_fdir1() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Friction::clear_fdir1() {
  if (fdir1_ != NULL) fdir1_->::Indriya::Core::Msgs::Vector3d::Clear();
  clear_has_fdir1();
}
 const ::Indriya::Core::Msgs::Vector3d& Friction::fdir1() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Friction.fdir1)
  return fdir1_ != NULL ? *fdir1_ : *default_instance_->fdir1_;
}
 ::Indriya::Core::Msgs::Vector3d* Friction::mutable_fdir1() {
  set_has_fdir1();
  if (fdir1_ == NULL) {
    fdir1_ = new ::Indriya::Core::Msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Friction.fdir1)
  return fdir1_;
}
 ::Indriya::Core::Msgs::Vector3d* Friction::release_fdir1() {
  clear_has_fdir1();
  ::Indriya::Core::Msgs::Vector3d* temp = fdir1_;
  fdir1_ = NULL;
  return temp;
}
 void Friction::set_allocated_fdir1(::Indriya::Core::Msgs::Vector3d* fdir1) {
  delete fdir1_;
  fdir1_ = fdir1;
  if (fdir1) {
    set_has_fdir1();
  } else {
    clear_has_fdir1();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Friction.fdir1)
}

// optional double slip1 = 4;
 bool Friction::has_slip1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Friction::set_has_slip1() {
  _has_bits_[0] |= 0x00000008u;
}
 void Friction::clear_has_slip1() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Friction::clear_slip1() {
  slip1_ = 0;
  clear_has_slip1();
}
 double Friction::slip1() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Friction.slip1)
  return slip1_;
}
 void Friction::set_slip1(double value) {
  set_has_slip1();
  slip1_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Friction.slip1)
}

// optional double slip2 = 5;
 bool Friction::has_slip2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Friction::set_has_slip2() {
  _has_bits_[0] |= 0x00000010u;
}
 void Friction::clear_has_slip2() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Friction::clear_slip2() {
  slip2_ = 0;
  clear_has_slip2();
}
 double Friction::slip2() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Friction.slip2)
  return slip2_;
}
 void Friction::set_slip2(double value) {
  set_has_slip2();
  slip2_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Friction.slip2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.Friction", Friction)
// @@protoc_insertion_point(global_scope)
