// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collision.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "collision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* Collision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Collision_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_collision_2eproto() {
  protobuf_AddDesc_collision_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "collision.proto");
  GOOGLE_CHECK(file != NULL);
  Collision_descriptor_ = file->message_type(0);
  static const int Collision_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, laser_retro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, max_contacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, surface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, visual_),
  };
  Collision_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Collision_descriptor_,
      Collision::default_instance_,
      Collision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, _has_bits_[0]),
      -1,
      -1,
      sizeof(Collision),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_collision_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Collision_descriptor_, &Collision::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_collision_2eproto() {
  delete Collision::default_instance_;
  delete Collision_reflection_;
}

void protobuf_AddDesc_collision_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Indriya::Core::Msgs::protobuf_AddDesc_pose_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_geometry_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_surface_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_visual_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017collision.proto\022\021Indriya.Core.Msgs\032\npo"
    "se.proto\032\016geometry.proto\032\rsurface.proto\032"
    "\014visual.proto\"\376\001\n\tCollision\022\n\n\002id\030\001 \002(\r\022"
    "\014\n\004name\030\002 \002(\t\022\023\n\013laser_retro\030\003 \001(\001\022\024\n\014ma"
    "x_contacts\030\004 \001(\001\022%\n\004pose\030\005 \001(\0132\027.Indriya"
    ".Core.Msgs.Pose\022-\n\010geometry\030\006 \001(\0132\033.Indr"
    "iya.Core.Msgs.Geometry\022+\n\007surface\030\007 \001(\0132"
    "\032.Indriya.Core.Msgs.Surface\022)\n\006visual\030\010 "
    "\003(\0132\031.Indriya.Core.Msgs.Visual", 350);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "collision.proto", &protobuf_RegisterTypes);
  Collision::default_instance_ = new Collision();
  Collision::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_collision_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_collision_2eproto {
  StaticDescriptorInitializer_collision_2eproto() {
    protobuf_AddDesc_collision_2eproto();
  }
} static_descriptor_initializer_collision_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Collision::kIdFieldNumber;
const int Collision::kNameFieldNumber;
const int Collision::kLaserRetroFieldNumber;
const int Collision::kMaxContactsFieldNumber;
const int Collision::kPoseFieldNumber;
const int Collision::kGeometryFieldNumber;
const int Collision::kSurfaceFieldNumber;
const int Collision::kVisualFieldNumber;
#endif  // !_MSC_VER

Collision::Collision()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.Collision)
}

void Collision::InitAsDefaultInstance() {
  pose_ = const_cast< ::Indriya::Core::Msgs::Pose*>(&::Indriya::Core::Msgs::Pose::default_instance());
  geometry_ = const_cast< ::Indriya::Core::Msgs::Geometry*>(&::Indriya::Core::Msgs::Geometry::default_instance());
  surface_ = const_cast< ::Indriya::Core::Msgs::Surface*>(&::Indriya::Core::Msgs::Surface::default_instance());
}

Collision::Collision(const Collision& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.Collision)
}

void Collision::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  laser_retro_ = 0;
  max_contacts_ = 0;
  pose_ = NULL;
  geometry_ = NULL;
  surface_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Collision::~Collision() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.Collision)
  SharedDtor();
}

void Collision::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete pose_;
    delete geometry_;
    delete surface_;
  }
}

void Collision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Collision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Collision_descriptor_;
}

const Collision& Collision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collision_2eproto();
  return *default_instance_;
}

Collision* Collision::default_instance_ = NULL;

Collision* Collision::New(::google::protobuf::Arena* arena) const {
  Collision* n = new Collision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Collision::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Collision*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(laser_retro_, max_contacts_);
    id_ = 0u;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::Indriya::Core::Msgs::Pose::Clear();
    }
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::Indriya::Core::Msgs::Geometry::Clear();
    }
    if (has_surface()) {
      if (surface_ != NULL) surface_->::Indriya::Core::Msgs::Surface::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  visual_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Collision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.Collision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Indriya.Core.Msgs.Collision.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_laser_retro;
        break;
      }

      // optional double laser_retro = 3;
      case 3: {
        if (tag == 25) {
         parse_laser_retro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_retro_)));
          set_has_laser_retro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_max_contacts;
        break;
      }

      // optional double max_contacts = 4;
      case 4: {
        if (tag == 33) {
         parse_max_contacts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_contacts_)));
          set_has_max_contacts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pose;
        break;
      }

      // optional .Indriya.Core.Msgs.Pose pose = 5;
      case 5: {
        if (tag == 42) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_geometry;
        break;
      }

      // optional .Indriya.Core.Msgs.Geometry geometry = 6;
      case 6: {
        if (tag == 50) {
         parse_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_surface;
        break;
      }

      // optional .Indriya.Core.Msgs.Surface surface = 7;
      case 7: {
        if (tag == 58) {
         parse_surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_visual;
        break;
      }

      // repeated .Indriya.Core.Msgs.Visual visual = 8;
      case 8: {
        if (tag == 66) {
         parse_visual:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_visual()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_visual;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.Collision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.Collision)
  return false;
#undef DO_
}

void Collision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.Collision)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Collision.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional double laser_retro = 3;
  if (has_laser_retro()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->laser_retro(), output);
  }

  // optional double max_contacts = 4;
  if (has_max_contacts()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_contacts(), output);
  }

  // optional .Indriya.Core.Msgs.Pose pose = 5;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->pose_, output);
  }

  // optional .Indriya.Core.Msgs.Geometry geometry = 6;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->geometry_, output);
  }

  // optional .Indriya.Core.Msgs.Surface surface = 7;
  if (has_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->surface_, output);
  }

  // repeated .Indriya.Core.Msgs.Visual visual = 8;
  for (unsigned int i = 0, n = this->visual_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->visual(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.Collision)
}

::google::protobuf::uint8* Collision::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.Collision)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Collision.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional double laser_retro = 3;
  if (has_laser_retro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->laser_retro(), target);
  }

  // optional double max_contacts = 4;
  if (has_max_contacts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_contacts(), target);
  }

  // optional .Indriya.Core.Msgs.Pose pose = 5;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->pose_, target);
  }

  // optional .Indriya.Core.Msgs.Geometry geometry = 6;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->geometry_, target);
  }

  // optional .Indriya.Core.Msgs.Surface surface = 7;
  if (has_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->surface_, target);
  }

  // repeated .Indriya.Core.Msgs.Visual visual = 8;
  for (unsigned int i = 0, n = this->visual_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->visual(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.Collision)
  return target;
}

int Collision::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
int Collision::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 124) {
    // optional double laser_retro = 3;
    if (has_laser_retro()) {
      total_size += 1 + 8;
    }

    // optional double max_contacts = 4;
    if (has_max_contacts()) {
      total_size += 1 + 8;
    }

    // optional .Indriya.Core.Msgs.Pose pose = 5;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .Indriya.Core.Msgs.Geometry geometry = 6;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->geometry_);
    }

    // optional .Indriya.Core.Msgs.Surface surface = 7;
    if (has_surface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->surface_);
    }

  }
  // repeated .Indriya.Core.Msgs.Visual visual = 8;
  total_size += 1 * this->visual_size();
  for (int i = 0; i < this->visual_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visual(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Collision::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Collision* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Collision*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Collision::MergeFrom(const Collision& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  visual_.MergeFrom(from.visual_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_laser_retro()) {
      set_laser_retro(from.laser_retro());
    }
    if (from.has_max_contacts()) {
      set_max_contacts(from.max_contacts());
    }
    if (from.has_pose()) {
      mutable_pose()->::Indriya::Core::Msgs::Pose::MergeFrom(from.pose());
    }
    if (from.has_geometry()) {
      mutable_geometry()->::Indriya::Core::Msgs::Geometry::MergeFrom(from.geometry());
    }
    if (from.has_surface()) {
      mutable_surface()->::Indriya::Core::Msgs::Surface::MergeFrom(from.surface());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Collision::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collision::CopyFrom(const Collision& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collision::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry_->IsInitialized()) return false;
  }
  if (has_surface()) {
    if (!this->surface_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->visual())) return false;
  return true;
}

void Collision::Swap(Collision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Collision::InternalSwap(Collision* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(laser_retro_, other->laser_retro_);
  std::swap(max_contacts_, other->max_contacts_);
  std::swap(pose_, other->pose_);
  std::swap(geometry_, other->geometry_);
  std::swap(surface_, other->surface_);
  visual_.UnsafeArenaSwap(&other->visual_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Collision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Collision_descriptor_;
  metadata.reflection = Collision_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Collision

// required uint32 id = 1;
 bool Collision::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Collision::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void Collision::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Collision::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 Collision::id() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Collision.id)
  return id_;
}
 void Collision::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Collision.id)
}

// required string name = 2;
 bool Collision::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Collision::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
 void Collision::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Collision::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Collision::name() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Collision.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Collision::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Collision.name)
}
 void Collision::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.Collision.name)
}
 void Collision::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.Collision.name)
}
 ::std::string* Collision::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Collision.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Collision::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Collision::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Collision.name)
}

// optional double laser_retro = 3;
 bool Collision::has_laser_retro() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Collision::set_has_laser_retro() {
  _has_bits_[0] |= 0x00000004u;
}
 void Collision::clear_has_laser_retro() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Collision::clear_laser_retro() {
  laser_retro_ = 0;
  clear_has_laser_retro();
}
 double Collision::laser_retro() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Collision.laser_retro)
  return laser_retro_;
}
 void Collision::set_laser_retro(double value) {
  set_has_laser_retro();
  laser_retro_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Collision.laser_retro)
}

// optional double max_contacts = 4;
 bool Collision::has_max_contacts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Collision::set_has_max_contacts() {
  _has_bits_[0] |= 0x00000008u;
}
 void Collision::clear_has_max_contacts() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Collision::clear_max_contacts() {
  max_contacts_ = 0;
  clear_has_max_contacts();
}
 double Collision::max_contacts() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Collision.max_contacts)
  return max_contacts_;
}
 void Collision::set_max_contacts(double value) {
  set_has_max_contacts();
  max_contacts_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Collision.max_contacts)
}

// optional .Indriya.Core.Msgs.Pose pose = 5;
 bool Collision::has_pose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Collision::set_has_pose() {
  _has_bits_[0] |= 0x00000010u;
}
 void Collision::clear_has_pose() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Collision::clear_pose() {
  if (pose_ != NULL) pose_->::Indriya::Core::Msgs::Pose::Clear();
  clear_has_pose();
}
 const ::Indriya::Core::Msgs::Pose& Collision::pose() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Collision.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
 ::Indriya::Core::Msgs::Pose* Collision::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::Indriya::Core::Msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Collision.pose)
  return pose_;
}
 ::Indriya::Core::Msgs::Pose* Collision::release_pose() {
  clear_has_pose();
  ::Indriya::Core::Msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
 void Collision::set_allocated_pose(::Indriya::Core::Msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Collision.pose)
}

// optional .Indriya.Core.Msgs.Geometry geometry = 6;
 bool Collision::has_geometry() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Collision::set_has_geometry() {
  _has_bits_[0] |= 0x00000020u;
}
 void Collision::clear_has_geometry() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Collision::clear_geometry() {
  if (geometry_ != NULL) geometry_->::Indriya::Core::Msgs::Geometry::Clear();
  clear_has_geometry();
}
 const ::Indriya::Core::Msgs::Geometry& Collision::geometry() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Collision.geometry)
  return geometry_ != NULL ? *geometry_ : *default_instance_->geometry_;
}
 ::Indriya::Core::Msgs::Geometry* Collision::mutable_geometry() {
  set_has_geometry();
  if (geometry_ == NULL) {
    geometry_ = new ::Indriya::Core::Msgs::Geometry;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Collision.geometry)
  return geometry_;
}
 ::Indriya::Core::Msgs::Geometry* Collision::release_geometry() {
  clear_has_geometry();
  ::Indriya::Core::Msgs::Geometry* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
 void Collision::set_allocated_geometry(::Indriya::Core::Msgs::Geometry* geometry) {
  delete geometry_;
  geometry_ = geometry;
  if (geometry) {
    set_has_geometry();
  } else {
    clear_has_geometry();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Collision.geometry)
}

// optional .Indriya.Core.Msgs.Surface surface = 7;
 bool Collision::has_surface() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Collision::set_has_surface() {
  _has_bits_[0] |= 0x00000040u;
}
 void Collision::clear_has_surface() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Collision::clear_surface() {
  if (surface_ != NULL) surface_->::Indriya::Core::Msgs::Surface::Clear();
  clear_has_surface();
}
 const ::Indriya::Core::Msgs::Surface& Collision::surface() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Collision.surface)
  return surface_ != NULL ? *surface_ : *default_instance_->surface_;
}
 ::Indriya::Core::Msgs::Surface* Collision::mutable_surface() {
  set_has_surface();
  if (surface_ == NULL) {
    surface_ = new ::Indriya::Core::Msgs::Surface;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Collision.surface)
  return surface_;
}
 ::Indriya::Core::Msgs::Surface* Collision::release_surface() {
  clear_has_surface();
  ::Indriya::Core::Msgs::Surface* temp = surface_;
  surface_ = NULL;
  return temp;
}
 void Collision::set_allocated_surface(::Indriya::Core::Msgs::Surface* surface) {
  delete surface_;
  surface_ = surface;
  if (surface) {
    set_has_surface();
  } else {
    clear_has_surface();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Collision.surface)
}

// repeated .Indriya.Core.Msgs.Visual visual = 8;
 int Collision::visual_size() const {
  return visual_.size();
}
 void Collision::clear_visual() {
  visual_.Clear();
}
 const ::Indriya::Core::Msgs::Visual& Collision::visual(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Collision.visual)
  return visual_.Get(index);
}
 ::Indriya::Core::Msgs::Visual* Collision::mutable_visual(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Collision.visual)
  return visual_.Mutable(index);
}
 ::Indriya::Core::Msgs::Visual* Collision::add_visual() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Collision.visual)
  return visual_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Visual >&
Collision::visual() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Collision.visual)
  return visual_;
}
 ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Visual >*
Collision::mutable_visual() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Collision.visual)
  return &visual_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.Collision", Collision)
// @@protoc_insertion_point(global_scope)
