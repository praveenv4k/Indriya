// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: link.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "link.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Link_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_link_2eproto() {
  protobuf_AddDesc_link_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "link.proto");
  GOOGLE_CHECK(file != NULL);
  Link_descriptor_ = file->message_type(0);
  static const int Link_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, self_collide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, gravity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, kinematic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, inertial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, visual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, collision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, projector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, canonical_),
  };
  Link_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Link_descriptor_,
      Link::default_instance_,
      Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _has_bits_[0]),
      -1,
      -1,
      sizeof(Link),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_link_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Link_descriptor_, &Link::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_link_2eproto() {
  delete Link::default_instance_;
  delete Link_reflection_;
}

void protobuf_AddDesc_link_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Indriya::Core::Msgs::protobuf_AddDesc_inertial_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_collision_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_visual_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_sensor_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_projector_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nlink.proto\022\021Indriya.Core.Msgs\032\016inertia"
    "l.proto\032\017collision.proto\032\014visual.proto\032\014"
    "sensor.proto\032\017projector.proto\032\npose.prot"
    "o\"\214\003\n\004Link\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \002(\t\022\024\n\014"
    "self_collide\030\003 \001(\010\022\017\n\007gravity\030\004 \001(\010\022\021\n\tk"
    "inematic\030\005 \001(\010\022\017\n\007enabled\030\006 \001(\010\022-\n\010inert"
    "ial\030\007 \001(\0132\033.Indriya.Core.Msgs.Inertial\022%"
    "\n\004pose\030\010 \001(\0132\027.Indriya.Core.Msgs.Pose\022)\n"
    "\006visual\030\t \003(\0132\031.Indriya.Core.Msgs.Visual"
    "\022/\n\tcollision\030\n \003(\0132\034.Indriya.Core.Msgs."
    "Collision\022)\n\006sensor\030\013 \003(\0132\031.Indriya.Core"
    ".Msgs.Sensor\022/\n\tprojector\030\014 \003(\0132\034.Indriy"
    "a.Core.Msgs.Projector\022\021\n\tcanonical\030\r \001(\010", 520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "link.proto", &protobuf_RegisterTypes);
  Link::default_instance_ = new Link();
  Link::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_link_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_link_2eproto {
  StaticDescriptorInitializer_link_2eproto() {
    protobuf_AddDesc_link_2eproto();
  }
} static_descriptor_initializer_link_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Link::kIdFieldNumber;
const int Link::kNameFieldNumber;
const int Link::kSelfCollideFieldNumber;
const int Link::kGravityFieldNumber;
const int Link::kKinematicFieldNumber;
const int Link::kEnabledFieldNumber;
const int Link::kInertialFieldNumber;
const int Link::kPoseFieldNumber;
const int Link::kVisualFieldNumber;
const int Link::kCollisionFieldNumber;
const int Link::kSensorFieldNumber;
const int Link::kProjectorFieldNumber;
const int Link::kCanonicalFieldNumber;
#endif  // !_MSC_VER

Link::Link()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.Link)
}

void Link::InitAsDefaultInstance() {
  inertial_ = const_cast< ::Indriya::Core::Msgs::Inertial*>(&::Indriya::Core::Msgs::Inertial::default_instance());
  pose_ = const_cast< ::Indriya::Core::Msgs::Pose*>(&::Indriya::Core::Msgs::Pose::default_instance());
}

Link::Link(const Link& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.Link)
}

void Link::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_collide_ = false;
  gravity_ = false;
  kinematic_ = false;
  enabled_ = false;
  inertial_ = NULL;
  pose_ = NULL;
  canonical_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete inertial_;
    delete pose_;
  }
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Link_descriptor_;
}

const Link& Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_link_2eproto();
  return *default_instance_;
}

Link* Link::default_instance_ = NULL;

Link* Link::New(::google::protobuf::Arena* arena) const {
  Link* n = new Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Link::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Link*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, enabled_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_inertial()) {
      if (inertial_ != NULL) inertial_->::Indriya::Core::Msgs::Inertial::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::Indriya::Core::Msgs::Pose::Clear();
    }
  }
  canonical_ = false;

#undef ZR_HELPER_
#undef ZR_

  visual_.Clear();
  collision_.Clear();
  sensor_.Clear();
  projector_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Indriya.Core.Msgs.Link.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_self_collide;
        break;
      }

      // optional bool self_collide = 3;
      case 3: {
        if (tag == 24) {
         parse_self_collide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_collide_)));
          set_has_self_collide();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gravity;
        break;
      }

      // optional bool gravity = 4;
      case 4: {
        if (tag == 32) {
         parse_gravity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gravity_)));
          set_has_gravity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_kinematic;
        break;
      }

      // optional bool kinematic = 5;
      case 5: {
        if (tag == 40) {
         parse_kinematic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kinematic_)));
          set_has_kinematic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 6;
      case 6: {
        if (tag == 48) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_inertial;
        break;
      }

      // optional .Indriya.Core.Msgs.Inertial inertial = 7;
      case 7: {
        if (tag == 58) {
         parse_inertial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inertial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pose;
        break;
      }

      // optional .Indriya.Core.Msgs.Pose pose = 8;
      case 8: {
        if (tag == 66) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_visual;
        break;
      }

      // repeated .Indriya.Core.Msgs.Visual visual = 9;
      case 9: {
        if (tag == 74) {
         parse_visual:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_visual()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_visual;
        if (input->ExpectTag(82)) goto parse_collision;
        break;
      }

      // repeated .Indriya.Core.Msgs.Collision collision = 10;
      case 10: {
        if (tag == 82) {
         parse_collision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_collision;
        if (input->ExpectTag(90)) goto parse_sensor;
        break;
      }

      // repeated .Indriya.Core.Msgs.Sensor sensor = 11;
      case 11: {
        if (tag == 90) {
         parse_sensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sensor;
        if (input->ExpectTag(98)) goto parse_projector;
        break;
      }

      // repeated .Indriya.Core.Msgs.Projector projector = 12;
      case 12: {
        if (tag == 98) {
         parse_projector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_projector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_projector;
        if (input->ExpectTag(104)) goto parse_canonical;
        break;
      }

      // optional bool canonical = 13;
      case 13: {
        if (tag == 104) {
         parse_canonical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canonical_)));
          set_has_canonical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.Link)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Link.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool self_collide = 3;
  if (has_self_collide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->self_collide(), output);
  }

  // optional bool gravity = 4;
  if (has_gravity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->gravity(), output);
  }

  // optional bool kinematic = 5;
  if (has_kinematic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->kinematic(), output);
  }

  // optional bool enabled = 6;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enabled(), output);
  }

  // optional .Indriya.Core.Msgs.Inertial inertial = 7;
  if (has_inertial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->inertial_, output);
  }

  // optional .Indriya.Core.Msgs.Pose pose = 8;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->pose_, output);
  }

  // repeated .Indriya.Core.Msgs.Visual visual = 9;
  for (unsigned int i = 0, n = this->visual_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->visual(i), output);
  }

  // repeated .Indriya.Core.Msgs.Collision collision = 10;
  for (unsigned int i = 0, n = this->collision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->collision(i), output);
  }

  // repeated .Indriya.Core.Msgs.Sensor sensor = 11;
  for (unsigned int i = 0, n = this->sensor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->sensor(i), output);
  }

  // repeated .Indriya.Core.Msgs.Projector projector = 12;
  for (unsigned int i = 0, n = this->projector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->projector(i), output);
  }

  // optional bool canonical = 13;
  if (has_canonical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->canonical(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.Link)
}

::google::protobuf::uint8* Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.Link)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Link.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool self_collide = 3;
  if (has_self_collide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->self_collide(), target);
  }

  // optional bool gravity = 4;
  if (has_gravity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->gravity(), target);
  }

  // optional bool kinematic = 5;
  if (has_kinematic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->kinematic(), target);
  }

  // optional bool enabled = 6;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enabled(), target);
  }

  // optional .Indriya.Core.Msgs.Inertial inertial = 7;
  if (has_inertial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->inertial_, target);
  }

  // optional .Indriya.Core.Msgs.Pose pose = 8;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->pose_, target);
  }

  // repeated .Indriya.Core.Msgs.Visual visual = 9;
  for (unsigned int i = 0, n = this->visual_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->visual(i), target);
  }

  // repeated .Indriya.Core.Msgs.Collision collision = 10;
  for (unsigned int i = 0, n = this->collision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->collision(i), target);
  }

  // repeated .Indriya.Core.Msgs.Sensor sensor = 11;
  for (unsigned int i = 0, n = this->sensor_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->sensor(i), target);
  }

  // repeated .Indriya.Core.Msgs.Projector projector = 12;
  for (unsigned int i = 0, n = this->projector_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->projector(i), target);
  }

  // optional bool canonical = 13;
  if (has_canonical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->canonical(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.Link)
  return target;
}

int Link::ByteSize() const {
  int total_size = 0;

  // required string name = 2;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[0 / 32] & 253) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool self_collide = 3;
    if (has_self_collide()) {
      total_size += 1 + 1;
    }

    // optional bool gravity = 4;
    if (has_gravity()) {
      total_size += 1 + 1;
    }

    // optional bool kinematic = 5;
    if (has_kinematic()) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional .Indriya.Core.Msgs.Inertial inertial = 7;
    if (has_inertial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inertial_);
    }

    // optional .Indriya.Core.Msgs.Pose pose = 8;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

  }
  // optional bool canonical = 13;
  if (has_canonical()) {
    total_size += 1 + 1;
  }

  // repeated .Indriya.Core.Msgs.Visual visual = 9;
  total_size += 1 * this->visual_size();
  for (int i = 0; i < this->visual_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visual(i));
  }

  // repeated .Indriya.Core.Msgs.Collision collision = 10;
  total_size += 1 * this->collision_size();
  for (int i = 0; i < this->collision_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collision(i));
  }

  // repeated .Indriya.Core.Msgs.Sensor sensor = 11;
  total_size += 1 * this->sensor_size();
  for (int i = 0; i < this->sensor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensor(i));
  }

  // repeated .Indriya.Core.Msgs.Projector projector = 12;
  total_size += 1 * this->projector_size();
  for (int i = 0; i < this->projector_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->projector(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Link* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Link*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  visual_.MergeFrom(from.visual_);
  collision_.MergeFrom(from.collision_);
  sensor_.MergeFrom(from.sensor_);
  projector_.MergeFrom(from.projector_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_self_collide()) {
      set_self_collide(from.self_collide());
    }
    if (from.has_gravity()) {
      set_gravity(from.gravity());
    }
    if (from.has_kinematic()) {
      set_kinematic(from.kinematic());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_inertial()) {
      mutable_inertial()->::Indriya::Core::Msgs::Inertial::MergeFrom(from.inertial());
    }
    if (from.has_pose()) {
      mutable_pose()->::Indriya::Core::Msgs::Pose::MergeFrom(from.pose());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_canonical()) {
      set_canonical(from.canonical());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_inertial()) {
    if (!this->inertial_->IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->visual())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->collision())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sensor())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->projector())) return false;
  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(self_collide_, other->self_collide_);
  std::swap(gravity_, other->gravity_);
  std::swap(kinematic_, other->kinematic_);
  std::swap(enabled_, other->enabled_);
  std::swap(inertial_, other->inertial_);
  std::swap(pose_, other->pose_);
  visual_.UnsafeArenaSwap(&other->visual_);
  collision_.UnsafeArenaSwap(&other->collision_);
  sensor_.UnsafeArenaSwap(&other->sensor_);
  projector_.UnsafeArenaSwap(&other->projector_);
  std::swap(canonical_, other->canonical_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Link_descriptor_;
  metadata.reflection = Link_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Link

// optional uint32 id = 1;
 bool Link::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Link::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void Link::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Link::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 Link::id() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.id)
  return id_;
}
 void Link::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Link.id)
}

// required string name = 2;
 bool Link::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Link::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
 void Link::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Link::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Link::name() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Link.name)
}
 void Link::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.Link.name)
}
 void Link::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.Link.name)
}
 ::std::string* Link::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Link.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Link::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Link.name)
}

// optional bool self_collide = 3;
 bool Link::has_self_collide() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Link::set_has_self_collide() {
  _has_bits_[0] |= 0x00000004u;
}
 void Link::clear_has_self_collide() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Link::clear_self_collide() {
  self_collide_ = false;
  clear_has_self_collide();
}
 bool Link::self_collide() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.self_collide)
  return self_collide_;
}
 void Link::set_self_collide(bool value) {
  set_has_self_collide();
  self_collide_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Link.self_collide)
}

// optional bool gravity = 4;
 bool Link::has_gravity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Link::set_has_gravity() {
  _has_bits_[0] |= 0x00000008u;
}
 void Link::clear_has_gravity() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Link::clear_gravity() {
  gravity_ = false;
  clear_has_gravity();
}
 bool Link::gravity() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.gravity)
  return gravity_;
}
 void Link::set_gravity(bool value) {
  set_has_gravity();
  gravity_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Link.gravity)
}

// optional bool kinematic = 5;
 bool Link::has_kinematic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Link::set_has_kinematic() {
  _has_bits_[0] |= 0x00000010u;
}
 void Link::clear_has_kinematic() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Link::clear_kinematic() {
  kinematic_ = false;
  clear_has_kinematic();
}
 bool Link::kinematic() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.kinematic)
  return kinematic_;
}
 void Link::set_kinematic(bool value) {
  set_has_kinematic();
  kinematic_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Link.kinematic)
}

// optional bool enabled = 6;
 bool Link::has_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Link::set_has_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
 void Link::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Link::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
 bool Link::enabled() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.enabled)
  return enabled_;
}
 void Link::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Link.enabled)
}

// optional .Indriya.Core.Msgs.Inertial inertial = 7;
 bool Link::has_inertial() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Link::set_has_inertial() {
  _has_bits_[0] |= 0x00000040u;
}
 void Link::clear_has_inertial() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Link::clear_inertial() {
  if (inertial_ != NULL) inertial_->::Indriya::Core::Msgs::Inertial::Clear();
  clear_has_inertial();
}
 const ::Indriya::Core::Msgs::Inertial& Link::inertial() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.inertial)
  return inertial_ != NULL ? *inertial_ : *default_instance_->inertial_;
}
 ::Indriya::Core::Msgs::Inertial* Link::mutable_inertial() {
  set_has_inertial();
  if (inertial_ == NULL) {
    inertial_ = new ::Indriya::Core::Msgs::Inertial;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Link.inertial)
  return inertial_;
}
 ::Indriya::Core::Msgs::Inertial* Link::release_inertial() {
  clear_has_inertial();
  ::Indriya::Core::Msgs::Inertial* temp = inertial_;
  inertial_ = NULL;
  return temp;
}
 void Link::set_allocated_inertial(::Indriya::Core::Msgs::Inertial* inertial) {
  delete inertial_;
  inertial_ = inertial;
  if (inertial) {
    set_has_inertial();
  } else {
    clear_has_inertial();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Link.inertial)
}

// optional .Indriya.Core.Msgs.Pose pose = 8;
 bool Link::has_pose() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Link::set_has_pose() {
  _has_bits_[0] |= 0x00000080u;
}
 void Link::clear_has_pose() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Link::clear_pose() {
  if (pose_ != NULL) pose_->::Indriya::Core::Msgs::Pose::Clear();
  clear_has_pose();
}
 const ::Indriya::Core::Msgs::Pose& Link::pose() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
 ::Indriya::Core::Msgs::Pose* Link::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::Indriya::Core::Msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Link.pose)
  return pose_;
}
 ::Indriya::Core::Msgs::Pose* Link::release_pose() {
  clear_has_pose();
  ::Indriya::Core::Msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
 void Link::set_allocated_pose(::Indriya::Core::Msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Link.pose)
}

// repeated .Indriya.Core.Msgs.Visual visual = 9;
 int Link::visual_size() const {
  return visual_.size();
}
 void Link::clear_visual() {
  visual_.Clear();
}
 const ::Indriya::Core::Msgs::Visual& Link::visual(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.visual)
  return visual_.Get(index);
}
 ::Indriya::Core::Msgs::Visual* Link::mutable_visual(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Link.visual)
  return visual_.Mutable(index);
}
 ::Indriya::Core::Msgs::Visual* Link::add_visual() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Link.visual)
  return visual_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Visual >&
Link::visual() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Link.visual)
  return visual_;
}
 ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Visual >*
Link::mutable_visual() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Link.visual)
  return &visual_;
}

// repeated .Indriya.Core.Msgs.Collision collision = 10;
 int Link::collision_size() const {
  return collision_.size();
}
 void Link::clear_collision() {
  collision_.Clear();
}
 const ::Indriya::Core::Msgs::Collision& Link::collision(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.collision)
  return collision_.Get(index);
}
 ::Indriya::Core::Msgs::Collision* Link::mutable_collision(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Link.collision)
  return collision_.Mutable(index);
}
 ::Indriya::Core::Msgs::Collision* Link::add_collision() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Link.collision)
  return collision_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Collision >&
Link::collision() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Link.collision)
  return collision_;
}
 ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Collision >*
Link::mutable_collision() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Link.collision)
  return &collision_;
}

// repeated .Indriya.Core.Msgs.Sensor sensor = 11;
 int Link::sensor_size() const {
  return sensor_.size();
}
 void Link::clear_sensor() {
  sensor_.Clear();
}
 const ::Indriya::Core::Msgs::Sensor& Link::sensor(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.sensor)
  return sensor_.Get(index);
}
 ::Indriya::Core::Msgs::Sensor* Link::mutable_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Link.sensor)
  return sensor_.Mutable(index);
}
 ::Indriya::Core::Msgs::Sensor* Link::add_sensor() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Link.sensor)
  return sensor_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Sensor >&
Link::sensor() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Link.sensor)
  return sensor_;
}
 ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Sensor >*
Link::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Link.sensor)
  return &sensor_;
}

// repeated .Indriya.Core.Msgs.Projector projector = 12;
 int Link::projector_size() const {
  return projector_.size();
}
 void Link::clear_projector() {
  projector_.Clear();
}
 const ::Indriya::Core::Msgs::Projector& Link::projector(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.projector)
  return projector_.Get(index);
}
 ::Indriya::Core::Msgs::Projector* Link::mutable_projector(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Link.projector)
  return projector_.Mutable(index);
}
 ::Indriya::Core::Msgs::Projector* Link::add_projector() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Link.projector)
  return projector_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Projector >&
Link::projector() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Link.projector)
  return projector_;
}
 ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Projector >*
Link::mutable_projector() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Link.projector)
  return &projector_;
}

// optional bool canonical = 13;
 bool Link::has_canonical() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void Link::set_has_canonical() {
  _has_bits_[0] |= 0x00001000u;
}
 void Link::clear_has_canonical() {
  _has_bits_[0] &= ~0x00001000u;
}
 void Link::clear_canonical() {
  canonical_ = false;
  clear_has_canonical();
}
 bool Link::canonical() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Link.canonical)
  return canonical_;
}
 void Link::set_canonical(bool value) {
  set_has_canonical();
  canonical_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Link.canonical)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.Link", Link)
// @@protoc_insertion_point(global_scope)
