// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Sensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sensor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sensor_2eproto() {
  protobuf_AddDesc_sensor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sensor.proto");
  GOOGLE_CHECK(file != NULL);
  Sensor_descriptor_ = file->message_type(0);
  static const int Sensor_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, always_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, update_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, ray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, visualize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, topic_),
  };
  Sensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Sensor_descriptor_,
      Sensor::default_instance_,
      Sensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, _has_bits_[0]),
      -1,
      -1,
      sizeof(Sensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sensor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Sensor_descriptor_, &Sensor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sensor_2eproto() {
  delete Sensor::default_instance_;
  delete Sensor_reflection_;
}

void protobuf_AddDesc_sensor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_pose_2eproto();
  ::experimot::msgs::protobuf_AddDesc_camerasensor_2eproto();
  ::experimot::msgs::protobuf_AddDesc_raysensor_2eproto();
  ::experimot::msgs::protobuf_AddDesc_contactsensor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014sensor.proto\022\016experimot.msgs\032\npose.pro"
    "to\032\022camerasensor.proto\032\017raysensor.proto\032"
    "\023contactsensor.proto\"\307\002\n\006Sensor\022\014\n\004name\030"
    "\001 \002(\t\022\n\n\002id\030\002 \001(\r\022\016\n\006parent\030\003 \002(\t\022\021\n\tpar"
    "ent_id\030\004 \002(\r\022\014\n\004type\030\005 \002(\t\022\021\n\talways_on\030"
    "\006 \001(\010\022\023\n\013update_rate\030\007 \001(\001\022\"\n\004pose\030\010 \001(\013"
    "2\024.experimot.msgs.Pose\022,\n\006camera\030\t \001(\0132\034"
    ".experimot.msgs.CameraSensor\022&\n\003ray\030\n \001("
    "\0132\031.experimot.msgs.RaySensor\022.\n\007contact\030"
    "\013 \001(\0132\035.experimot.msgs.ContactSensor\022\021\n\t"
    "visualize\030\014 \001(\010\022\r\n\005topic\030\r \001(\t", 430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor.proto", &protobuf_RegisterTypes);
  Sensor::default_instance_ = new Sensor();
  Sensor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sensor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sensor_2eproto {
  StaticDescriptorInitializer_sensor_2eproto() {
    protobuf_AddDesc_sensor_2eproto();
  }
} static_descriptor_initializer_sensor_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Sensor::kNameFieldNumber;
const int Sensor::kIdFieldNumber;
const int Sensor::kParentFieldNumber;
const int Sensor::kParentIdFieldNumber;
const int Sensor::kTypeFieldNumber;
const int Sensor::kAlwaysOnFieldNumber;
const int Sensor::kUpdateRateFieldNumber;
const int Sensor::kPoseFieldNumber;
const int Sensor::kCameraFieldNumber;
const int Sensor::kRayFieldNumber;
const int Sensor::kContactFieldNumber;
const int Sensor::kVisualizeFieldNumber;
const int Sensor::kTopicFieldNumber;
#endif  // !_MSC_VER

Sensor::Sensor()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Sensor)
}

void Sensor::InitAsDefaultInstance() {
  pose_ = const_cast< ::experimot::msgs::Pose*>(&::experimot::msgs::Pose::default_instance());
  camera_ = const_cast< ::experimot::msgs::CameraSensor*>(&::experimot::msgs::CameraSensor::default_instance());
  ray_ = const_cast< ::experimot::msgs::RaySensor*>(&::experimot::msgs::RaySensor::default_instance());
  contact_ = const_cast< ::experimot::msgs::ContactSensor*>(&::experimot::msgs::ContactSensor::default_instance());
}

Sensor::Sensor(const Sensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Sensor)
}

void Sensor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_ = 0u;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  always_on_ = false;
  update_rate_ = 0;
  pose_ = NULL;
  camera_ = NULL;
  ray_ = NULL;
  contact_ = NULL;
  visualize_ = false;
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Sensor)
  SharedDtor();
}

void Sensor::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete pose_;
    delete camera_;
    delete ray_;
    delete contact_;
  }
}

void Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sensor_descriptor_;
}

const Sensor& Sensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensor_2eproto();
  return *default_instance_;
}

Sensor* Sensor::default_instance_ = NULL;

Sensor* Sensor::New(::google::protobuf::Arena* arena) const {
  Sensor* n = new Sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sensor::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Sensor*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, parent_id_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_parent()) {
      parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    always_on_ = false;
    update_rate_ = 0;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::experimot::msgs::Pose::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_camera()) {
      if (camera_ != NULL) camera_->::experimot::msgs::CameraSensor::Clear();
    }
    if (has_ray()) {
      if (ray_ != NULL) ray_->::experimot::msgs::RaySensor::Clear();
    }
    if (has_contact()) {
      if (contact_ != NULL) contact_->::experimot::msgs::ContactSensor::Clear();
    }
    visualize_ = false;
    if (has_topic()) {
      topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Sensor.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parent;
        break;
      }

      // required string parent = 3;
      case 3: {
        if (tag == 26) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Sensor.parent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_parent_id;
        break;
      }

      // required uint32 parent_id = 4;
      case 4: {
        if (tag == 32) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // required string type = 5;
      case 5: {
        if (tag == 42) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Sensor.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_always_on;
        break;
      }

      // optional bool always_on = 6;
      case 6: {
        if (tag == 48) {
         parse_always_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &always_on_)));
          set_has_always_on();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_update_rate;
        break;
      }

      // optional double update_rate = 7;
      case 7: {
        if (tag == 57) {
         parse_update_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &update_rate_)));
          set_has_update_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pose;
        break;
      }

      // optional .experimot.msgs.Pose pose = 8;
      case 8: {
        if (tag == 66) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_camera;
        break;
      }

      // optional .experimot.msgs.CameraSensor camera = 9;
      case 9: {
        if (tag == 74) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ray;
        break;
      }

      // optional .experimot.msgs.RaySensor ray = 10;
      case 10: {
        if (tag == 82) {
         parse_ray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_contact;
        break;
      }

      // optional .experimot.msgs.ContactSensor contact = 11;
      case 11: {
        if (tag == 90) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contact()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_visualize;
        break;
      }

      // optional bool visualize = 12;
      case 12: {
        if (tag == 96) {
         parse_visualize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visualize_)));
          set_has_visualize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_topic;
        break;
      }

      // optional string topic = 13;
      case 13: {
        if (tag == 106) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Sensor.topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Sensor)
  return false;
#undef DO_
}

void Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Sensor)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Sensor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required string parent = 3;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Sensor.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parent(), output);
  }

  // required uint32 parent_id = 4;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->parent_id(), output);
  }

  // required string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Sensor.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // optional bool always_on = 6;
  if (has_always_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->always_on(), output);
  }

  // optional double update_rate = 7;
  if (has_update_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->update_rate(), output);
  }

  // optional .experimot.msgs.Pose pose = 8;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->pose_, output);
  }

  // optional .experimot.msgs.CameraSensor camera = 9;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->camera_, output);
  }

  // optional .experimot.msgs.RaySensor ray = 10;
  if (has_ray()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->ray_, output);
  }

  // optional .experimot.msgs.ContactSensor contact = 11;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->contact_, output);
  }

  // optional bool visualize = 12;
  if (has_visualize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->visualize(), output);
  }

  // optional string topic = 13;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Sensor.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Sensor)
}

::google::protobuf::uint8* Sensor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Sensor)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Sensor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required string parent = 3;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Sensor.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parent(), target);
  }

  // required uint32 parent_id = 4;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->parent_id(), target);
  }

  // required string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Sensor.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // optional bool always_on = 6;
  if (has_always_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->always_on(), target);
  }

  // optional double update_rate = 7;
  if (has_update_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->update_rate(), target);
  }

  // optional .experimot.msgs.Pose pose = 8;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->pose_, target);
  }

  // optional .experimot.msgs.CameraSensor camera = 9;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->camera_, target);
  }

  // optional .experimot.msgs.RaySensor ray = 10;
  if (has_ray()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->ray_, target);
  }

  // optional .experimot.msgs.ContactSensor contact = 11;
  if (has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->contact_, target);
  }

  // optional bool visualize = 12;
  if (has_visualize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->visualize(), target);
  }

  // optional string topic = 13;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Sensor.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Sensor)
  return target;
}

int Sensor::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_parent()) {
    // required string parent = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  if (has_parent_id()) {
    // required uint32 parent_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parent_id());
  }

  if (has_type()) {
    // required string type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
int Sensor::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string parent = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());

    // required uint32 parent_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parent_id());

    // required string type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 226) {
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool always_on = 6;
    if (has_always_on()) {
      total_size += 1 + 1;
    }

    // optional double update_rate = 7;
    if (has_update_rate()) {
      total_size += 1 + 8;
    }

    // optional .experimot.msgs.Pose pose = 8;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

  }
  if (_has_bits_[8 / 32] & 7936) {
    // optional .experimot.msgs.CameraSensor camera = 9;
    if (has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->camera_);
    }

    // optional .experimot.msgs.RaySensor ray = 10;
    if (has_ray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ray_);
    }

    // optional .experimot.msgs.ContactSensor contact = 11;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->contact_);
    }

    // optional bool visualize = 12;
    if (has_visualize()) {
      total_size += 1 + 1;
    }

    // optional string topic = 13;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sensor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Sensor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sensor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sensor::MergeFrom(const Sensor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent()) {
      set_has_parent();
      parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_always_on()) {
      set_always_on(from.always_on());
    }
    if (from.has_update_rate()) {
      set_update_rate(from.update_rate());
    }
    if (from.has_pose()) {
      mutable_pose()->::experimot::msgs::Pose::MergeFrom(from.pose());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_camera()) {
      mutable_camera()->::experimot::msgs::CameraSensor::MergeFrom(from.camera());
    }
    if (from.has_ray()) {
      mutable_ray()->::experimot::msgs::RaySensor::MergeFrom(from.ray());
    }
    if (from.has_contact()) {
      mutable_contact()->::experimot::msgs::ContactSensor::MergeFrom(from.contact());
    }
    if (from.has_visualize()) {
      set_visualize(from.visualize());
    }
    if (from.has_topic()) {
      set_has_topic();
      topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Sensor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor::CopyFrom(const Sensor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_camera()) {
    if (!this->camera_->IsInitialized()) return false;
  }
  return true;
}

void Sensor::Swap(Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sensor::InternalSwap(Sensor* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  parent_.Swap(&other->parent_);
  std::swap(parent_id_, other->parent_id_);
  type_.Swap(&other->type_);
  std::swap(always_on_, other->always_on_);
  std::swap(update_rate_, other->update_rate_);
  std::swap(pose_, other->pose_);
  std::swap(camera_, other->camera_);
  std::swap(ray_, other->ray_);
  std::swap(contact_, other->contact_);
  std::swap(visualize_, other->visualize_);
  topic_.Swap(&other->topic_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sensor_descriptor_;
  metadata.reflection = Sensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sensor

// required string name = 1;
 bool Sensor::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Sensor::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void Sensor::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Sensor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Sensor::name() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Sensor::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Sensor.name)
}
 void Sensor::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Sensor.name)
}
 void Sensor::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Sensor.name)
}
 ::std::string* Sensor::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Sensor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Sensor::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Sensor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Sensor.name)
}

// optional uint32 id = 2;
 bool Sensor::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Sensor::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void Sensor::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Sensor::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 Sensor::id() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.id)
  return id_;
}
 void Sensor::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Sensor.id)
}

// required string parent = 3;
 bool Sensor::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Sensor::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
 void Sensor::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Sensor::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent();
}
 const ::std::string& Sensor::parent() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.parent)
  return parent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Sensor::set_parent(const ::std::string& value) {
  set_has_parent();
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Sensor.parent)
}
 void Sensor::set_parent(const char* value) {
  set_has_parent();
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Sensor.parent)
}
 void Sensor::set_parent(const char* value, size_t size) {
  set_has_parent();
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Sensor.parent)
}
 ::std::string* Sensor::mutable_parent() {
  set_has_parent();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Sensor.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Sensor::release_parent() {
  clear_has_parent();
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Sensor::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Sensor.parent)
}

// required uint32 parent_id = 4;
 bool Sensor::has_parent_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Sensor::set_has_parent_id() {
  _has_bits_[0] |= 0x00000008u;
}
 void Sensor::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Sensor::clear_parent_id() {
  parent_id_ = 0u;
  clear_has_parent_id();
}
 ::google::protobuf::uint32 Sensor::parent_id() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.parent_id)
  return parent_id_;
}
 void Sensor::set_parent_id(::google::protobuf::uint32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Sensor.parent_id)
}

// required string type = 5;
 bool Sensor::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Sensor::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
 void Sensor::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Sensor::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& Sensor::type() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Sensor::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Sensor.type)
}
 void Sensor::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Sensor.type)
}
 void Sensor::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Sensor.type)
}
 ::std::string* Sensor::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Sensor.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Sensor::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Sensor::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Sensor.type)
}

// optional bool always_on = 6;
 bool Sensor::has_always_on() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Sensor::set_has_always_on() {
  _has_bits_[0] |= 0x00000020u;
}
 void Sensor::clear_has_always_on() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Sensor::clear_always_on() {
  always_on_ = false;
  clear_has_always_on();
}
 bool Sensor::always_on() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.always_on)
  return always_on_;
}
 void Sensor::set_always_on(bool value) {
  set_has_always_on();
  always_on_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Sensor.always_on)
}

// optional double update_rate = 7;
 bool Sensor::has_update_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Sensor::set_has_update_rate() {
  _has_bits_[0] |= 0x00000040u;
}
 void Sensor::clear_has_update_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Sensor::clear_update_rate() {
  update_rate_ = 0;
  clear_has_update_rate();
}
 double Sensor::update_rate() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.update_rate)
  return update_rate_;
}
 void Sensor::set_update_rate(double value) {
  set_has_update_rate();
  update_rate_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Sensor.update_rate)
}

// optional .experimot.msgs.Pose pose = 8;
 bool Sensor::has_pose() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Sensor::set_has_pose() {
  _has_bits_[0] |= 0x00000080u;
}
 void Sensor::clear_has_pose() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Sensor::clear_pose() {
  if (pose_ != NULL) pose_->::experimot::msgs::Pose::Clear();
  clear_has_pose();
}
 const ::experimot::msgs::Pose& Sensor::pose() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
 ::experimot::msgs::Pose* Sensor::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::experimot::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Sensor.pose)
  return pose_;
}
 ::experimot::msgs::Pose* Sensor::release_pose() {
  clear_has_pose();
  ::experimot::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
 void Sensor::set_allocated_pose(::experimot::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Sensor.pose)
}

// optional .experimot.msgs.CameraSensor camera = 9;
 bool Sensor::has_camera() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Sensor::set_has_camera() {
  _has_bits_[0] |= 0x00000100u;
}
 void Sensor::clear_has_camera() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Sensor::clear_camera() {
  if (camera_ != NULL) camera_->::experimot::msgs::CameraSensor::Clear();
  clear_has_camera();
}
 const ::experimot::msgs::CameraSensor& Sensor::camera() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.camera)
  return camera_ != NULL ? *camera_ : *default_instance_->camera_;
}
 ::experimot::msgs::CameraSensor* Sensor::mutable_camera() {
  set_has_camera();
  if (camera_ == NULL) {
    camera_ = new ::experimot::msgs::CameraSensor;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Sensor.camera)
  return camera_;
}
 ::experimot::msgs::CameraSensor* Sensor::release_camera() {
  clear_has_camera();
  ::experimot::msgs::CameraSensor* temp = camera_;
  camera_ = NULL;
  return temp;
}
 void Sensor::set_allocated_camera(::experimot::msgs::CameraSensor* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    set_has_camera();
  } else {
    clear_has_camera();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Sensor.camera)
}

// optional .experimot.msgs.RaySensor ray = 10;
 bool Sensor::has_ray() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void Sensor::set_has_ray() {
  _has_bits_[0] |= 0x00000200u;
}
 void Sensor::clear_has_ray() {
  _has_bits_[0] &= ~0x00000200u;
}
 void Sensor::clear_ray() {
  if (ray_ != NULL) ray_->::experimot::msgs::RaySensor::Clear();
  clear_has_ray();
}
 const ::experimot::msgs::RaySensor& Sensor::ray() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.ray)
  return ray_ != NULL ? *ray_ : *default_instance_->ray_;
}
 ::experimot::msgs::RaySensor* Sensor::mutable_ray() {
  set_has_ray();
  if (ray_ == NULL) {
    ray_ = new ::experimot::msgs::RaySensor;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Sensor.ray)
  return ray_;
}
 ::experimot::msgs::RaySensor* Sensor::release_ray() {
  clear_has_ray();
  ::experimot::msgs::RaySensor* temp = ray_;
  ray_ = NULL;
  return temp;
}
 void Sensor::set_allocated_ray(::experimot::msgs::RaySensor* ray) {
  delete ray_;
  ray_ = ray;
  if (ray) {
    set_has_ray();
  } else {
    clear_has_ray();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Sensor.ray)
}

// optional .experimot.msgs.ContactSensor contact = 11;
 bool Sensor::has_contact() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void Sensor::set_has_contact() {
  _has_bits_[0] |= 0x00000400u;
}
 void Sensor::clear_has_contact() {
  _has_bits_[0] &= ~0x00000400u;
}
 void Sensor::clear_contact() {
  if (contact_ != NULL) contact_->::experimot::msgs::ContactSensor::Clear();
  clear_has_contact();
}
 const ::experimot::msgs::ContactSensor& Sensor::contact() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.contact)
  return contact_ != NULL ? *contact_ : *default_instance_->contact_;
}
 ::experimot::msgs::ContactSensor* Sensor::mutable_contact() {
  set_has_contact();
  if (contact_ == NULL) {
    contact_ = new ::experimot::msgs::ContactSensor;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Sensor.contact)
  return contact_;
}
 ::experimot::msgs::ContactSensor* Sensor::release_contact() {
  clear_has_contact();
  ::experimot::msgs::ContactSensor* temp = contact_;
  contact_ = NULL;
  return temp;
}
 void Sensor::set_allocated_contact(::experimot::msgs::ContactSensor* contact) {
  delete contact_;
  contact_ = contact;
  if (contact) {
    set_has_contact();
  } else {
    clear_has_contact();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Sensor.contact)
}

// optional bool visualize = 12;
 bool Sensor::has_visualize() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void Sensor::set_has_visualize() {
  _has_bits_[0] |= 0x00000800u;
}
 void Sensor::clear_has_visualize() {
  _has_bits_[0] &= ~0x00000800u;
}
 void Sensor::clear_visualize() {
  visualize_ = false;
  clear_has_visualize();
}
 bool Sensor::visualize() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.visualize)
  return visualize_;
}
 void Sensor::set_visualize(bool value) {
  set_has_visualize();
  visualize_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Sensor.visualize)
}

// optional string topic = 13;
 bool Sensor::has_topic() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void Sensor::set_has_topic() {
  _has_bits_[0] |= 0x00001000u;
}
 void Sensor::clear_has_topic() {
  _has_bits_[0] &= ~0x00001000u;
}
 void Sensor::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
 const ::std::string& Sensor::topic() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Sensor.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Sensor::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Sensor.topic)
}
 void Sensor::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Sensor.topic)
}
 void Sensor::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Sensor.topic)
}
 ::std::string* Sensor::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Sensor.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Sensor::release_topic() {
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Sensor::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Sensor.topic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.Sensor", Sensor)
// @@protoc_insertion_point(global_scope)
