// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topic_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "topic_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* TopicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_topic_5finfo_2eproto() {
  protobuf_AddDesc_topic_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "topic_info.proto");
  GOOGLE_CHECK(file != NULL);
  TopicInfo_descriptor_ = file->message_type(0);
  static const int TopicInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicInfo, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicInfo, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicInfo, subscriber_),
  };
  TopicInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicInfo_descriptor_,
      TopicInfo::default_instance_,
      TopicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopicInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_topic_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicInfo_descriptor_, &TopicInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_topic_5finfo_2eproto() {
  delete TopicInfo::default_instance_;
  delete TopicInfo_reflection_;
}

void protobuf_AddDesc_topic_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Indriya::Core::Msgs::protobuf_AddDesc_publish_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_subscribe_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020topic_info.proto\022\021Indriya.Core.Msgs\032\rp"
    "ublish.proto\032\017subscribe.proto\"~\n\tTopicIn"
    "fo\022\020\n\010msg_type\030\001 \002(\t\022-\n\tpublisher\030\002 \003(\0132"
    "\032.Indriya.Core.Msgs.Publish\0220\n\nsubscribe"
    "r\030\003 \003(\0132\034.Indriya.Core.Msgs.Subscribe", 197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "topic_info.proto", &protobuf_RegisterTypes);
  TopicInfo::default_instance_ = new TopicInfo();
  TopicInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_topic_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_topic_5finfo_2eproto {
  StaticDescriptorInitializer_topic_5finfo_2eproto() {
    protobuf_AddDesc_topic_5finfo_2eproto();
  }
} static_descriptor_initializer_topic_5finfo_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int TopicInfo::kMsgTypeFieldNumber;
const int TopicInfo::kPublisherFieldNumber;
const int TopicInfo::kSubscriberFieldNumber;
#endif  // !_MSC_VER

TopicInfo::TopicInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.TopicInfo)
}

void TopicInfo::InitAsDefaultInstance() {
}

TopicInfo::TopicInfo(const TopicInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.TopicInfo)
}

void TopicInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicInfo::~TopicInfo() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.TopicInfo)
  SharedDtor();
}

void TopicInfo::SharedDtor() {
  msg_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TopicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicInfo_descriptor_;
}

const TopicInfo& TopicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_topic_5finfo_2eproto();
  return *default_instance_;
}

TopicInfo* TopicInfo::default_instance_ = NULL;

TopicInfo* TopicInfo::New(::google::protobuf::Arena* arena) const {
  TopicInfo* n = new TopicInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicInfo::Clear() {
  if (has_msg_type()) {
    msg_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  publisher_.Clear();
  subscriber_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.TopicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_type().data(), this->msg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Indriya.Core.Msgs.TopicInfo.msg_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_publisher;
        break;
      }

      // repeated .Indriya.Core.Msgs.Publish publisher = 2;
      case 2: {
        if (tag == 18) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_publisher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_publisher;
        if (input->ExpectTag(26)) goto parse_subscriber;
        break;
      }

      // repeated .Indriya.Core.Msgs.Subscribe subscriber = 3;
      case 3: {
        if (tag == 26) {
         parse_subscriber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subscriber;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.TopicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.TopicInfo)
  return false;
#undef DO_
}

void TopicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.TopicInfo)
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.TopicInfo.msg_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg_type(), output);
  }

  // repeated .Indriya.Core.Msgs.Publish publisher = 2;
  for (unsigned int i = 0, n = this->publisher_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->publisher(i), output);
  }

  // repeated .Indriya.Core.Msgs.Subscribe subscriber = 3;
  for (unsigned int i = 0, n = this->subscriber_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subscriber(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.TopicInfo)
}

::google::protobuf::uint8* TopicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.TopicInfo)
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.TopicInfo.msg_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_type(), target);
  }

  // repeated .Indriya.Core.Msgs.Publish publisher = 2;
  for (unsigned int i = 0, n = this->publisher_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->publisher(i), target);
  }

  // repeated .Indriya.Core.Msgs.Subscribe subscriber = 3;
  for (unsigned int i = 0, n = this->subscriber_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subscriber(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.TopicInfo)
  return target;
}

int TopicInfo::ByteSize() const {
  int total_size = 0;

  // required string msg_type = 1;
  if (has_msg_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_type());
  }
  // repeated .Indriya.Core.Msgs.Publish publisher = 2;
  total_size += 1 * this->publisher_size();
  for (int i = 0; i < this->publisher_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->publisher(i));
  }

  // repeated .Indriya.Core.Msgs.Subscribe subscriber = 3;
  total_size += 1 * this->subscriber_size();
  for (int i = 0; i < this->subscriber_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriber(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TopicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicInfo::MergeFrom(const TopicInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  publisher_.MergeFrom(from.publisher_);
  subscriber_.MergeFrom(from.subscriber_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_has_msg_type();
      msg_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicInfo::CopyFrom(const TopicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->publisher())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subscriber())) return false;
  return true;
}

void TopicInfo::Swap(TopicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicInfo::InternalSwap(TopicInfo* other) {
  msg_type_.Swap(&other->msg_type_);
  publisher_.UnsafeArenaSwap(&other->publisher_);
  subscriber_.UnsafeArenaSwap(&other->subscriber_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicInfo_descriptor_;
  metadata.reflection = TopicInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicInfo

// required string msg_type = 1;
 bool TopicInfo::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void TopicInfo::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
 void TopicInfo::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
 void TopicInfo::clear_msg_type() {
  msg_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_type();
}
 const ::std::string& TopicInfo::msg_type() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.TopicInfo.msg_type)
  return msg_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicInfo::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.TopicInfo.msg_type)
}
 void TopicInfo::set_msg_type(const char* value) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.TopicInfo.msg_type)
}
 void TopicInfo::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.TopicInfo.msg_type)
}
 ::std::string* TopicInfo::mutable_msg_type() {
  set_has_msg_type();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.TopicInfo.msg_type)
  return msg_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TopicInfo::release_msg_type() {
  clear_has_msg_type();
  return msg_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicInfo::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type != NULL) {
    set_has_msg_type();
  } else {
    clear_has_msg_type();
  }
  msg_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_type);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.TopicInfo.msg_type)
}

// repeated .Indriya.Core.Msgs.Publish publisher = 2;
 int TopicInfo::publisher_size() const {
  return publisher_.size();
}
 void TopicInfo::clear_publisher() {
  publisher_.Clear();
}
 const ::Indriya::Core::Msgs::Publish& TopicInfo::publisher(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.TopicInfo.publisher)
  return publisher_.Get(index);
}
 ::Indriya::Core::Msgs::Publish* TopicInfo::mutable_publisher(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.TopicInfo.publisher)
  return publisher_.Mutable(index);
}
 ::Indriya::Core::Msgs::Publish* TopicInfo::add_publisher() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.TopicInfo.publisher)
  return publisher_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Publish >&
TopicInfo::publisher() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.TopicInfo.publisher)
  return publisher_;
}
 ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Publish >*
TopicInfo::mutable_publisher() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.TopicInfo.publisher)
  return &publisher_;
}

// repeated .Indriya.Core.Msgs.Subscribe subscriber = 3;
 int TopicInfo::subscriber_size() const {
  return subscriber_.size();
}
 void TopicInfo::clear_subscriber() {
  subscriber_.Clear();
}
 const ::Indriya::Core::Msgs::Subscribe& TopicInfo::subscriber(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.TopicInfo.subscriber)
  return subscriber_.Get(index);
}
 ::Indriya::Core::Msgs::Subscribe* TopicInfo::mutable_subscriber(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.TopicInfo.subscriber)
  return subscriber_.Mutable(index);
}
 ::Indriya::Core::Msgs::Subscribe* TopicInfo::add_subscriber() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.TopicInfo.subscriber)
  return subscriber_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Subscribe >&
TopicInfo::subscriber() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.TopicInfo.subscriber)
  return subscriber_;
}
 ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Subscribe >*
TopicInfo::mutable_subscriber() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.TopicInfo.subscriber)
  return &subscriber_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.TopicInfo", TopicInfo)
// @@protoc_insertion_point(global_scope)
