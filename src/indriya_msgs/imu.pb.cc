// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "imu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* IMU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMU_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_imu_2eproto() {
  protobuf_AddDesc_imu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "imu.proto");
  GOOGLE_CHECK(file != NULL);
  IMU_descriptor_ = file->message_type(0);
  static const int IMU_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, entity_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, linear_acceleration_),
  };
  IMU_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IMU_descriptor_,
      IMU::default_instance_,
      IMU_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, _has_bits_[0]),
      -1,
      -1,
      sizeof(IMU),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_imu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IMU_descriptor_, &IMU::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_imu_2eproto() {
  delete IMU::default_instance_;
  delete IMU_reflection_;
}

void protobuf_AddDesc_imu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Indriya::Core::Msgs::protobuf_AddDesc_time_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_vector3d_2eproto();
  ::Indriya::Core::Msgs::protobuf_AddDesc_quaternion_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\timu.proto\022\021Indriya.Core.Msgs\032\ntime.pro"
    "to\032\016vector3d.proto\032\020quaternion.proto\"\347\001\n"
    "\003IMU\022&\n\005stamp\030\001 \002(\0132\027.Indriya.Core.Msgs."
    "Time\022\023\n\013entity_name\030\002 \002(\t\0222\n\013orientation"
    "\030\003 \002(\0132\035.Indriya.Core.Msgs.Quaternion\0225\n"
    "\020angular_velocity\030\004 \002(\0132\033.Indriya.Core.M"
    "sgs.Vector3d\0228\n\023linear_acceleration\030\005 \002("
    "\0132\033.Indriya.Core.Msgs.Vector3d", 310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "imu.proto", &protobuf_RegisterTypes);
  IMU::default_instance_ = new IMU();
  IMU::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_imu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_imu_2eproto {
  StaticDescriptorInitializer_imu_2eproto() {
    protobuf_AddDesc_imu_2eproto();
  }
} static_descriptor_initializer_imu_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int IMU::kStampFieldNumber;
const int IMU::kEntityNameFieldNumber;
const int IMU::kOrientationFieldNumber;
const int IMU::kAngularVelocityFieldNumber;
const int IMU::kLinearAccelerationFieldNumber;
#endif  // !_MSC_VER

IMU::IMU()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.IMU)
}

void IMU::InitAsDefaultInstance() {
  stamp_ = const_cast< ::Indriya::Core::Msgs::Time*>(&::Indriya::Core::Msgs::Time::default_instance());
  orientation_ = const_cast< ::Indriya::Core::Msgs::Quaternion*>(&::Indriya::Core::Msgs::Quaternion::default_instance());
  angular_velocity_ = const_cast< ::Indriya::Core::Msgs::Vector3d*>(&::Indriya::Core::Msgs::Vector3d::default_instance());
  linear_acceleration_ = const_cast< ::Indriya::Core::Msgs::Vector3d*>(&::Indriya::Core::Msgs::Vector3d::default_instance());
}

IMU::IMU(const IMU& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.IMU)
}

void IMU::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stamp_ = NULL;
  entity_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orientation_ = NULL;
  angular_velocity_ = NULL;
  linear_acceleration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMU::~IMU() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.IMU)
  SharedDtor();
}

void IMU::SharedDtor() {
  entity_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete stamp_;
    delete orientation_;
    delete angular_velocity_;
    delete linear_acceleration_;
  }
}

void IMU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMU_descriptor_;
}

const IMU& IMU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imu_2eproto();
  return *default_instance_;
}

IMU* IMU::default_instance_ = NULL;

IMU* IMU::New(::google::protobuf::Arena* arena) const {
  IMU* n = new IMU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMU::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_stamp()) {
      if (stamp_ != NULL) stamp_->::Indriya::Core::Msgs::Time::Clear();
    }
    if (has_entity_name()) {
      entity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::Indriya::Core::Msgs::Quaternion::Clear();
    }
    if (has_angular_velocity()) {
      if (angular_velocity_ != NULL) angular_velocity_->::Indriya::Core::Msgs::Vector3d::Clear();
    }
    if (has_linear_acceleration()) {
      if (linear_acceleration_ != NULL) linear_acceleration_->::Indriya::Core::Msgs::Vector3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IMU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.IMU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Indriya.Core.Msgs.Time stamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entity_name;
        break;
      }

      // required string entity_name = 2;
      case 2: {
        if (tag == 18) {
         parse_entity_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entity_name().data(), this->entity_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Indriya.Core.Msgs.IMU.entity_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orientation;
        break;
      }

      // required .Indriya.Core.Msgs.Quaternion orientation = 3;
      case 3: {
        if (tag == 26) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_angular_velocity;
        break;
      }

      // required .Indriya.Core.Msgs.Vector3d angular_velocity = 4;
      case 4: {
        if (tag == 34) {
         parse_angular_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_linear_acceleration;
        break;
      }

      // required .Indriya.Core.Msgs.Vector3d linear_acceleration = 5;
      case 5: {
        if (tag == 42) {
         parse_linear_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.IMU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.IMU)
  return false;
#undef DO_
}

void IMU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.IMU)
  // required .Indriya.Core.Msgs.Time stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stamp_, output);
  }

  // required string entity_name = 2;
  if (has_entity_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_name().data(), this->entity_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.IMU.entity_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->entity_name(), output);
  }

  // required .Indriya.Core.Msgs.Quaternion orientation = 3;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->orientation_, output);
  }

  // required .Indriya.Core.Msgs.Vector3d angular_velocity = 4;
  if (has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->angular_velocity_, output);
  }

  // required .Indriya.Core.Msgs.Vector3d linear_acceleration = 5;
  if (has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->linear_acceleration_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.IMU)
}

::google::protobuf::uint8* IMU::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.IMU)
  // required .Indriya.Core.Msgs.Time stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->stamp_, target);
  }

  // required string entity_name = 2;
  if (has_entity_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_name().data(), this->entity_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.IMU.entity_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entity_name(), target);
  }

  // required .Indriya.Core.Msgs.Quaternion orientation = 3;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->orientation_, target);
  }

  // required .Indriya.Core.Msgs.Vector3d angular_velocity = 4;
  if (has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->angular_velocity_, target);
  }

  // required .Indriya.Core.Msgs.Vector3d linear_acceleration = 5;
  if (has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->linear_acceleration_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.IMU)
  return target;
}

int IMU::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_stamp()) {
    // required .Indriya.Core.Msgs.Time stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);
  }

  if (has_entity_name()) {
    // required string entity_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity_name());
  }

  if (has_orientation()) {
    // required .Indriya.Core.Msgs.Quaternion orientation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  if (has_angular_velocity()) {
    // required .Indriya.Core.Msgs.Vector3d angular_velocity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  if (has_linear_acceleration()) {
    // required .Indriya.Core.Msgs.Vector3d linear_acceleration = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);
  }

  return total_size;
}
int IMU::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .Indriya.Core.Msgs.Time stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);

    // required string entity_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity_name());

    // required .Indriya.Core.Msgs.Quaternion orientation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);

    // required .Indriya.Core.Msgs.Vector3d angular_velocity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);

    // required .Indriya.Core.Msgs.Vector3d linear_acceleration = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMU::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IMU* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMU*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMU::MergeFrom(const IMU& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      mutable_stamp()->::Indriya::Core::Msgs::Time::MergeFrom(from.stamp());
    }
    if (from.has_entity_name()) {
      set_has_entity_name();
      entity_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_name_);
    }
    if (from.has_orientation()) {
      mutable_orientation()->::Indriya::Core::Msgs::Quaternion::MergeFrom(from.orientation());
    }
    if (from.has_angular_velocity()) {
      mutable_angular_velocity()->::Indriya::Core::Msgs::Vector3d::MergeFrom(from.angular_velocity());
    }
    if (from.has_linear_acceleration()) {
      mutable_linear_acceleration()->::Indriya::Core::Msgs::Vector3d::MergeFrom(from.linear_acceleration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IMU::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMU::CopyFrom(const IMU& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMU::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_stamp()) {
    if (!this->stamp_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  if (has_angular_velocity()) {
    if (!this->angular_velocity_->IsInitialized()) return false;
  }
  if (has_linear_acceleration()) {
    if (!this->linear_acceleration_->IsInitialized()) return false;
  }
  return true;
}

void IMU::Swap(IMU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMU::InternalSwap(IMU* other) {
  std::swap(stamp_, other->stamp_);
  entity_name_.Swap(&other->entity_name_);
  std::swap(orientation_, other->orientation_);
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(linear_acceleration_, other->linear_acceleration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMU::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMU_descriptor_;
  metadata.reflection = IMU_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMU

// required .Indriya.Core.Msgs.Time stamp = 1;
 bool IMU::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void IMU::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
 void IMU::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
 void IMU::clear_stamp() {
  if (stamp_ != NULL) stamp_->::Indriya::Core::Msgs::Time::Clear();
  clear_has_stamp();
}
 const ::Indriya::Core::Msgs::Time& IMU::stamp() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.IMU.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
 ::Indriya::Core::Msgs::Time* IMU::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::Indriya::Core::Msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.IMU.stamp)
  return stamp_;
}
 ::Indriya::Core::Msgs::Time* IMU::release_stamp() {
  clear_has_stamp();
  ::Indriya::Core::Msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
 void IMU::set_allocated_stamp(::Indriya::Core::Msgs::Time* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.IMU.stamp)
}

// required string entity_name = 2;
 bool IMU::has_entity_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void IMU::set_has_entity_name() {
  _has_bits_[0] |= 0x00000002u;
}
 void IMU::clear_has_entity_name() {
  _has_bits_[0] &= ~0x00000002u;
}
 void IMU::clear_entity_name() {
  entity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_name();
}
 const ::std::string& IMU::entity_name() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.IMU.entity_name)
  return entity_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMU::set_entity_name(const ::std::string& value) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.IMU.entity_name)
}
 void IMU::set_entity_name(const char* value) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.IMU.entity_name)
}
 void IMU::set_entity_name(const char* value, size_t size) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.IMU.entity_name)
}
 ::std::string* IMU::mutable_entity_name() {
  set_has_entity_name();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.IMU.entity_name)
  return entity_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMU::release_entity_name() {
  clear_has_entity_name();
  return entity_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMU::set_allocated_entity_name(::std::string* entity_name) {
  if (entity_name != NULL) {
    set_has_entity_name();
  } else {
    clear_has_entity_name();
  }
  entity_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_name);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.IMU.entity_name)
}

// required .Indriya.Core.Msgs.Quaternion orientation = 3;
 bool IMU::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void IMU::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
 void IMU::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
 void IMU::clear_orientation() {
  if (orientation_ != NULL) orientation_->::Indriya::Core::Msgs::Quaternion::Clear();
  clear_has_orientation();
}
 const ::Indriya::Core::Msgs::Quaternion& IMU::orientation() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.IMU.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
 ::Indriya::Core::Msgs::Quaternion* IMU::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::Indriya::Core::Msgs::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.IMU.orientation)
  return orientation_;
}
 ::Indriya::Core::Msgs::Quaternion* IMU::release_orientation() {
  clear_has_orientation();
  ::Indriya::Core::Msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
 void IMU::set_allocated_orientation(::Indriya::Core::Msgs::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.IMU.orientation)
}

// required .Indriya.Core.Msgs.Vector3d angular_velocity = 4;
 bool IMU::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void IMU::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
 void IMU::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
 void IMU::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::Indriya::Core::Msgs::Vector3d::Clear();
  clear_has_angular_velocity();
}
 const ::Indriya::Core::Msgs::Vector3d& IMU::angular_velocity() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.IMU.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
 ::Indriya::Core::Msgs::Vector3d* IMU::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::Indriya::Core::Msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.IMU.angular_velocity)
  return angular_velocity_;
}
 ::Indriya::Core::Msgs::Vector3d* IMU::release_angular_velocity() {
  clear_has_angular_velocity();
  ::Indriya::Core::Msgs::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
 void IMU::set_allocated_angular_velocity(::Indriya::Core::Msgs::Vector3d* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.IMU.angular_velocity)
}

// required .Indriya.Core.Msgs.Vector3d linear_acceleration = 5;
 bool IMU::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void IMU::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000010u;
}
 void IMU::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
 void IMU::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::Indriya::Core::Msgs::Vector3d::Clear();
  clear_has_linear_acceleration();
}
 const ::Indriya::Core::Msgs::Vector3d& IMU::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.IMU.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_ : *default_instance_->linear_acceleration_;
}
 ::Indriya::Core::Msgs::Vector3d* IMU::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::Indriya::Core::Msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.IMU.linear_acceleration)
  return linear_acceleration_;
}
 ::Indriya::Core::Msgs::Vector3d* IMU::release_linear_acceleration() {
  clear_has_linear_acceleration();
  ::Indriya::Core::Msgs::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
 void IMU::set_allocated_linear_acceleration(::Indriya::Core::Msgs::Vector3d* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.IMU.linear_acceleration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.IMU", IMU)
// @@protoc_insertion_point(global_scope)
