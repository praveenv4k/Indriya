// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: human.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "human.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Human_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Human_reflection_ = NULL;
const ::google::protobuf::Descriptor* Humans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Humans_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_human_2eproto() {
  protobuf_AddDesc_human_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "human.proto");
  GOOGLE_CHECK(file != NULL);
  Human_descriptor_ = file->message_type(0);
  static const int Human_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Human, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Human, tracked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Human, torso_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Human, head_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Human, orientation_),
  };
  Human_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Human_descriptor_,
      Human::default_instance_,
      Human_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Human, _has_bits_[0]),
      -1,
      -1,
      sizeof(Human),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Human, _internal_metadata_),
      -1);
  Humans_descriptor_ = file->message_type(1);
  static const int Humans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Humans, human_),
  };
  Humans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Humans_descriptor_,
      Humans::default_instance_,
      Humans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Humans, _has_bits_[0]),
      -1,
      -1,
      sizeof(Humans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Humans, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_human_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Human_descriptor_, &Human::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Humans_descriptor_, &Humans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_human_2eproto() {
  delete Human::default_instance_;
  delete Human_reflection_;
  delete Humans::default_instance_;
  delete Humans_reflection_;
}

void protobuf_AddDesc_human_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::experimot::msgs::protobuf_AddDesc_quaternion_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013human.proto\022\016experimot.msgs\032\016vector3d."
    "proto\032\020quaternion.proto\"\270\001\n\005Human\022\n\n\002id\030"
    "\001 \002(\005\022\017\n\007tracked\030\002 \002(\010\0220\n\016torso_position"
    "\030\003 \002(\0132\030.experimot.msgs.Vector3d\022/\n\rhead"
    "_position\030\004 \002(\0132\030.experimot.msgs.Vector3"
    "d\022/\n\013orientation\030\005 \002(\0132\032.experimot.msgs."
    "Quaternion\".\n\006Humans\022$\n\005human\030\001 \003(\0132\025.ex"
    "perimot.msgs.Human", 298);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "human.proto", &protobuf_RegisterTypes);
  Human::default_instance_ = new Human();
  Humans::default_instance_ = new Humans();
  Human::default_instance_->InitAsDefaultInstance();
  Humans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_human_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_human_2eproto {
  StaticDescriptorInitializer_human_2eproto() {
    protobuf_AddDesc_human_2eproto();
  }
} static_descriptor_initializer_human_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Human::kIdFieldNumber;
const int Human::kTrackedFieldNumber;
const int Human::kTorsoPositionFieldNumber;
const int Human::kHeadPositionFieldNumber;
const int Human::kOrientationFieldNumber;
#endif  // !_MSC_VER

Human::Human()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Human)
}

void Human::InitAsDefaultInstance() {
  torso_position_ = const_cast< ::experimot::msgs::Vector3d*>(&::experimot::msgs::Vector3d::default_instance());
  head_position_ = const_cast< ::experimot::msgs::Vector3d*>(&::experimot::msgs::Vector3d::default_instance());
  orientation_ = const_cast< ::experimot::msgs::Quaternion*>(&::experimot::msgs::Quaternion::default_instance());
}

Human::Human(const Human& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Human)
}

void Human::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  tracked_ = false;
  torso_position_ = NULL;
  head_position_ = NULL;
  orientation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Human::~Human() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Human)
  SharedDtor();
}

void Human::SharedDtor() {
  if (this != default_instance_) {
    delete torso_position_;
    delete head_position_;
    delete orientation_;
  }
}

void Human::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Human::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Human_descriptor_;
}

const Human& Human::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_human_2eproto();
  return *default_instance_;
}

Human* Human::default_instance_ = NULL;

Human* Human::New(::google::protobuf::Arena* arena) const {
  Human* n = new Human;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Human::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Human*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, tracked_);
    if (has_torso_position()) {
      if (torso_position_ != NULL) torso_position_->::experimot::msgs::Vector3d::Clear();
    }
    if (has_head_position()) {
      if (head_position_ != NULL) head_position_->::experimot::msgs::Vector3d::Clear();
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::experimot::msgs::Quaternion::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Human::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Human)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tracked;
        break;
      }

      // required bool tracked = 2;
      case 2: {
        if (tag == 16) {
         parse_tracked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tracked_)));
          set_has_tracked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_torso_position;
        break;
      }

      // required .experimot.msgs.Vector3d torso_position = 3;
      case 3: {
        if (tag == 26) {
         parse_torso_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torso_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_head_position;
        break;
      }

      // required .experimot.msgs.Vector3d head_position = 4;
      case 4: {
        if (tag == 34) {
         parse_head_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_orientation;
        break;
      }

      // required .experimot.msgs.Quaternion orientation = 5;
      case 5: {
        if (tag == 42) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Human)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Human)
  return false;
#undef DO_
}

void Human::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Human)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool tracked = 2;
  if (has_tracked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->tracked(), output);
  }

  // required .experimot.msgs.Vector3d torso_position = 3;
  if (has_torso_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->torso_position_, output);
  }

  // required .experimot.msgs.Vector3d head_position = 4;
  if (has_head_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->head_position_, output);
  }

  // required .experimot.msgs.Quaternion orientation = 5;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->orientation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Human)
}

::google::protobuf::uint8* Human::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Human)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bool tracked = 2;
  if (has_tracked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->tracked(), target);
  }

  // required .experimot.msgs.Vector3d torso_position = 3;
  if (has_torso_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->torso_position_, target);
  }

  // required .experimot.msgs.Vector3d head_position = 4;
  if (has_head_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->head_position_, target);
  }

  // required .experimot.msgs.Quaternion orientation = 5;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->orientation_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Human)
  return target;
}

int Human::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_tracked()) {
    // required bool tracked = 2;
    total_size += 1 + 1;
  }

  if (has_torso_position()) {
    // required .experimot.msgs.Vector3d torso_position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->torso_position_);
  }

  if (has_head_position()) {
    // required .experimot.msgs.Vector3d head_position = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_position_);
  }

  if (has_orientation()) {
    // required .experimot.msgs.Quaternion orientation = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  return total_size;
}
int Human::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required bool tracked = 2;
    total_size += 1 + 1;

    // required .experimot.msgs.Vector3d torso_position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->torso_position_);

    // required .experimot.msgs.Vector3d head_position = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_position_);

    // required .experimot.msgs.Quaternion orientation = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Human::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Human* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Human*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Human::MergeFrom(const Human& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tracked()) {
      set_tracked(from.tracked());
    }
    if (from.has_torso_position()) {
      mutable_torso_position()->::experimot::msgs::Vector3d::MergeFrom(from.torso_position());
    }
    if (from.has_head_position()) {
      mutable_head_position()->::experimot::msgs::Vector3d::MergeFrom(from.head_position());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::experimot::msgs::Quaternion::MergeFrom(from.orientation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Human::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Human::CopyFrom(const Human& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Human::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_torso_position()) {
    if (!this->torso_position_->IsInitialized()) return false;
  }
  if (has_head_position()) {
    if (!this->head_position_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  return true;
}

void Human::Swap(Human* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Human::InternalSwap(Human* other) {
  std::swap(id_, other->id_);
  std::swap(tracked_, other->tracked_);
  std::swap(torso_position_, other->torso_position_);
  std::swap(head_position_, other->head_position_);
  std::swap(orientation_, other->orientation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Human::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Human_descriptor_;
  metadata.reflection = Human_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Human

// required int32 id = 1;
 bool Human::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Human::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void Human::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Human::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 Human::id() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Human.id)
  return id_;
}
 void Human::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Human.id)
}

// required bool tracked = 2;
 bool Human::has_tracked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Human::set_has_tracked() {
  _has_bits_[0] |= 0x00000002u;
}
 void Human::clear_has_tracked() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Human::clear_tracked() {
  tracked_ = false;
  clear_has_tracked();
}
 bool Human::tracked() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Human.tracked)
  return tracked_;
}
 void Human::set_tracked(bool value) {
  set_has_tracked();
  tracked_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Human.tracked)
}

// required .experimot.msgs.Vector3d torso_position = 3;
 bool Human::has_torso_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Human::set_has_torso_position() {
  _has_bits_[0] |= 0x00000004u;
}
 void Human::clear_has_torso_position() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Human::clear_torso_position() {
  if (torso_position_ != NULL) torso_position_->::experimot::msgs::Vector3d::Clear();
  clear_has_torso_position();
}
 const ::experimot::msgs::Vector3d& Human::torso_position() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Human.torso_position)
  return torso_position_ != NULL ? *torso_position_ : *default_instance_->torso_position_;
}
 ::experimot::msgs::Vector3d* Human::mutable_torso_position() {
  set_has_torso_position();
  if (torso_position_ == NULL) {
    torso_position_ = new ::experimot::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Human.torso_position)
  return torso_position_;
}
 ::experimot::msgs::Vector3d* Human::release_torso_position() {
  clear_has_torso_position();
  ::experimot::msgs::Vector3d* temp = torso_position_;
  torso_position_ = NULL;
  return temp;
}
 void Human::set_allocated_torso_position(::experimot::msgs::Vector3d* torso_position) {
  delete torso_position_;
  torso_position_ = torso_position;
  if (torso_position) {
    set_has_torso_position();
  } else {
    clear_has_torso_position();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Human.torso_position)
}

// required .experimot.msgs.Vector3d head_position = 4;
 bool Human::has_head_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Human::set_has_head_position() {
  _has_bits_[0] |= 0x00000008u;
}
 void Human::clear_has_head_position() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Human::clear_head_position() {
  if (head_position_ != NULL) head_position_->::experimot::msgs::Vector3d::Clear();
  clear_has_head_position();
}
 const ::experimot::msgs::Vector3d& Human::head_position() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Human.head_position)
  return head_position_ != NULL ? *head_position_ : *default_instance_->head_position_;
}
 ::experimot::msgs::Vector3d* Human::mutable_head_position() {
  set_has_head_position();
  if (head_position_ == NULL) {
    head_position_ = new ::experimot::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Human.head_position)
  return head_position_;
}
 ::experimot::msgs::Vector3d* Human::release_head_position() {
  clear_has_head_position();
  ::experimot::msgs::Vector3d* temp = head_position_;
  head_position_ = NULL;
  return temp;
}
 void Human::set_allocated_head_position(::experimot::msgs::Vector3d* head_position) {
  delete head_position_;
  head_position_ = head_position;
  if (head_position) {
    set_has_head_position();
  } else {
    clear_has_head_position();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Human.head_position)
}

// required .experimot.msgs.Quaternion orientation = 5;
 bool Human::has_orientation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Human::set_has_orientation() {
  _has_bits_[0] |= 0x00000010u;
}
 void Human::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Human::clear_orientation() {
  if (orientation_ != NULL) orientation_->::experimot::msgs::Quaternion::Clear();
  clear_has_orientation();
}
 const ::experimot::msgs::Quaternion& Human::orientation() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Human.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
 ::experimot::msgs::Quaternion* Human::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::experimot::msgs::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Human.orientation)
  return orientation_;
}
 ::experimot::msgs::Quaternion* Human::release_orientation() {
  clear_has_orientation();
  ::experimot::msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
 void Human::set_allocated_orientation(::experimot::msgs::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Human.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Humans::kHumanFieldNumber;
#endif  // !_MSC_VER

Humans::Humans()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Humans)
}

void Humans::InitAsDefaultInstance() {
}

Humans::Humans(const Humans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Humans)
}

void Humans::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Humans::~Humans() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Humans)
  SharedDtor();
}

void Humans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Humans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Humans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Humans_descriptor_;
}

const Humans& Humans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_human_2eproto();
  return *default_instance_;
}

Humans* Humans::default_instance_ = NULL;

Humans* Humans::New(::google::protobuf::Arena* arena) const {
  Humans* n = new Humans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Humans::Clear() {
  human_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Humans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Humans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .experimot.msgs.Human human = 1;
      case 1: {
        if (tag == 10) {
         parse_human:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_human()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_human;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Humans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Humans)
  return false;
#undef DO_
}

void Humans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Humans)
  // repeated .experimot.msgs.Human human = 1;
  for (unsigned int i = 0, n = this->human_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->human(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Humans)
}

::google::protobuf::uint8* Humans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Humans)
  // repeated .experimot.msgs.Human human = 1;
  for (unsigned int i = 0, n = this->human_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->human(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Humans)
  return target;
}

int Humans::ByteSize() const {
  int total_size = 0;

  // repeated .experimot.msgs.Human human = 1;
  total_size += 1 * this->human_size();
  for (int i = 0; i < this->human_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->human(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Humans::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Humans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Humans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Humans::MergeFrom(const Humans& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  human_.MergeFrom(from.human_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Humans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Humans::CopyFrom(const Humans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Humans::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->human())) return false;
  return true;
}

void Humans::Swap(Humans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Humans::InternalSwap(Humans* other) {
  human_.UnsafeArenaSwap(&other->human_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Humans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Humans_descriptor_;
  metadata.reflection = Humans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Humans

// repeated .experimot.msgs.Human human = 1;
 int Humans::human_size() const {
  return human_.size();
}
 void Humans::clear_human() {
  human_.Clear();
}
 const ::experimot::msgs::Human& Humans::human(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Humans.human)
  return human_.Get(index);
}
 ::experimot::msgs::Human* Humans::mutable_human(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Humans.human)
  return human_.Mutable(index);
}
 ::experimot::msgs::Human* Humans::add_human() {
  // @@protoc_insertion_point(field_add:experimot.msgs.Humans.human)
  return human_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Human >&
Humans::human() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Humans.human)
  return human_;
}
 ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Human >*
Humans::mutable_human() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Humans.human)
  return &human_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.Human", Human)
// @@protoc_insertion_point(global_scope)
