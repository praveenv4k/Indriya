// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plugin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* Plugin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_plugin_2eproto() {
  protobuf_AddDesc_plugin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "plugin.proto");
  GOOGLE_CHECK(file != NULL);
  Plugin_descriptor_ = file->message_type(0);
  static const int Plugin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin, innerxml_),
  };
  Plugin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Plugin_descriptor_,
      Plugin::default_instance_,
      Plugin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin, _has_bits_[0]),
      -1,
      -1,
      sizeof(Plugin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_plugin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Plugin_descriptor_, &Plugin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_plugin_2eproto() {
  delete Plugin::default_instance_;
  delete Plugin_reflection_;
}

void protobuf_AddDesc_plugin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014plugin.proto\022\021Indriya.Core.Msgs\"<\n\006Plu"
    "gin\022\014\n\004name\030\001 \002(\t\022\020\n\010filename\030\002 \002(\t\022\022\n\010i"
    "nnerxml\030\003 \001(\t:\000", 95);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plugin.proto", &protobuf_RegisterTypes);
  Plugin::default_instance_ = new Plugin();
  Plugin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_plugin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_plugin_2eproto {
  StaticDescriptorInitializer_plugin_2eproto() {
    protobuf_AddDesc_plugin_2eproto();
  }
} static_descriptor_initializer_plugin_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Plugin::kNameFieldNumber;
const int Plugin::kFilenameFieldNumber;
const int Plugin::kInnerxmlFieldNumber;
#endif  // !_MSC_VER

Plugin::Plugin()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.Plugin)
}

void Plugin::InitAsDefaultInstance() {
}

Plugin::Plugin(const Plugin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.Plugin)
}

void Plugin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  innerxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin::~Plugin() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.Plugin)
  SharedDtor();
}

void Plugin::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  innerxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Plugin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_descriptor_;
}

const Plugin& Plugin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

Plugin* Plugin::default_instance_ = NULL;

Plugin* Plugin::New(::google::protobuf::Arena* arena) const {
  Plugin* n = new Plugin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Plugin::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_filename()) {
      filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_innerxml()) {
      innerxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Plugin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.Plugin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Indriya.Core.Msgs.Plugin.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // required string filename = 2;
      case 2: {
        if (tag == 18) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Indriya.Core.Msgs.Plugin.filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_innerxml;
        break;
      }

      // optional string innerxml = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_innerxml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_innerxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->innerxml().data(), this->innerxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Indriya.Core.Msgs.Plugin.innerxml");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.Plugin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.Plugin)
  return false;
#undef DO_
}

void Plugin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.Plugin)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Plugin.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Plugin.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string innerxml = 3 [default = ""];
  if (has_innerxml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->innerxml().data(), this->innerxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Plugin.innerxml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->innerxml(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.Plugin)
}

::google::protobuf::uint8* Plugin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.Plugin)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Plugin.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Plugin.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string innerxml = 3 [default = ""];
  if (has_innerxml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->innerxml().data(), this->innerxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.Plugin.innerxml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->innerxml(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.Plugin)
  return target;
}

int Plugin::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_filename()) {
    // required string filename = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  return total_size;
}
int Plugin::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string filename = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string innerxml = 3 [default = ""];
  if (has_innerxml()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->innerxml());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Plugin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin::MergeFrom(const Plugin& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (from.has_innerxml()) {
      set_has_innerxml();
      innerxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.innerxml_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Plugin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin::CopyFrom(const Plugin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Plugin::Swap(Plugin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Plugin::InternalSwap(Plugin* other) {
  name_.Swap(&other->name_);
  filename_.Swap(&other->filename_);
  innerxml_.Swap(&other->innerxml_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Plugin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_descriptor_;
  metadata.reflection = Plugin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Plugin

// required string name = 1;
 bool Plugin::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Plugin::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void Plugin::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Plugin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Plugin::name() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Plugin.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Plugin::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Plugin.name)
}
 void Plugin::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.Plugin.name)
}
 void Plugin::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.Plugin.name)
}
 ::std::string* Plugin::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Plugin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Plugin::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Plugin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Plugin.name)
}

// required string filename = 2;
 bool Plugin::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Plugin::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
 void Plugin::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Plugin::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& Plugin::filename() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Plugin.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Plugin::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Plugin.filename)
}
 void Plugin::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.Plugin.filename)
}
 void Plugin::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.Plugin.filename)
}
 ::std::string* Plugin::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Plugin.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Plugin::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Plugin::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Plugin.filename)
}

// optional string innerxml = 3 [default = ""];
 bool Plugin::has_innerxml() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Plugin::set_has_innerxml() {
  _has_bits_[0] |= 0x00000004u;
}
 void Plugin::clear_has_innerxml() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Plugin::clear_innerxml() {
  innerxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_innerxml();
}
 const ::std::string& Plugin::innerxml() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Plugin.innerxml)
  return innerxml_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Plugin::set_innerxml(const ::std::string& value) {
  set_has_innerxml();
  innerxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Plugin.innerxml)
}
 void Plugin::set_innerxml(const char* value) {
  set_has_innerxml();
  innerxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.Plugin.innerxml)
}
 void Plugin::set_innerxml(const char* value, size_t size) {
  set_has_innerxml();
  innerxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.Plugin.innerxml)
}
 ::std::string* Plugin::mutable_innerxml() {
  set_has_innerxml();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Plugin.innerxml)
  return innerxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Plugin::release_innerxml() {
  clear_has_innerxml();
  return innerxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Plugin::set_allocated_innerxml(::std::string* innerxml) {
  if (innerxml != NULL) {
    set_has_innerxml();
  } else {
    clear_has_innerxml();
  }
  innerxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), innerxml);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Plugin.innerxml)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.Plugin", Plugin)
// @@protoc_insertion_point(global_scope)
