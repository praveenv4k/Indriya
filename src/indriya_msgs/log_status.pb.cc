// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* LogStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogStatus_LogFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogStatus_LogFile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogStatus_LogFile_Units_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_5fstatus_2eproto() {
  protobuf_AddDesc_log_5fstatus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log_status.proto");
  GOOGLE_CHECK(file != NULL);
  LogStatus_descriptor_ = file->message_type(0);
  static const int LogStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus, sim_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus, log_file_),
  };
  LogStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogStatus_descriptor_,
      LogStatus::default_instance_,
      LogStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus, _internal_metadata_),
      -1);
  LogStatus_LogFile_descriptor_ = LogStatus_descriptor_->nested_type(0);
  static const int LogStatus_LogFile_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, base_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, full_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, size_units_),
  };
  LogStatus_LogFile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogStatus_LogFile_descriptor_,
      LogStatus_LogFile::default_instance_,
      LogStatus_LogFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogStatus_LogFile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, _internal_metadata_),
      -1);
  LogStatus_LogFile_Units_descriptor_ = LogStatus_LogFile_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_5fstatus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogStatus_descriptor_, &LogStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogStatus_LogFile_descriptor_, &LogStatus_LogFile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_5fstatus_2eproto() {
  delete LogStatus::default_instance_;
  delete LogStatus_reflection_;
  delete LogStatus_LogFile::default_instance_;
  delete LogStatus_LogFile_reflection_;
}

void protobuf_AddDesc_log_5fstatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020log_status.proto\022\016experimot.msgs\032\ntime"
    ".proto\"\255\002\n\tLogStatus\022&\n\010sim_time\030\001 \001(\0132\024"
    ".experimot.msgs.Time\0223\n\010log_file\030\002 \001(\0132!"
    ".experimot.msgs.LogStatus.LogFile\032\302\001\n\007Lo"
    "gFile\022\013\n\003uri\030\001 \001(\t\022\021\n\tbase_path\030\002 \001(\t\022\021\n"
    "\tfull_path\030\003 \001(\t\022\014\n\004size\030\004 \001(\002\022;\n\nsize_u"
    "nits\030\005 \001(\0162\'.experimot.msgs.LogStatus.Lo"
    "gFile.Units\"9\n\005Units\022\t\n\005BYTES\020\001\022\013\n\007K_BYT"
    "ES\020\002\022\013\n\007M_BYTES\020\003\022\013\n\007G_BYTES\020\004", 350);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log_status.proto", &protobuf_RegisterTypes);
  LogStatus::default_instance_ = new LogStatus();
  LogStatus_LogFile::default_instance_ = new LogStatus_LogFile();
  LogStatus::default_instance_->InitAsDefaultInstance();
  LogStatus_LogFile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_5fstatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_5fstatus_2eproto {
  StaticDescriptorInitializer_log_5fstatus_2eproto() {
    protobuf_AddDesc_log_5fstatus_2eproto();
  }
} static_descriptor_initializer_log_5fstatus_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogStatus_LogFile_Units_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogStatus_LogFile_Units_descriptor_;
}
bool LogStatus_LogFile_Units_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogStatus_LogFile_Units LogStatus_LogFile::BYTES;
const LogStatus_LogFile_Units LogStatus_LogFile::K_BYTES;
const LogStatus_LogFile_Units LogStatus_LogFile::M_BYTES;
const LogStatus_LogFile_Units LogStatus_LogFile::G_BYTES;
const LogStatus_LogFile_Units LogStatus_LogFile::Units_MIN;
const LogStatus_LogFile_Units LogStatus_LogFile::Units_MAX;
const int LogStatus_LogFile::Units_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogStatus_LogFile::kUriFieldNumber;
const int LogStatus_LogFile::kBasePathFieldNumber;
const int LogStatus_LogFile::kFullPathFieldNumber;
const int LogStatus_LogFile::kSizeFieldNumber;
const int LogStatus_LogFile::kSizeUnitsFieldNumber;
#endif  // !_MSC_VER

LogStatus_LogFile::LogStatus_LogFile()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.LogStatus.LogFile)
}

void LogStatus_LogFile::InitAsDefaultInstance() {
}

LogStatus_LogFile::LogStatus_LogFile(const LogStatus_LogFile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.LogStatus.LogFile)
}

void LogStatus_LogFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  size_units_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogStatus_LogFile::~LogStatus_LogFile() {
  // @@protoc_insertion_point(destructor:experimot.msgs.LogStatus.LogFile)
  SharedDtor();
}

void LogStatus_LogFile::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogStatus_LogFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogStatus_LogFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogStatus_LogFile_descriptor_;
}

const LogStatus_LogFile& LogStatus_LogFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fstatus_2eproto();
  return *default_instance_;
}

LogStatus_LogFile* LogStatus_LogFile::default_instance_ = NULL;

LogStatus_LogFile* LogStatus_LogFile::New(::google::protobuf::Arena* arena) const {
  LogStatus_LogFile* n = new LogStatus_LogFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogStatus_LogFile::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_base_path()) {
      base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_full_path()) {
      full_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    size_ = 0;
    size_units_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogStatus_LogFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.LogStatus.LogFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.LogStatus.LogFile.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base_path;
        break;
      }

      // optional string base_path = 2;
      case 2: {
        if (tag == 18) {
         parse_base_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->base_path().data(), this->base_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.LogStatus.LogFile.base_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_full_path;
        break;
      }

      // optional string full_path = 3;
      case 3: {
        if (tag == 26) {
         parse_full_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->full_path().data(), this->full_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.LogStatus.LogFile.full_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_size;
        break;
      }

      // optional float size = 4;
      case 4: {
        if (tag == 37) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_size_units;
        break;
      }

      // optional .experimot.msgs.LogStatus.LogFile.Units size_units = 5;
      case 5: {
        if (tag == 40) {
         parse_size_units:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::experimot::msgs::LogStatus_LogFile_Units_IsValid(value)) {
            set_size_units(static_cast< ::experimot::msgs::LogStatus_LogFile_Units >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.LogStatus.LogFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.LogStatus.LogFile)
  return false;
#undef DO_
}

void LogStatus_LogFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.LogStatus.LogFile)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.LogStatus.LogFile.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string base_path = 2;
  if (has_base_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_path().data(), this->base_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.LogStatus.LogFile.base_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->base_path(), output);
  }

  // optional string full_path = 3;
  if (has_full_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.LogStatus.LogFile.full_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->full_path(), output);
  }

  // optional float size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->size(), output);
  }

  // optional .experimot.msgs.LogStatus.LogFile.Units size_units = 5;
  if (has_size_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->size_units(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.LogStatus.LogFile)
}

::google::protobuf::uint8* LogStatus_LogFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.LogStatus.LogFile)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.LogStatus.LogFile.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string base_path = 2;
  if (has_base_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_path().data(), this->base_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.LogStatus.LogFile.base_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->base_path(), target);
  }

  // optional string full_path = 3;
  if (has_full_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.LogStatus.LogFile.full_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->full_path(), target);
  }

  // optional float size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->size(), target);
  }

  // optional .experimot.msgs.LogStatus.LogFile.Units size_units = 5;
  if (has_size_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->size_units(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.LogStatus.LogFile)
  return target;
}

int LogStatus_LogFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string base_path = 2;
    if (has_base_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_path());
    }

    // optional string full_path = 3;
    if (has_full_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_path());
    }

    // optional float size = 4;
    if (has_size()) {
      total_size += 1 + 4;
    }

    // optional .experimot.msgs.LogStatus.LogFile.Units size_units = 5;
    if (has_size_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->size_units());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogStatus_LogFile::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogStatus_LogFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogStatus_LogFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogStatus_LogFile::MergeFrom(const LogStatus_LogFile& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_base_path()) {
      set_has_base_path();
      base_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_path_);
    }
    if (from.has_full_path()) {
      set_has_full_path();
      full_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_path_);
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_size_units()) {
      set_size_units(from.size_units());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogStatus_LogFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStatus_LogFile::CopyFrom(const LogStatus_LogFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStatus_LogFile::IsInitialized() const {

  return true;
}

void LogStatus_LogFile::Swap(LogStatus_LogFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogStatus_LogFile::InternalSwap(LogStatus_LogFile* other) {
  uri_.Swap(&other->uri_);
  base_path_.Swap(&other->base_path_);
  full_path_.Swap(&other->full_path_);
  std::swap(size_, other->size_);
  std::swap(size_units_, other->size_units_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogStatus_LogFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogStatus_LogFile_descriptor_;
  metadata.reflection = LogStatus_LogFile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LogStatus::kSimTimeFieldNumber;
const int LogStatus::kLogFileFieldNumber;
#endif  // !_MSC_VER

LogStatus::LogStatus()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.LogStatus)
}

void LogStatus::InitAsDefaultInstance() {
  sim_time_ = const_cast< ::experimot::msgs::Time*>(&::experimot::msgs::Time::default_instance());
  log_file_ = const_cast< ::experimot::msgs::LogStatus_LogFile*>(&::experimot::msgs::LogStatus_LogFile::default_instance());
}

LogStatus::LogStatus(const LogStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.LogStatus)
}

void LogStatus::SharedCtor() {
  _cached_size_ = 0;
  sim_time_ = NULL;
  log_file_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogStatus::~LogStatus() {
  // @@protoc_insertion_point(destructor:experimot.msgs.LogStatus)
  SharedDtor();
}

void LogStatus::SharedDtor() {
  if (this != default_instance_) {
    delete sim_time_;
    delete log_file_;
  }
}

void LogStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogStatus_descriptor_;
}

const LogStatus& LogStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fstatus_2eproto();
  return *default_instance_;
}

LogStatus* LogStatus::default_instance_ = NULL;

LogStatus* LogStatus::New(::google::protobuf::Arena* arena) const {
  LogStatus* n = new LogStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogStatus::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_sim_time()) {
      if (sim_time_ != NULL) sim_time_->::experimot::msgs::Time::Clear();
    }
    if (has_log_file()) {
      if (log_file_ != NULL) log_file_->::experimot::msgs::LogStatus_LogFile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.LogStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .experimot.msgs.Time sim_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sim_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_log_file;
        break;
      }

      // optional .experimot.msgs.LogStatus.LogFile log_file = 2;
      case 2: {
        if (tag == 18) {
         parse_log_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.LogStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.LogStatus)
  return false;
#undef DO_
}

void LogStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.LogStatus)
  // optional .experimot.msgs.Time sim_time = 1;
  if (has_sim_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sim_time_, output);
  }

  // optional .experimot.msgs.LogStatus.LogFile log_file = 2;
  if (has_log_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->log_file_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.LogStatus)
}

::google::protobuf::uint8* LogStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.LogStatus)
  // optional .experimot.msgs.Time sim_time = 1;
  if (has_sim_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->sim_time_, target);
  }

  // optional .experimot.msgs.LogStatus.LogFile log_file = 2;
  if (has_log_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->log_file_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.LogStatus)
  return target;
}

int LogStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional .experimot.msgs.Time sim_time = 1;
    if (has_sim_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sim_time_);
    }

    // optional .experimot.msgs.LogStatus.LogFile log_file = 2;
    if (has_log_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->log_file_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogStatus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogStatus::MergeFrom(const LogStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sim_time()) {
      mutable_sim_time()->::experimot::msgs::Time::MergeFrom(from.sim_time());
    }
    if (from.has_log_file()) {
      mutable_log_file()->::experimot::msgs::LogStatus_LogFile::MergeFrom(from.log_file());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStatus::CopyFrom(const LogStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStatus::IsInitialized() const {

  if (has_sim_time()) {
    if (!this->sim_time_->IsInitialized()) return false;
  }
  return true;
}

void LogStatus::Swap(LogStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogStatus::InternalSwap(LogStatus* other) {
  std::swap(sim_time_, other->sim_time_);
  std::swap(log_file_, other->log_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogStatus_descriptor_;
  metadata.reflection = LogStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogStatus_LogFile

// optional string uri = 1;
 bool LogStatus_LogFile::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void LogStatus_LogFile::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
 void LogStatus_LogFile::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
 void LogStatus_LogFile::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& LogStatus_LogFile::uri() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.LogStatus.LogFile.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogStatus_LogFile::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.LogStatus.LogFile.uri)
}
 void LogStatus_LogFile::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.LogStatus.LogFile.uri)
}
 void LogStatus_LogFile::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.LogStatus.LogFile.uri)
}
 ::std::string* LogStatus_LogFile::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.LogStatus.LogFile.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogStatus_LogFile::release_uri() {
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogStatus_LogFile::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.LogStatus.LogFile.uri)
}

// optional string base_path = 2;
 bool LogStatus_LogFile::has_base_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void LogStatus_LogFile::set_has_base_path() {
  _has_bits_[0] |= 0x00000002u;
}
 void LogStatus_LogFile::clear_has_base_path() {
  _has_bits_[0] &= ~0x00000002u;
}
 void LogStatus_LogFile::clear_base_path() {
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base_path();
}
 const ::std::string& LogStatus_LogFile::base_path() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.LogStatus.LogFile.base_path)
  return base_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogStatus_LogFile::set_base_path(const ::std::string& value) {
  set_has_base_path();
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.LogStatus.LogFile.base_path)
}
 void LogStatus_LogFile::set_base_path(const char* value) {
  set_has_base_path();
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.LogStatus.LogFile.base_path)
}
 void LogStatus_LogFile::set_base_path(const char* value, size_t size) {
  set_has_base_path();
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.LogStatus.LogFile.base_path)
}
 ::std::string* LogStatus_LogFile::mutable_base_path() {
  set_has_base_path();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.LogStatus.LogFile.base_path)
  return base_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogStatus_LogFile::release_base_path() {
  clear_has_base_path();
  return base_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogStatus_LogFile::set_allocated_base_path(::std::string* base_path) {
  if (base_path != NULL) {
    set_has_base_path();
  } else {
    clear_has_base_path();
  }
  base_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_path);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.LogStatus.LogFile.base_path)
}

// optional string full_path = 3;
 bool LogStatus_LogFile::has_full_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void LogStatus_LogFile::set_has_full_path() {
  _has_bits_[0] |= 0x00000004u;
}
 void LogStatus_LogFile::clear_has_full_path() {
  _has_bits_[0] &= ~0x00000004u;
}
 void LogStatus_LogFile::clear_full_path() {
  full_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_path();
}
 const ::std::string& LogStatus_LogFile::full_path() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.LogStatus.LogFile.full_path)
  return full_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogStatus_LogFile::set_full_path(const ::std::string& value) {
  set_has_full_path();
  full_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.LogStatus.LogFile.full_path)
}
 void LogStatus_LogFile::set_full_path(const char* value) {
  set_has_full_path();
  full_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.LogStatus.LogFile.full_path)
}
 void LogStatus_LogFile::set_full_path(const char* value, size_t size) {
  set_has_full_path();
  full_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.LogStatus.LogFile.full_path)
}
 ::std::string* LogStatus_LogFile::mutable_full_path() {
  set_has_full_path();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.LogStatus.LogFile.full_path)
  return full_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogStatus_LogFile::release_full_path() {
  clear_has_full_path();
  return full_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogStatus_LogFile::set_allocated_full_path(::std::string* full_path) {
  if (full_path != NULL) {
    set_has_full_path();
  } else {
    clear_has_full_path();
  }
  full_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_path);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.LogStatus.LogFile.full_path)
}

// optional float size = 4;
 bool LogStatus_LogFile::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void LogStatus_LogFile::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
 void LogStatus_LogFile::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
 void LogStatus_LogFile::clear_size() {
  size_ = 0;
  clear_has_size();
}
 float LogStatus_LogFile::size() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.LogStatus.LogFile.size)
  return size_;
}
 void LogStatus_LogFile::set_size(float value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.LogStatus.LogFile.size)
}

// optional .experimot.msgs.LogStatus.LogFile.Units size_units = 5;
 bool LogStatus_LogFile::has_size_units() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void LogStatus_LogFile::set_has_size_units() {
  _has_bits_[0] |= 0x00000010u;
}
 void LogStatus_LogFile::clear_has_size_units() {
  _has_bits_[0] &= ~0x00000010u;
}
 void LogStatus_LogFile::clear_size_units() {
  size_units_ = 1;
  clear_has_size_units();
}
 ::experimot::msgs::LogStatus_LogFile_Units LogStatus_LogFile::size_units() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.LogStatus.LogFile.size_units)
  return static_cast< ::experimot::msgs::LogStatus_LogFile_Units >(size_units_);
}
 void LogStatus_LogFile::set_size_units(::experimot::msgs::LogStatus_LogFile_Units value) {
  assert(::experimot::msgs::LogStatus_LogFile_Units_IsValid(value));
  set_has_size_units();
  size_units_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.LogStatus.LogFile.size_units)
}

// -------------------------------------------------------------------

// LogStatus

// optional .experimot.msgs.Time sim_time = 1;
 bool LogStatus::has_sim_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void LogStatus::set_has_sim_time() {
  _has_bits_[0] |= 0x00000001u;
}
 void LogStatus::clear_has_sim_time() {
  _has_bits_[0] &= ~0x00000001u;
}
 void LogStatus::clear_sim_time() {
  if (sim_time_ != NULL) sim_time_->::experimot::msgs::Time::Clear();
  clear_has_sim_time();
}
 const ::experimot::msgs::Time& LogStatus::sim_time() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.LogStatus.sim_time)
  return sim_time_ != NULL ? *sim_time_ : *default_instance_->sim_time_;
}
 ::experimot::msgs::Time* LogStatus::mutable_sim_time() {
  set_has_sim_time();
  if (sim_time_ == NULL) {
    sim_time_ = new ::experimot::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.LogStatus.sim_time)
  return sim_time_;
}
 ::experimot::msgs::Time* LogStatus::release_sim_time() {
  clear_has_sim_time();
  ::experimot::msgs::Time* temp = sim_time_;
  sim_time_ = NULL;
  return temp;
}
 void LogStatus::set_allocated_sim_time(::experimot::msgs::Time* sim_time) {
  delete sim_time_;
  sim_time_ = sim_time;
  if (sim_time) {
    set_has_sim_time();
  } else {
    clear_has_sim_time();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.LogStatus.sim_time)
}

// optional .experimot.msgs.LogStatus.LogFile log_file = 2;
 bool LogStatus::has_log_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void LogStatus::set_has_log_file() {
  _has_bits_[0] |= 0x00000002u;
}
 void LogStatus::clear_has_log_file() {
  _has_bits_[0] &= ~0x00000002u;
}
 void LogStatus::clear_log_file() {
  if (log_file_ != NULL) log_file_->::experimot::msgs::LogStatus_LogFile::Clear();
  clear_has_log_file();
}
 const ::experimot::msgs::LogStatus_LogFile& LogStatus::log_file() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.LogStatus.log_file)
  return log_file_ != NULL ? *log_file_ : *default_instance_->log_file_;
}
 ::experimot::msgs::LogStatus_LogFile* LogStatus::mutable_log_file() {
  set_has_log_file();
  if (log_file_ == NULL) {
    log_file_ = new ::experimot::msgs::LogStatus_LogFile;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.LogStatus.log_file)
  return log_file_;
}
 ::experimot::msgs::LogStatus_LogFile* LogStatus::release_log_file() {
  clear_has_log_file();
  ::experimot::msgs::LogStatus_LogFile* temp = log_file_;
  log_file_ = NULL;
  return temp;
}
 void LogStatus::set_allocated_log_file(::experimot::msgs::LogStatus_LogFile* log_file) {
  delete log_file_;
  log_file_ = log_file;
  if (log_file) {
    set_has_log_file();
  } else {
    clear_has_log_file();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.LogStatus.log_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.LogStatus", LogStatus)
// @@protoc_insertion_point(global_scope)
