// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laserscan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "laserscan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

namespace {

const ::google::protobuf::Descriptor* LaserScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaserScan_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_laserscan_2eproto() {
  protobuf_AddDesc_laserscan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "laserscan.proto");
  GOOGLE_CHECK(file != NULL);
  LaserScan_descriptor_ = file->message_type(0);
  static const int LaserScan_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, world_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, range_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, range_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, vertical_angle_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, vertical_angle_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, vertical_angle_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, vertical_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, intensities_),
  };
  LaserScan_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LaserScan_descriptor_,
      LaserScan::default_instance_,
      LaserScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, _has_bits_[0]),
      -1,
      -1,
      sizeof(LaserScan),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_laserscan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LaserScan_descriptor_, &LaserScan::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_laserscan_2eproto() {
  delete LaserScan::default_instance_;
  delete LaserScan_reflection_;
}

void protobuf_AddDesc_laserscan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Indriya::Core::Msgs::protobuf_AddDesc_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017laserscan.proto\022\021Indriya.Core.Msgs\032\npo"
    "se.proto\"\310\002\n\tLaserScan\022\r\n\005frame\030\001 \002(\t\022+\n"
    "\nworld_pose\030\002 \002(\0132\027.Indriya.Core.Msgs.Po"
    "se\022\021\n\tangle_min\030\003 \002(\001\022\021\n\tangle_max\030\004 \002(\001"
    "\022\022\n\nangle_step\030\005 \002(\001\022\021\n\trange_min\030\006 \002(\001\022"
    "\021\n\trange_max\030\007 \002(\001\022\r\n\005count\030\010 \002(\r\022\032\n\022ver"
    "tical_angle_min\030\t \001(\001\022\032\n\022vertical_angle_"
    "max\030\n \001(\001\022\033\n\023vertical_angle_step\030\013 \001(\001\022\026"
    "\n\016vertical_count\030\014 \001(\r\022\016\n\006ranges\030\r \003(\001\022\023"
    "\n\013intensities\030\016 \003(\001", 379);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "laserscan.proto", &protobuf_RegisterTypes);
  LaserScan::default_instance_ = new LaserScan();
  LaserScan::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_laserscan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_laserscan_2eproto {
  StaticDescriptorInitializer_laserscan_2eproto() {
    protobuf_AddDesc_laserscan_2eproto();
  }
} static_descriptor_initializer_laserscan_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int LaserScan::kFrameFieldNumber;
const int LaserScan::kWorldPoseFieldNumber;
const int LaserScan::kAngleMinFieldNumber;
const int LaserScan::kAngleMaxFieldNumber;
const int LaserScan::kAngleStepFieldNumber;
const int LaserScan::kRangeMinFieldNumber;
const int LaserScan::kRangeMaxFieldNumber;
const int LaserScan::kCountFieldNumber;
const int LaserScan::kVerticalAngleMinFieldNumber;
const int LaserScan::kVerticalAngleMaxFieldNumber;
const int LaserScan::kVerticalAngleStepFieldNumber;
const int LaserScan::kVerticalCountFieldNumber;
const int LaserScan::kRangesFieldNumber;
const int LaserScan::kIntensitiesFieldNumber;
#endif  // !_MSC_VER

LaserScan::LaserScan()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Indriya.Core.Msgs.LaserScan)
}

void LaserScan::InitAsDefaultInstance() {
  world_pose_ = const_cast< ::Indriya::Core::Msgs::Pose*>(&::Indriya::Core::Msgs::Pose::default_instance());
}

LaserScan::LaserScan(const LaserScan& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Indriya.Core.Msgs.LaserScan)
}

void LaserScan::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_pose_ = NULL;
  angle_min_ = 0;
  angle_max_ = 0;
  angle_step_ = 0;
  range_min_ = 0;
  range_max_ = 0;
  count_ = 0u;
  vertical_angle_min_ = 0;
  vertical_angle_max_ = 0;
  vertical_angle_step_ = 0;
  vertical_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaserScan::~LaserScan() {
  // @@protoc_insertion_point(destructor:Indriya.Core.Msgs.LaserScan)
  SharedDtor();
}

void LaserScan::SharedDtor() {
  frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete world_pose_;
  }
}

void LaserScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaserScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaserScan_descriptor_;
}

const LaserScan& LaserScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_laserscan_2eproto();
  return *default_instance_;
}

LaserScan* LaserScan::default_instance_ = NULL;

LaserScan* LaserScan::New(::google::protobuf::Arena* arena) const {
  LaserScan* n = new LaserScan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaserScan::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LaserScan*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(angle_min_, range_max_);
    if (has_frame()) {
      frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_world_pose()) {
      if (world_pose_ != NULL) world_pose_->::Indriya::Core::Msgs::Pose::Clear();
    }
    count_ = 0u;
  }
  ZR_(vertical_angle_min_, vertical_angle_max_);
  ZR_(vertical_count_, vertical_angle_step_);

#undef ZR_HELPER_
#undef ZR_

  ranges_.Clear();
  intensities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LaserScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Indriya.Core.Msgs.LaserScan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string frame = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame().data(), this->frame().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Indriya.Core.Msgs.LaserScan.frame");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_world_pose;
        break;
      }

      // required .Indriya.Core.Msgs.Pose world_pose = 2;
      case 2: {
        if (tag == 18) {
         parse_world_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_angle_min;
        break;
      }

      // required double angle_min = 3;
      case 3: {
        if (tag == 25) {
         parse_angle_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_min_)));
          set_has_angle_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_angle_max;
        break;
      }

      // required double angle_max = 4;
      case 4: {
        if (tag == 33) {
         parse_angle_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_max_)));
          set_has_angle_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_angle_step;
        break;
      }

      // required double angle_step = 5;
      case 5: {
        if (tag == 41) {
         parse_angle_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_step_)));
          set_has_angle_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_range_min;
        break;
      }

      // required double range_min = 6;
      case 6: {
        if (tag == 49) {
         parse_range_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_min_)));
          set_has_range_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_range_max;
        break;
      }

      // required double range_max = 7;
      case 7: {
        if (tag == 57) {
         parse_range_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_max_)));
          set_has_range_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_count;
        break;
      }

      // required uint32 count = 8;
      case 8: {
        if (tag == 64) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_vertical_angle_min;
        break;
      }

      // optional double vertical_angle_min = 9;
      case 9: {
        if (tag == 73) {
         parse_vertical_angle_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_angle_min_)));
          set_has_vertical_angle_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_vertical_angle_max;
        break;
      }

      // optional double vertical_angle_max = 10;
      case 10: {
        if (tag == 81) {
         parse_vertical_angle_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_angle_max_)));
          set_has_vertical_angle_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_vertical_angle_step;
        break;
      }

      // optional double vertical_angle_step = 11;
      case 11: {
        if (tag == 89) {
         parse_vertical_angle_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_angle_step_)));
          set_has_vertical_angle_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_vertical_count;
        break;
      }

      // optional uint32 vertical_count = 12;
      case 12: {
        if (tag == 96) {
         parse_vertical_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertical_count_)));
          set_has_vertical_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_ranges;
        break;
      }

      // repeated double ranges = 13;
      case 13: {
        if (tag == 105) {
         parse_ranges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 105, input, this->mutable_ranges())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ranges())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_ranges;
        if (input->ExpectTag(113)) goto parse_intensities;
        break;
      }

      // repeated double intensities = 14;
      case 14: {
        if (tag == 113) {
         parse_intensities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 113, input, this->mutable_intensities())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_intensities())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_intensities;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Indriya.Core.Msgs.LaserScan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Indriya.Core.Msgs.LaserScan)
  return false;
#undef DO_
}

void LaserScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Indriya.Core.Msgs.LaserScan)
  // required string frame = 1;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame().data(), this->frame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.LaserScan.frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->frame(), output);
  }

  // required .Indriya.Core.Msgs.Pose world_pose = 2;
  if (has_world_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->world_pose_, output);
  }

  // required double angle_min = 3;
  if (has_angle_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->angle_min(), output);
  }

  // required double angle_max = 4;
  if (has_angle_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->angle_max(), output);
  }

  // required double angle_step = 5;
  if (has_angle_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->angle_step(), output);
  }

  // required double range_min = 6;
  if (has_range_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->range_min(), output);
  }

  // required double range_max = 7;
  if (has_range_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->range_max(), output);
  }

  // required uint32 count = 8;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->count(), output);
  }

  // optional double vertical_angle_min = 9;
  if (has_vertical_angle_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->vertical_angle_min(), output);
  }

  // optional double vertical_angle_max = 10;
  if (has_vertical_angle_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->vertical_angle_max(), output);
  }

  // optional double vertical_angle_step = 11;
  if (has_vertical_angle_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->vertical_angle_step(), output);
  }

  // optional uint32 vertical_count = 12;
  if (has_vertical_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->vertical_count(), output);
  }

  // repeated double ranges = 13;
  for (int i = 0; i < this->ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      13, this->ranges(i), output);
  }

  // repeated double intensities = 14;
  for (int i = 0; i < this->intensities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      14, this->intensities(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Indriya.Core.Msgs.LaserScan)
}

::google::protobuf::uint8* LaserScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Indriya.Core.Msgs.LaserScan)
  // required string frame = 1;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame().data(), this->frame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Indriya.Core.Msgs.LaserScan.frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->frame(), target);
  }

  // required .Indriya.Core.Msgs.Pose world_pose = 2;
  if (has_world_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->world_pose_, target);
  }

  // required double angle_min = 3;
  if (has_angle_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->angle_min(), target);
  }

  // required double angle_max = 4;
  if (has_angle_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->angle_max(), target);
  }

  // required double angle_step = 5;
  if (has_angle_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->angle_step(), target);
  }

  // required double range_min = 6;
  if (has_range_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->range_min(), target);
  }

  // required double range_max = 7;
  if (has_range_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->range_max(), target);
  }

  // required uint32 count = 8;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->count(), target);
  }

  // optional double vertical_angle_min = 9;
  if (has_vertical_angle_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->vertical_angle_min(), target);
  }

  // optional double vertical_angle_max = 10;
  if (has_vertical_angle_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->vertical_angle_max(), target);
  }

  // optional double vertical_angle_step = 11;
  if (has_vertical_angle_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->vertical_angle_step(), target);
  }

  // optional uint32 vertical_count = 12;
  if (has_vertical_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->vertical_count(), target);
  }

  // repeated double ranges = 13;
  for (int i = 0; i < this->ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(13, this->ranges(i), target);
  }

  // repeated double intensities = 14;
  for (int i = 0; i < this->intensities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(14, this->intensities(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Indriya.Core.Msgs.LaserScan)
  return target;
}

int LaserScan::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_frame()) {
    // required string frame = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame());
  }

  if (has_world_pose()) {
    // required .Indriya.Core.Msgs.Pose world_pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->world_pose_);
  }

  if (has_angle_min()) {
    // required double angle_min = 3;
    total_size += 1 + 8;
  }

  if (has_angle_max()) {
    // required double angle_max = 4;
    total_size += 1 + 8;
  }

  if (has_angle_step()) {
    // required double angle_step = 5;
    total_size += 1 + 8;
  }

  if (has_range_min()) {
    // required double range_min = 6;
    total_size += 1 + 8;
  }

  if (has_range_max()) {
    // required double range_max = 7;
    total_size += 1 + 8;
  }

  if (has_count()) {
    // required uint32 count = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
int LaserScan::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string frame = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame());

    // required .Indriya.Core.Msgs.Pose world_pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->world_pose_);

    // required double angle_min = 3;
    total_size += 1 + 8;

    // required double angle_max = 4;
    total_size += 1 + 8;

    // required double angle_step = 5;
    total_size += 1 + 8;

    // required double range_min = 6;
    total_size += 1 + 8;

    // required double range_max = 7;
    total_size += 1 + 8;

    // required uint32 count = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 3840) {
    // optional double vertical_angle_min = 9;
    if (has_vertical_angle_min()) {
      total_size += 1 + 8;
    }

    // optional double vertical_angle_max = 10;
    if (has_vertical_angle_max()) {
      total_size += 1 + 8;
    }

    // optional double vertical_angle_step = 11;
    if (has_vertical_angle_step()) {
      total_size += 1 + 8;
    }

    // optional uint32 vertical_count = 12;
    if (has_vertical_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vertical_count());
    }

  }
  // repeated double ranges = 13;
  {
    int data_size = 0;
    data_size = 8 * this->ranges_size();
    total_size += 1 * this->ranges_size() + data_size;
  }

  // repeated double intensities = 14;
  {
    int data_size = 0;
    data_size = 8 * this->intensities_size();
    total_size += 1 * this->intensities_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaserScan::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LaserScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaserScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaserScan::MergeFrom(const LaserScan& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ranges_.MergeFrom(from.ranges_);
  intensities_.MergeFrom(from.intensities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame()) {
      set_has_frame();
      frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_);
    }
    if (from.has_world_pose()) {
      mutable_world_pose()->::Indriya::Core::Msgs::Pose::MergeFrom(from.world_pose());
    }
    if (from.has_angle_min()) {
      set_angle_min(from.angle_min());
    }
    if (from.has_angle_max()) {
      set_angle_max(from.angle_max());
    }
    if (from.has_angle_step()) {
      set_angle_step(from.angle_step());
    }
    if (from.has_range_min()) {
      set_range_min(from.range_min());
    }
    if (from.has_range_max()) {
      set_range_max(from.range_max());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vertical_angle_min()) {
      set_vertical_angle_min(from.vertical_angle_min());
    }
    if (from.has_vertical_angle_max()) {
      set_vertical_angle_max(from.vertical_angle_max());
    }
    if (from.has_vertical_angle_step()) {
      set_vertical_angle_step(from.vertical_angle_step());
    }
    if (from.has_vertical_count()) {
      set_vertical_count(from.vertical_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LaserScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserScan::CopyFrom(const LaserScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserScan::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_world_pose()) {
    if (!this->world_pose_->IsInitialized()) return false;
  }
  return true;
}

void LaserScan::Swap(LaserScan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaserScan::InternalSwap(LaserScan* other) {
  frame_.Swap(&other->frame_);
  std::swap(world_pose_, other->world_pose_);
  std::swap(angle_min_, other->angle_min_);
  std::swap(angle_max_, other->angle_max_);
  std::swap(angle_step_, other->angle_step_);
  std::swap(range_min_, other->range_min_);
  std::swap(range_max_, other->range_max_);
  std::swap(count_, other->count_);
  std::swap(vertical_angle_min_, other->vertical_angle_min_);
  std::swap(vertical_angle_max_, other->vertical_angle_max_);
  std::swap(vertical_angle_step_, other->vertical_angle_step_);
  std::swap(vertical_count_, other->vertical_count_);
  ranges_.UnsafeArenaSwap(&other->ranges_);
  intensities_.UnsafeArenaSwap(&other->intensities_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaserScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaserScan_descriptor_;
  metadata.reflection = LaserScan_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaserScan

// required string frame = 1;
 bool LaserScan::has_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void LaserScan::set_has_frame() {
  _has_bits_[0] |= 0x00000001u;
}
 void LaserScan::clear_has_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
 void LaserScan::clear_frame() {
  frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame();
}
 const ::std::string& LaserScan::frame() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.frame)
  return frame_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LaserScan::set_frame(const ::std::string& value) {
  set_has_frame();
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.frame)
}
 void LaserScan::set_frame(const char* value) {
  set_has_frame();
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.LaserScan.frame)
}
 void LaserScan::set_frame(const char* value, size_t size) {
  set_has_frame();
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.LaserScan.frame)
}
 ::std::string* LaserScan::mutable_frame() {
  set_has_frame();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.LaserScan.frame)
  return frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LaserScan::release_frame() {
  clear_has_frame();
  return frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LaserScan::set_allocated_frame(::std::string* frame) {
  if (frame != NULL) {
    set_has_frame();
  } else {
    clear_has_frame();
  }
  frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.LaserScan.frame)
}

// required .Indriya.Core.Msgs.Pose world_pose = 2;
 bool LaserScan::has_world_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void LaserScan::set_has_world_pose() {
  _has_bits_[0] |= 0x00000002u;
}
 void LaserScan::clear_has_world_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
 void LaserScan::clear_world_pose() {
  if (world_pose_ != NULL) world_pose_->::Indriya::Core::Msgs::Pose::Clear();
  clear_has_world_pose();
}
 const ::Indriya::Core::Msgs::Pose& LaserScan::world_pose() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.world_pose)
  return world_pose_ != NULL ? *world_pose_ : *default_instance_->world_pose_;
}
 ::Indriya::Core::Msgs::Pose* LaserScan::mutable_world_pose() {
  set_has_world_pose();
  if (world_pose_ == NULL) {
    world_pose_ = new ::Indriya::Core::Msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.LaserScan.world_pose)
  return world_pose_;
}
 ::Indriya::Core::Msgs::Pose* LaserScan::release_world_pose() {
  clear_has_world_pose();
  ::Indriya::Core::Msgs::Pose* temp = world_pose_;
  world_pose_ = NULL;
  return temp;
}
 void LaserScan::set_allocated_world_pose(::Indriya::Core::Msgs::Pose* world_pose) {
  delete world_pose_;
  world_pose_ = world_pose;
  if (world_pose) {
    set_has_world_pose();
  } else {
    clear_has_world_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.LaserScan.world_pose)
}

// required double angle_min = 3;
 bool LaserScan::has_angle_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void LaserScan::set_has_angle_min() {
  _has_bits_[0] |= 0x00000004u;
}
 void LaserScan::clear_has_angle_min() {
  _has_bits_[0] &= ~0x00000004u;
}
 void LaserScan::clear_angle_min() {
  angle_min_ = 0;
  clear_has_angle_min();
}
 double LaserScan::angle_min() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.angle_min)
  return angle_min_;
}
 void LaserScan::set_angle_min(double value) {
  set_has_angle_min();
  angle_min_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.angle_min)
}

// required double angle_max = 4;
 bool LaserScan::has_angle_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void LaserScan::set_has_angle_max() {
  _has_bits_[0] |= 0x00000008u;
}
 void LaserScan::clear_has_angle_max() {
  _has_bits_[0] &= ~0x00000008u;
}
 void LaserScan::clear_angle_max() {
  angle_max_ = 0;
  clear_has_angle_max();
}
 double LaserScan::angle_max() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.angle_max)
  return angle_max_;
}
 void LaserScan::set_angle_max(double value) {
  set_has_angle_max();
  angle_max_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.angle_max)
}

// required double angle_step = 5;
 bool LaserScan::has_angle_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void LaserScan::set_has_angle_step() {
  _has_bits_[0] |= 0x00000010u;
}
 void LaserScan::clear_has_angle_step() {
  _has_bits_[0] &= ~0x00000010u;
}
 void LaserScan::clear_angle_step() {
  angle_step_ = 0;
  clear_has_angle_step();
}
 double LaserScan::angle_step() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.angle_step)
  return angle_step_;
}
 void LaserScan::set_angle_step(double value) {
  set_has_angle_step();
  angle_step_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.angle_step)
}

// required double range_min = 6;
 bool LaserScan::has_range_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void LaserScan::set_has_range_min() {
  _has_bits_[0] |= 0x00000020u;
}
 void LaserScan::clear_has_range_min() {
  _has_bits_[0] &= ~0x00000020u;
}
 void LaserScan::clear_range_min() {
  range_min_ = 0;
  clear_has_range_min();
}
 double LaserScan::range_min() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.range_min)
  return range_min_;
}
 void LaserScan::set_range_min(double value) {
  set_has_range_min();
  range_min_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.range_min)
}

// required double range_max = 7;
 bool LaserScan::has_range_max() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void LaserScan::set_has_range_max() {
  _has_bits_[0] |= 0x00000040u;
}
 void LaserScan::clear_has_range_max() {
  _has_bits_[0] &= ~0x00000040u;
}
 void LaserScan::clear_range_max() {
  range_max_ = 0;
  clear_has_range_max();
}
 double LaserScan::range_max() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.range_max)
  return range_max_;
}
 void LaserScan::set_range_max(double value) {
  set_has_range_max();
  range_max_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.range_max)
}

// required uint32 count = 8;
 bool LaserScan::has_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void LaserScan::set_has_count() {
  _has_bits_[0] |= 0x00000080u;
}
 void LaserScan::clear_has_count() {
  _has_bits_[0] &= ~0x00000080u;
}
 void LaserScan::clear_count() {
  count_ = 0u;
  clear_has_count();
}
 ::google::protobuf::uint32 LaserScan::count() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.count)
  return count_;
}
 void LaserScan::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.count)
}

// optional double vertical_angle_min = 9;
 bool LaserScan::has_vertical_angle_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void LaserScan::set_has_vertical_angle_min() {
  _has_bits_[0] |= 0x00000100u;
}
 void LaserScan::clear_has_vertical_angle_min() {
  _has_bits_[0] &= ~0x00000100u;
}
 void LaserScan::clear_vertical_angle_min() {
  vertical_angle_min_ = 0;
  clear_has_vertical_angle_min();
}
 double LaserScan::vertical_angle_min() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.vertical_angle_min)
  return vertical_angle_min_;
}
 void LaserScan::set_vertical_angle_min(double value) {
  set_has_vertical_angle_min();
  vertical_angle_min_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.vertical_angle_min)
}

// optional double vertical_angle_max = 10;
 bool LaserScan::has_vertical_angle_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void LaserScan::set_has_vertical_angle_max() {
  _has_bits_[0] |= 0x00000200u;
}
 void LaserScan::clear_has_vertical_angle_max() {
  _has_bits_[0] &= ~0x00000200u;
}
 void LaserScan::clear_vertical_angle_max() {
  vertical_angle_max_ = 0;
  clear_has_vertical_angle_max();
}
 double LaserScan::vertical_angle_max() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.vertical_angle_max)
  return vertical_angle_max_;
}
 void LaserScan::set_vertical_angle_max(double value) {
  set_has_vertical_angle_max();
  vertical_angle_max_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.vertical_angle_max)
}

// optional double vertical_angle_step = 11;
 bool LaserScan::has_vertical_angle_step() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void LaserScan::set_has_vertical_angle_step() {
  _has_bits_[0] |= 0x00000400u;
}
 void LaserScan::clear_has_vertical_angle_step() {
  _has_bits_[0] &= ~0x00000400u;
}
 void LaserScan::clear_vertical_angle_step() {
  vertical_angle_step_ = 0;
  clear_has_vertical_angle_step();
}
 double LaserScan::vertical_angle_step() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.vertical_angle_step)
  return vertical_angle_step_;
}
 void LaserScan::set_vertical_angle_step(double value) {
  set_has_vertical_angle_step();
  vertical_angle_step_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.vertical_angle_step)
}

// optional uint32 vertical_count = 12;
 bool LaserScan::has_vertical_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void LaserScan::set_has_vertical_count() {
  _has_bits_[0] |= 0x00000800u;
}
 void LaserScan::clear_has_vertical_count() {
  _has_bits_[0] &= ~0x00000800u;
}
 void LaserScan::clear_vertical_count() {
  vertical_count_ = 0u;
  clear_has_vertical_count();
}
 ::google::protobuf::uint32 LaserScan::vertical_count() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.vertical_count)
  return vertical_count_;
}
 void LaserScan::set_vertical_count(::google::protobuf::uint32 value) {
  set_has_vertical_count();
  vertical_count_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.vertical_count)
}

// repeated double ranges = 13;
 int LaserScan::ranges_size() const {
  return ranges_.size();
}
 void LaserScan::clear_ranges() {
  ranges_.Clear();
}
 double LaserScan::ranges(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.ranges)
  return ranges_.Get(index);
}
 void LaserScan::set_ranges(int index, double value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.ranges)
}
 void LaserScan::add_ranges(double value) {
  ranges_.Add(value);
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.LaserScan.ranges)
}
 const ::google::protobuf::RepeatedField< double >&
LaserScan::ranges() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.LaserScan.ranges)
  return ranges_;
}
 ::google::protobuf::RepeatedField< double >*
LaserScan::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.LaserScan.ranges)
  return &ranges_;
}

// repeated double intensities = 14;
 int LaserScan::intensities_size() const {
  return intensities_.size();
}
 void LaserScan::clear_intensities() {
  intensities_.Clear();
}
 double LaserScan::intensities(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.LaserScan.intensities)
  return intensities_.Get(index);
}
 void LaserScan::set_intensities(int index, double value) {
  intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.LaserScan.intensities)
}
 void LaserScan::add_intensities(double value) {
  intensities_.Add(value);
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.LaserScan.intensities)
}
 const ::google::protobuf::RepeatedField< double >&
LaserScan::intensities() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.LaserScan.intensities)
  return intensities_;
}
 ::google::protobuf::RepeatedField< double >*
LaserScan::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.LaserScan.intensities)
  return &intensities_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

EX_REGISTER_STATIC_MSG("Indriya.Core.Msgs.LaserScan", LaserScan)
// @@protoc_insertion_point(global_scope)
