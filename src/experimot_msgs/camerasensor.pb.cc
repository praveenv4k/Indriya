// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camerasensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "camerasensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* CameraSensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraSensor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_camerasensor_2eproto() {
  protobuf_AddDesc_camerasensor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "camerasensor.proto");
  GOOGLE_CHECK(file != NULL);
  CameraSensor_descriptor_ = file->message_type(0);
  static const int CameraSensor_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, horizontal_fov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, image_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, image_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, near_clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, far_clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, save_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, save_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, distortion_),
  };
  CameraSensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CameraSensor_descriptor_,
      CameraSensor::default_instance_,
      CameraSensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, _has_bits_[0]),
      -1,
      -1,
      sizeof(CameraSensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_camerasensor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CameraSensor_descriptor_, &CameraSensor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_camerasensor_2eproto() {
  delete CameraSensor::default_instance_;
  delete CameraSensor_reflection_;
}

void protobuf_AddDesc_camerasensor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_vector2d_2eproto();
  ::experimot::msgs::protobuf_AddDesc_distortion_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022camerasensor.proto\022\016experimot.msgs\032\016ve"
    "ctor2d.proto\032\020distortion.proto\"\350\001\n\014Camer"
    "aSensor\022\026\n\016horizontal_fov\030\001 \001(\001\022,\n\nimage"
    "_size\030\002 \001(\0132\030.experimot.msgs.Vector2d\022\024\n"
    "\014image_format\030\003 \001(\t\022\021\n\tnear_clip\030\004 \001(\001\022\020"
    "\n\010far_clip\030\005 \001(\001\022\024\n\014save_enabled\030\006 \001(\010\022\021"
    "\n\tsave_path\030\007 \001(\t\022.\n\ndistortion\030\010 \001(\0132\032."
    "experimot.msgs.Distortion", 305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camerasensor.proto", &protobuf_RegisterTypes);
  CameraSensor::default_instance_ = new CameraSensor();
  CameraSensor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_camerasensor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_camerasensor_2eproto {
  StaticDescriptorInitializer_camerasensor_2eproto() {
    protobuf_AddDesc_camerasensor_2eproto();
  }
} static_descriptor_initializer_camerasensor_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CameraSensor::kHorizontalFovFieldNumber;
const int CameraSensor::kImageSizeFieldNumber;
const int CameraSensor::kImageFormatFieldNumber;
const int CameraSensor::kNearClipFieldNumber;
const int CameraSensor::kFarClipFieldNumber;
const int CameraSensor::kSaveEnabledFieldNumber;
const int CameraSensor::kSavePathFieldNumber;
const int CameraSensor::kDistortionFieldNumber;
#endif  // !_MSC_VER

CameraSensor::CameraSensor()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.CameraSensor)
}

void CameraSensor::InitAsDefaultInstance() {
  image_size_ = const_cast< ::experimot::msgs::Vector2d*>(&::experimot::msgs::Vector2d::default_instance());
  distortion_ = const_cast< ::experimot::msgs::Distortion*>(&::experimot::msgs::Distortion::default_instance());
}

CameraSensor::CameraSensor(const CameraSensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.CameraSensor)
}

void CameraSensor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  horizontal_fov_ = 0;
  image_size_ = NULL;
  image_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  near_clip_ = 0;
  far_clip_ = 0;
  save_enabled_ = false;
  save_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distortion_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraSensor::~CameraSensor() {
  // @@protoc_insertion_point(destructor:experimot.msgs.CameraSensor)
  SharedDtor();
}

void CameraSensor::SharedDtor() {
  image_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete image_size_;
    delete distortion_;
  }
}

void CameraSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraSensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraSensor_descriptor_;
}

const CameraSensor& CameraSensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camerasensor_2eproto();
  return *default_instance_;
}

CameraSensor* CameraSensor::default_instance_ = NULL;

CameraSensor* CameraSensor::New(::google::protobuf::Arena* arena) const {
  CameraSensor* n = new CameraSensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraSensor::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CameraSensor*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(near_clip_, far_clip_);
    horizontal_fov_ = 0;
    if (has_image_size()) {
      if (image_size_ != NULL) image_size_->::experimot::msgs::Vector2d::Clear();
    }
    if (has_image_format()) {
      image_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    save_enabled_ = false;
    if (has_save_path()) {
      save_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_distortion()) {
      if (distortion_ != NULL) distortion_->::experimot::msgs::Distortion::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CameraSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.CameraSensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double horizontal_fov = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontal_fov_)));
          set_has_horizontal_fov();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image_size;
        break;
      }

      // optional .experimot.msgs.Vector2d image_size = 2;
      case 2: {
        if (tag == 18) {
         parse_image_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image_format;
        break;
      }

      // optional string image_format = 3;
      case 3: {
        if (tag == 26) {
         parse_image_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_format().data(), this->image_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.CameraSensor.image_format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_near_clip;
        break;
      }

      // optional double near_clip = 4;
      case 4: {
        if (tag == 33) {
         parse_near_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &near_clip_)));
          set_has_near_clip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_far_clip;
        break;
      }

      // optional double far_clip = 5;
      case 5: {
        if (tag == 41) {
         parse_far_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &far_clip_)));
          set_has_far_clip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_save_enabled;
        break;
      }

      // optional bool save_enabled = 6;
      case 6: {
        if (tag == 48) {
         parse_save_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_enabled_)));
          set_has_save_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_save_path;
        break;
      }

      // optional string save_path = 7;
      case 7: {
        if (tag == 58) {
         parse_save_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->save_path().data(), this->save_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.CameraSensor.save_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_distortion;
        break;
      }

      // optional .experimot.msgs.Distortion distortion = 8;
      case 8: {
        if (tag == 66) {
         parse_distortion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distortion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.CameraSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.CameraSensor)
  return false;
#undef DO_
}

void CameraSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.CameraSensor)
  // optional double horizontal_fov = 1;
  if (has_horizontal_fov()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->horizontal_fov(), output);
  }

  // optional .experimot.msgs.Vector2d image_size = 2;
  if (has_image_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_size_, output);
  }

  // optional string image_format = 3;
  if (has_image_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_format().data(), this->image_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.CameraSensor.image_format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image_format(), output);
  }

  // optional double near_clip = 4;
  if (has_near_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->near_clip(), output);
  }

  // optional double far_clip = 5;
  if (has_far_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->far_clip(), output);
  }

  // optional bool save_enabled = 6;
  if (has_save_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->save_enabled(), output);
  }

  // optional string save_path = 7;
  if (has_save_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_path().data(), this->save_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.CameraSensor.save_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->save_path(), output);
  }

  // optional .experimot.msgs.Distortion distortion = 8;
  if (has_distortion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->distortion_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.CameraSensor)
}

::google::protobuf::uint8* CameraSensor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.CameraSensor)
  // optional double horizontal_fov = 1;
  if (has_horizontal_fov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->horizontal_fov(), target);
  }

  // optional .experimot.msgs.Vector2d image_size = 2;
  if (has_image_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->image_size_, target);
  }

  // optional string image_format = 3;
  if (has_image_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_format().data(), this->image_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.CameraSensor.image_format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image_format(), target);
  }

  // optional double near_clip = 4;
  if (has_near_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->near_clip(), target);
  }

  // optional double far_clip = 5;
  if (has_far_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->far_clip(), target);
  }

  // optional bool save_enabled = 6;
  if (has_save_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->save_enabled(), target);
  }

  // optional string save_path = 7;
  if (has_save_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_path().data(), this->save_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.CameraSensor.save_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->save_path(), target);
  }

  // optional .experimot.msgs.Distortion distortion = 8;
  if (has_distortion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->distortion_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.CameraSensor)
  return target;
}

int CameraSensor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional double horizontal_fov = 1;
    if (has_horizontal_fov()) {
      total_size += 1 + 8;
    }

    // optional .experimot.msgs.Vector2d image_size = 2;
    if (has_image_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_size_);
    }

    // optional string image_format = 3;
    if (has_image_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_format());
    }

    // optional double near_clip = 4;
    if (has_near_clip()) {
      total_size += 1 + 8;
    }

    // optional double far_clip = 5;
    if (has_far_clip()) {
      total_size += 1 + 8;
    }

    // optional bool save_enabled = 6;
    if (has_save_enabled()) {
      total_size += 1 + 1;
    }

    // optional string save_path = 7;
    if (has_save_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->save_path());
    }

    // optional .experimot.msgs.Distortion distortion = 8;
    if (has_distortion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->distortion_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraSensor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CameraSensor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraSensor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraSensor::MergeFrom(const CameraSensor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horizontal_fov()) {
      set_horizontal_fov(from.horizontal_fov());
    }
    if (from.has_image_size()) {
      mutable_image_size()->::experimot::msgs::Vector2d::MergeFrom(from.image_size());
    }
    if (from.has_image_format()) {
      set_has_image_format();
      image_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_format_);
    }
    if (from.has_near_clip()) {
      set_near_clip(from.near_clip());
    }
    if (from.has_far_clip()) {
      set_far_clip(from.far_clip());
    }
    if (from.has_save_enabled()) {
      set_save_enabled(from.save_enabled());
    }
    if (from.has_save_path()) {
      set_has_save_path();
      save_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_path_);
    }
    if (from.has_distortion()) {
      mutable_distortion()->::experimot::msgs::Distortion::MergeFrom(from.distortion());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CameraSensor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSensor::CopyFrom(const CameraSensor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSensor::IsInitialized() const {

  if (has_image_size()) {
    if (!this->image_size_->IsInitialized()) return false;
  }
  if (has_distortion()) {
    if (!this->distortion_->IsInitialized()) return false;
  }
  return true;
}

void CameraSensor::Swap(CameraSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraSensor::InternalSwap(CameraSensor* other) {
  std::swap(horizontal_fov_, other->horizontal_fov_);
  std::swap(image_size_, other->image_size_);
  image_format_.Swap(&other->image_format_);
  std::swap(near_clip_, other->near_clip_);
  std::swap(far_clip_, other->far_clip_);
  std::swap(save_enabled_, other->save_enabled_);
  save_path_.Swap(&other->save_path_);
  std::swap(distortion_, other->distortion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraSensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraSensor_descriptor_;
  metadata.reflection = CameraSensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraSensor

// optional double horizontal_fov = 1;
 bool CameraSensor::has_horizontal_fov() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void CameraSensor::set_has_horizontal_fov() {
  _has_bits_[0] |= 0x00000001u;
}
 void CameraSensor::clear_has_horizontal_fov() {
  _has_bits_[0] &= ~0x00000001u;
}
 void CameraSensor::clear_horizontal_fov() {
  horizontal_fov_ = 0;
  clear_has_horizontal_fov();
}
 double CameraSensor::horizontal_fov() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.CameraSensor.horizontal_fov)
  return horizontal_fov_;
}
 void CameraSensor::set_horizontal_fov(double value) {
  set_has_horizontal_fov();
  horizontal_fov_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.CameraSensor.horizontal_fov)
}

// optional .experimot.msgs.Vector2d image_size = 2;
 bool CameraSensor::has_image_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void CameraSensor::set_has_image_size() {
  _has_bits_[0] |= 0x00000002u;
}
 void CameraSensor::clear_has_image_size() {
  _has_bits_[0] &= ~0x00000002u;
}
 void CameraSensor::clear_image_size() {
  if (image_size_ != NULL) image_size_->::experimot::msgs::Vector2d::Clear();
  clear_has_image_size();
}
 const ::experimot::msgs::Vector2d& CameraSensor::image_size() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.CameraSensor.image_size)
  return image_size_ != NULL ? *image_size_ : *default_instance_->image_size_;
}
 ::experimot::msgs::Vector2d* CameraSensor::mutable_image_size() {
  set_has_image_size();
  if (image_size_ == NULL) {
    image_size_ = new ::experimot::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.CameraSensor.image_size)
  return image_size_;
}
 ::experimot::msgs::Vector2d* CameraSensor::release_image_size() {
  clear_has_image_size();
  ::experimot::msgs::Vector2d* temp = image_size_;
  image_size_ = NULL;
  return temp;
}
 void CameraSensor::set_allocated_image_size(::experimot::msgs::Vector2d* image_size) {
  delete image_size_;
  image_size_ = image_size;
  if (image_size) {
    set_has_image_size();
  } else {
    clear_has_image_size();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.CameraSensor.image_size)
}

// optional string image_format = 3;
 bool CameraSensor::has_image_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void CameraSensor::set_has_image_format() {
  _has_bits_[0] |= 0x00000004u;
}
 void CameraSensor::clear_has_image_format() {
  _has_bits_[0] &= ~0x00000004u;
}
 void CameraSensor::clear_image_format() {
  image_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_format();
}
 const ::std::string& CameraSensor::image_format() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.CameraSensor.image_format)
  return image_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraSensor::set_image_format(const ::std::string& value) {
  set_has_image_format();
  image_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.CameraSensor.image_format)
}
 void CameraSensor::set_image_format(const char* value) {
  set_has_image_format();
  image_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.CameraSensor.image_format)
}
 void CameraSensor::set_image_format(const char* value, size_t size) {
  set_has_image_format();
  image_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.CameraSensor.image_format)
}
 ::std::string* CameraSensor::mutable_image_format() {
  set_has_image_format();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.CameraSensor.image_format)
  return image_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraSensor::release_image_format() {
  clear_has_image_format();
  return image_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraSensor::set_allocated_image_format(::std::string* image_format) {
  if (image_format != NULL) {
    set_has_image_format();
  } else {
    clear_has_image_format();
  }
  image_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_format);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.CameraSensor.image_format)
}

// optional double near_clip = 4;
 bool CameraSensor::has_near_clip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void CameraSensor::set_has_near_clip() {
  _has_bits_[0] |= 0x00000008u;
}
 void CameraSensor::clear_has_near_clip() {
  _has_bits_[0] &= ~0x00000008u;
}
 void CameraSensor::clear_near_clip() {
  near_clip_ = 0;
  clear_has_near_clip();
}
 double CameraSensor::near_clip() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.CameraSensor.near_clip)
  return near_clip_;
}
 void CameraSensor::set_near_clip(double value) {
  set_has_near_clip();
  near_clip_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.CameraSensor.near_clip)
}

// optional double far_clip = 5;
 bool CameraSensor::has_far_clip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void CameraSensor::set_has_far_clip() {
  _has_bits_[0] |= 0x00000010u;
}
 void CameraSensor::clear_has_far_clip() {
  _has_bits_[0] &= ~0x00000010u;
}
 void CameraSensor::clear_far_clip() {
  far_clip_ = 0;
  clear_has_far_clip();
}
 double CameraSensor::far_clip() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.CameraSensor.far_clip)
  return far_clip_;
}
 void CameraSensor::set_far_clip(double value) {
  set_has_far_clip();
  far_clip_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.CameraSensor.far_clip)
}

// optional bool save_enabled = 6;
 bool CameraSensor::has_save_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void CameraSensor::set_has_save_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
 void CameraSensor::clear_has_save_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
 void CameraSensor::clear_save_enabled() {
  save_enabled_ = false;
  clear_has_save_enabled();
}
 bool CameraSensor::save_enabled() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.CameraSensor.save_enabled)
  return save_enabled_;
}
 void CameraSensor::set_save_enabled(bool value) {
  set_has_save_enabled();
  save_enabled_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.CameraSensor.save_enabled)
}

// optional string save_path = 7;
 bool CameraSensor::has_save_path() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void CameraSensor::set_has_save_path() {
  _has_bits_[0] |= 0x00000040u;
}
 void CameraSensor::clear_has_save_path() {
  _has_bits_[0] &= ~0x00000040u;
}
 void CameraSensor::clear_save_path() {
  save_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_path();
}
 const ::std::string& CameraSensor::save_path() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.CameraSensor.save_path)
  return save_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraSensor::set_save_path(const ::std::string& value) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.CameraSensor.save_path)
}
 void CameraSensor::set_save_path(const char* value) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.CameraSensor.save_path)
}
 void CameraSensor::set_save_path(const char* value, size_t size) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.CameraSensor.save_path)
}
 ::std::string* CameraSensor::mutable_save_path() {
  set_has_save_path();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.CameraSensor.save_path)
  return save_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraSensor::release_save_path() {
  clear_has_save_path();
  return save_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraSensor::set_allocated_save_path(::std::string* save_path) {
  if (save_path != NULL) {
    set_has_save_path();
  } else {
    clear_has_save_path();
  }
  save_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_path);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.CameraSensor.save_path)
}

// optional .experimot.msgs.Distortion distortion = 8;
 bool CameraSensor::has_distortion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void CameraSensor::set_has_distortion() {
  _has_bits_[0] |= 0x00000080u;
}
 void CameraSensor::clear_has_distortion() {
  _has_bits_[0] &= ~0x00000080u;
}
 void CameraSensor::clear_distortion() {
  if (distortion_ != NULL) distortion_->::experimot::msgs::Distortion::Clear();
  clear_has_distortion();
}
 const ::experimot::msgs::Distortion& CameraSensor::distortion() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.CameraSensor.distortion)
  return distortion_ != NULL ? *distortion_ : *default_instance_->distortion_;
}
 ::experimot::msgs::Distortion* CameraSensor::mutable_distortion() {
  set_has_distortion();
  if (distortion_ == NULL) {
    distortion_ = new ::experimot::msgs::Distortion;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.CameraSensor.distortion)
  return distortion_;
}
 ::experimot::msgs::Distortion* CameraSensor::release_distortion() {
  clear_has_distortion();
  ::experimot::msgs::Distortion* temp = distortion_;
  distortion_ = NULL;
  return temp;
}
 void CameraSensor::set_allocated_distortion(::experimot::msgs::Distortion* distortion) {
  delete distortion_;
  distortion_ = distortion;
  if (distortion) {
    set_has_distortion();
  } else {
    clear_has_distortion();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.CameraSensor.distortion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.CameraSensor", CameraSensor)
// @@protoc_insertion_point(global_scope)
