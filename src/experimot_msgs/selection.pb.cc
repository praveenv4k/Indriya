// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: selection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "selection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Selection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Selection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_selection_2eproto() {
  protobuf_AddDesc_selection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "selection.proto");
  GOOGLE_CHECK(file != NULL);
  Selection_descriptor_ = file->message_type(0);
  static const int Selection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selection, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selection, selected_),
  };
  Selection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Selection_descriptor_,
      Selection::default_instance_,
      Selection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selection, _has_bits_[0]),
      -1,
      -1,
      sizeof(Selection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selection, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_selection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Selection_descriptor_, &Selection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_selection_2eproto() {
  delete Selection::default_instance_;
  delete Selection_reflection_;
}

void protobuf_AddDesc_selection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017selection.proto\022\016experimot.msgs\">\n\tSel"
    "ection\022\n\n\002id\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\027\n\010sele"
    "cted\030\003 \001(\010:\005false", 97);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "selection.proto", &protobuf_RegisterTypes);
  Selection::default_instance_ = new Selection();
  Selection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_selection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_selection_2eproto {
  StaticDescriptorInitializer_selection_2eproto() {
    protobuf_AddDesc_selection_2eproto();
  }
} static_descriptor_initializer_selection_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Selection::kIdFieldNumber;
const int Selection::kNameFieldNumber;
const int Selection::kSelectedFieldNumber;
#endif  // !_MSC_VER

Selection::Selection()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Selection)
}

void Selection::InitAsDefaultInstance() {
}

Selection::Selection(const Selection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Selection)
}

void Selection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  selected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Selection::~Selection() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Selection)
  SharedDtor();
}

void Selection::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Selection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Selection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Selection_descriptor_;
}

const Selection& Selection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_selection_2eproto();
  return *default_instance_;
}

Selection* Selection::default_instance_ = NULL;

Selection* Selection::New(::google::protobuf::Arena* arena) const {
  Selection* n = new Selection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Selection::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Selection*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, selected_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Selection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Selection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Selection.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_selected;
        break;
      }

      // optional bool selected = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_selected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selected_)));
          set_has_selected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Selection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Selection)
  return false;
#undef DO_
}

void Selection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Selection)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Selection.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool selected = 3 [default = false];
  if (has_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->selected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Selection)
}

::google::protobuf::uint8* Selection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Selection)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Selection.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool selected = 3 [default = false];
  if (has_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->selected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Selection)
  return target;
}

int Selection::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
int Selection::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool selected = 3 [default = false];
  if (has_selected()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Selection::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Selection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Selection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Selection::MergeFrom(const Selection& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_selected()) {
      set_selected(from.selected());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Selection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Selection::CopyFrom(const Selection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Selection::Swap(Selection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Selection::InternalSwap(Selection* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(selected_, other->selected_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Selection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Selection_descriptor_;
  metadata.reflection = Selection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Selection

// required uint32 id = 1;
 bool Selection::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Selection::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void Selection::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Selection::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 Selection::id() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Selection.id)
  return id_;
}
 void Selection::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Selection.id)
}

// required string name = 2;
 bool Selection::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Selection::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
 void Selection::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Selection::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Selection::name() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Selection.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Selection::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Selection.name)
}
 void Selection::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Selection.name)
}
 void Selection::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Selection.name)
}
 ::std::string* Selection::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Selection.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Selection::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Selection::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Selection.name)
}

// optional bool selected = 3 [default = false];
 bool Selection::has_selected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Selection::set_has_selected() {
  _has_bits_[0] |= 0x00000004u;
}
 void Selection::clear_has_selected() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Selection::clear_selected() {
  selected_ = false;
  clear_has_selected();
}
 bool Selection::selected() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Selection.selected)
  return selected_;
}
 void Selection::set_selected(bool value) {
  set_has_selected();
  selected_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Selection.selected)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.Selection", Selection)
// @@protoc_insertion_point(global_scope)
