// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tactile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tactile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Tactile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tactile_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tactile_2eproto() {
  protobuf_AddDesc_tactile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tactile.proto");
  GOOGLE_CHECK(file != NULL);
  Tactile_descriptor_ = file->message_type(0);
  static const int Tactile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactile, collision_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactile, collision_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactile, pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactile, time_),
  };
  Tactile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Tactile_descriptor_,
      Tactile::default_instance_,
      Tactile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactile, _has_bits_[0]),
      -1,
      -1,
      sizeof(Tactile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactile, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tactile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Tactile_descriptor_, &Tactile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tactile_2eproto() {
  delete Tactile::default_instance_;
  delete Tactile_reflection_;
}

void protobuf_AddDesc_tactile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtactile.proto\022\016experimot.msgs\032\ntime.pr"
    "oto\"m\n\007Tactile\022\026\n\016collision_name\030\001 \003(\t\022\024"
    "\n\014collision_id\030\002 \003(\r\022\020\n\010pressure\030\003 \003(\001\022\""
    "\n\004time\030\004 \002(\0132\024.experimot.msgs.Time", 154);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tactile.proto", &protobuf_RegisterTypes);
  Tactile::default_instance_ = new Tactile();
  Tactile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tactile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tactile_2eproto {
  StaticDescriptorInitializer_tactile_2eproto() {
    protobuf_AddDesc_tactile_2eproto();
  }
} static_descriptor_initializer_tactile_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Tactile::kCollisionNameFieldNumber;
const int Tactile::kCollisionIdFieldNumber;
const int Tactile::kPressureFieldNumber;
const int Tactile::kTimeFieldNumber;
#endif  // !_MSC_VER

Tactile::Tactile()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Tactile)
}

void Tactile::InitAsDefaultInstance() {
  time_ = const_cast< ::experimot::msgs::Time*>(&::experimot::msgs::Time::default_instance());
}

Tactile::Tactile(const Tactile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Tactile)
}

void Tactile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tactile::~Tactile() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Tactile)
  SharedDtor();
}

void Tactile::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
  }
}

void Tactile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tactile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tactile_descriptor_;
}

const Tactile& Tactile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tactile_2eproto();
  return *default_instance_;
}

Tactile* Tactile::default_instance_ = NULL;

Tactile* Tactile::New(::google::protobuf::Arena* arena) const {
  Tactile* n = new Tactile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tactile::Clear() {
  if (has_time()) {
    if (time_ != NULL) time_->::experimot::msgs::Time::Clear();
  }
  collision_name_.Clear();
  collision_id_.Clear();
  pressure_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Tactile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Tactile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string collision_name = 1;
      case 1: {
        if (tag == 10) {
         parse_collision_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_collision_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->collision_name(this->collision_name_size() - 1).data(),
            this->collision_name(this->collision_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Tactile.collision_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_collision_name;
        if (input->ExpectTag(16)) goto parse_collision_id;
        break;
      }

      // repeated uint32 collision_id = 2;
      case 2: {
        if (tag == 16) {
         parse_collision_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_collision_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_collision_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_collision_id;
        if (input->ExpectTag(25)) goto parse_pressure;
        break;
      }

      // repeated double pressure = 3;
      case 3: {
        if (tag == 25) {
         parse_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_pressure())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pressure())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_pressure;
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // required .experimot.msgs.Time time = 4;
      case 4: {
        if (tag == 34) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Tactile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Tactile)
  return false;
#undef DO_
}

void Tactile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Tactile)
  // repeated string collision_name = 1;
  for (int i = 0; i < this->collision_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->collision_name(i).data(), this->collision_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "experimot.msgs.Tactile.collision_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->collision_name(i), output);
  }

  // repeated uint32 collision_id = 2;
  for (int i = 0; i < this->collision_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->collision_id(i), output);
  }

  // repeated double pressure = 3;
  for (int i = 0; i < this->pressure_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->pressure(i), output);
  }

  // required .experimot.msgs.Time time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->time_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Tactile)
}

::google::protobuf::uint8* Tactile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Tactile)
  // repeated string collision_name = 1;
  for (int i = 0; i < this->collision_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collision_name(i).data(), this->collision_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Tactile.collision_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->collision_name(i), target);
  }

  // repeated uint32 collision_id = 2;
  for (int i = 0; i < this->collision_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->collision_id(i), target);
  }

  // repeated double pressure = 3;
  for (int i = 0; i < this->pressure_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->pressure(i), target);
  }

  // required .experimot.msgs.Time time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->time_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Tactile)
  return target;
}

int Tactile::ByteSize() const {
  int total_size = 0;

  // required .experimot.msgs.Time time = 4;
  if (has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);
  }
  // repeated string collision_name = 1;
  total_size += 1 * this->collision_name_size();
  for (int i = 0; i < this->collision_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->collision_name(i));
  }

  // repeated uint32 collision_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->collision_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->collision_id(i));
    }
    total_size += 1 * this->collision_id_size() + data_size;
  }

  // repeated double pressure = 3;
  {
    int data_size = 0;
    data_size = 8 * this->pressure_size();
    total_size += 1 * this->pressure_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tactile::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Tactile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tactile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tactile::MergeFrom(const Tactile& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  collision_name_.MergeFrom(from.collision_name_);
  collision_id_.MergeFrom(from.collision_id_);
  pressure_.MergeFrom(from.pressure_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_time()) {
      mutable_time()->::experimot::msgs::Time::MergeFrom(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Tactile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tactile::CopyFrom(const Tactile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tactile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_time()) {
    if (!this->time_->IsInitialized()) return false;
  }
  return true;
}

void Tactile::Swap(Tactile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tactile::InternalSwap(Tactile* other) {
  collision_name_.UnsafeArenaSwap(&other->collision_name_);
  collision_id_.UnsafeArenaSwap(&other->collision_id_);
  pressure_.UnsafeArenaSwap(&other->pressure_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tactile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tactile_descriptor_;
  metadata.reflection = Tactile_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tactile

// repeated string collision_name = 1;
 int Tactile::collision_name_size() const {
  return collision_name_.size();
}
 void Tactile::clear_collision_name() {
  collision_name_.Clear();
}
 const ::std::string& Tactile::collision_name(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Tactile.collision_name)
  return collision_name_.Get(index);
}
 ::std::string* Tactile::mutable_collision_name(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Tactile.collision_name)
  return collision_name_.Mutable(index);
}
 void Tactile::set_collision_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:experimot.msgs.Tactile.collision_name)
  collision_name_.Mutable(index)->assign(value);
}
 void Tactile::set_collision_name(int index, const char* value) {
  collision_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Tactile.collision_name)
}
 void Tactile::set_collision_name(int index, const char* value, size_t size) {
  collision_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Tactile.collision_name)
}
 ::std::string* Tactile::add_collision_name() {
  return collision_name_.Add();
}
 void Tactile::add_collision_name(const ::std::string& value) {
  collision_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:experimot.msgs.Tactile.collision_name)
}
 void Tactile::add_collision_name(const char* value) {
  collision_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:experimot.msgs.Tactile.collision_name)
}
 void Tactile::add_collision_name(const char* value, size_t size) {
  collision_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:experimot.msgs.Tactile.collision_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Tactile::collision_name() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Tactile.collision_name)
  return collision_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Tactile::mutable_collision_name() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Tactile.collision_name)
  return &collision_name_;
}

// repeated uint32 collision_id = 2;
 int Tactile::collision_id_size() const {
  return collision_id_.size();
}
 void Tactile::clear_collision_id() {
  collision_id_.Clear();
}
 ::google::protobuf::uint32 Tactile::collision_id(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Tactile.collision_id)
  return collision_id_.Get(index);
}
 void Tactile::set_collision_id(int index, ::google::protobuf::uint32 value) {
  collision_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Tactile.collision_id)
}
 void Tactile::add_collision_id(::google::protobuf::uint32 value) {
  collision_id_.Add(value);
  // @@protoc_insertion_point(field_add:experimot.msgs.Tactile.collision_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Tactile::collision_id() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Tactile.collision_id)
  return collision_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Tactile::mutable_collision_id() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Tactile.collision_id)
  return &collision_id_;
}

// repeated double pressure = 3;
 int Tactile::pressure_size() const {
  return pressure_.size();
}
 void Tactile::clear_pressure() {
  pressure_.Clear();
}
 double Tactile::pressure(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Tactile.pressure)
  return pressure_.Get(index);
}
 void Tactile::set_pressure(int index, double value) {
  pressure_.Set(index, value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Tactile.pressure)
}
 void Tactile::add_pressure(double value) {
  pressure_.Add(value);
  // @@protoc_insertion_point(field_add:experimot.msgs.Tactile.pressure)
}
 const ::google::protobuf::RepeatedField< double >&
Tactile::pressure() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Tactile.pressure)
  return pressure_;
}
 ::google::protobuf::RepeatedField< double >*
Tactile::mutable_pressure() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Tactile.pressure)
  return &pressure_;
}

// required .experimot.msgs.Time time = 4;
 bool Tactile::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Tactile::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
 void Tactile::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Tactile::clear_time() {
  if (time_ != NULL) time_->::experimot::msgs::Time::Clear();
  clear_has_time();
}
 const ::experimot::msgs::Time& Tactile::time() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Tactile.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
 ::experimot::msgs::Time* Tactile::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::experimot::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Tactile.time)
  return time_;
}
 ::experimot::msgs::Time* Tactile::release_time() {
  clear_has_time();
  ::experimot::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
 void Tactile::set_allocated_time(::experimot::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Tactile.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.Tactile", Tactile)
// @@protoc_insertion_point(global_scope)
