// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: light.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "light.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Light_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Light_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Light_LightType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_light_2eproto() {
  protobuf_AddDesc_light_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "light.proto");
  GOOGLE_CHECK(file != NULL);
  Light_descriptor_ = file->message_type(0);
  static const int Light_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, diffuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, specular_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, attenuation_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, attenuation_linear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, attenuation_quadratic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, cast_shadows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, spot_inner_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, spot_outer_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, spot_falloff_),
  };
  Light_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Light_descriptor_,
      Light::default_instance_,
      Light_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, _has_bits_[0]),
      -1,
      -1,
      sizeof(Light),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, _internal_metadata_),
      -1);
  Light_LightType_descriptor_ = Light_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_light_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Light_descriptor_, &Light::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_light_2eproto() {
  delete Light::default_instance_;
  delete Light_reflection_;
}

void protobuf_AddDesc_light_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_pose_2eproto();
  ::experimot::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::experimot::msgs::protobuf_AddDesc_color_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013light.proto\022\016experimot.msgs\032\npose.prot"
    "o\032\016vector3d.proto\032\013color.proto\"\341\003\n\005Light"
    "\022\014\n\004name\030\001 \002(\t\022-\n\004type\030\002 \001(\0162\037.experimot"
    ".msgs.Light.LightType\022\"\n\004pose\030\003 \001(\0132\024.ex"
    "perimot.msgs.Pose\022&\n\007diffuse\030\004 \001(\0132\025.exp"
    "erimot.msgs.Color\022\'\n\010specular\030\005 \001(\0132\025.ex"
    "perimot.msgs.Color\022\034\n\024attenuation_consta"
    "nt\030\006 \001(\002\022\032\n\022attenuation_linear\030\007 \001(\002\022\035\n\025"
    "attenuation_quadratic\030\010 \001(\002\022+\n\tdirection"
    "\030\t \001(\0132\030.experimot.msgs.Vector3d\022\r\n\005rang"
    "e\030\n \001(\002\022\024\n\014cast_shadows\030\013 \001(\010\022\030\n\020spot_in"
    "ner_angle\030\014 \001(\002\022\030\n\020spot_outer_angle\030\r \001("
    "\002\022\024\n\014spot_falloff\030\016 \001(\002\"1\n\tLightType\022\t\n\005"
    "POINT\020\001\022\010\n\004SPOT\020\002\022\017\n\013DIRECTIONAL\020\003", 554);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "light.proto", &protobuf_RegisterTypes);
  Light::default_instance_ = new Light();
  Light::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_light_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_light_2eproto {
  StaticDescriptorInitializer_light_2eproto() {
    protobuf_AddDesc_light_2eproto();
  }
} static_descriptor_initializer_light_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Light_LightType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Light_LightType_descriptor_;
}
bool Light_LightType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Light_LightType Light::POINT;
const Light_LightType Light::SPOT;
const Light_LightType Light::DIRECTIONAL;
const Light_LightType Light::LightType_MIN;
const Light_LightType Light::LightType_MAX;
const int Light::LightType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Light::kNameFieldNumber;
const int Light::kTypeFieldNumber;
const int Light::kPoseFieldNumber;
const int Light::kDiffuseFieldNumber;
const int Light::kSpecularFieldNumber;
const int Light::kAttenuationConstantFieldNumber;
const int Light::kAttenuationLinearFieldNumber;
const int Light::kAttenuationQuadraticFieldNumber;
const int Light::kDirectionFieldNumber;
const int Light::kRangeFieldNumber;
const int Light::kCastShadowsFieldNumber;
const int Light::kSpotInnerAngleFieldNumber;
const int Light::kSpotOuterAngleFieldNumber;
const int Light::kSpotFalloffFieldNumber;
#endif  // !_MSC_VER

Light::Light()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Light)
}

void Light::InitAsDefaultInstance() {
  pose_ = const_cast< ::experimot::msgs::Pose*>(&::experimot::msgs::Pose::default_instance());
  diffuse_ = const_cast< ::experimot::msgs::Color*>(&::experimot::msgs::Color::default_instance());
  specular_ = const_cast< ::experimot::msgs::Color*>(&::experimot::msgs::Color::default_instance());
  direction_ = const_cast< ::experimot::msgs::Vector3d*>(&::experimot::msgs::Vector3d::default_instance());
}

Light::Light(const Light& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Light)
}

void Light::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  pose_ = NULL;
  diffuse_ = NULL;
  specular_ = NULL;
  attenuation_constant_ = 0;
  attenuation_linear_ = 0;
  attenuation_quadratic_ = 0;
  direction_ = NULL;
  range_ = 0;
  cast_shadows_ = false;
  spot_inner_angle_ = 0;
  spot_outer_angle_ = 0;
  spot_falloff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Light)
  SharedDtor();
}

void Light::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete pose_;
    delete diffuse_;
    delete specular_;
    delete direction_;
  }
}

void Light::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Light::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Light_descriptor_;
}

const Light& Light::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_light_2eproto();
  return *default_instance_;
}

Light* Light::default_instance_ = NULL;

Light* Light::New(::google::protobuf::Arena* arena) const {
  Light* n = new Light;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Light::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Light*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(attenuation_linear_, attenuation_quadratic_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 1;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::experimot::msgs::Pose::Clear();
    }
    if (has_diffuse()) {
      if (diffuse_ != NULL) diffuse_->::experimot::msgs::Color::Clear();
    }
    if (has_specular()) {
      if (specular_ != NULL) specular_->::experimot::msgs::Color::Clear();
    }
    attenuation_constant_ = 0;
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(range_, spot_falloff_);
    if (has_direction()) {
      if (direction_ != NULL) direction_->::experimot::msgs::Vector3d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Light::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Light)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Light.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .experimot.msgs.Light.LightType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::experimot::msgs::Light_LightType_IsValid(value)) {
            set_type(static_cast< ::experimot::msgs::Light_LightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }

      // optional .experimot.msgs.Pose pose = 3;
      case 3: {
        if (tag == 26) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_diffuse;
        break;
      }

      // optional .experimot.msgs.Color diffuse = 4;
      case 4: {
        if (tag == 34) {
         parse_diffuse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffuse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_specular;
        break;
      }

      // optional .experimot.msgs.Color specular = 5;
      case 5: {
        if (tag == 42) {
         parse_specular:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specular()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_attenuation_constant;
        break;
      }

      // optional float attenuation_constant = 6;
      case 6: {
        if (tag == 53) {
         parse_attenuation_constant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attenuation_constant_)));
          set_has_attenuation_constant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_attenuation_linear;
        break;
      }

      // optional float attenuation_linear = 7;
      case 7: {
        if (tag == 61) {
         parse_attenuation_linear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attenuation_linear_)));
          set_has_attenuation_linear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_attenuation_quadratic;
        break;
      }

      // optional float attenuation_quadratic = 8;
      case 8: {
        if (tag == 69) {
         parse_attenuation_quadratic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attenuation_quadratic_)));
          set_has_attenuation_quadratic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_direction;
        break;
      }

      // optional .experimot.msgs.Vector3d direction = 9;
      case 9: {
        if (tag == 74) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_range;
        break;
      }

      // optional float range = 10;
      case 10: {
        if (tag == 85) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cast_shadows;
        break;
      }

      // optional bool cast_shadows = 11;
      case 11: {
        if (tag == 88) {
         parse_cast_shadows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cast_shadows_)));
          set_has_cast_shadows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_spot_inner_angle;
        break;
      }

      // optional float spot_inner_angle = 12;
      case 12: {
        if (tag == 101) {
         parse_spot_inner_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spot_inner_angle_)));
          set_has_spot_inner_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_spot_outer_angle;
        break;
      }

      // optional float spot_outer_angle = 13;
      case 13: {
        if (tag == 109) {
         parse_spot_outer_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spot_outer_angle_)));
          set_has_spot_outer_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_spot_falloff;
        break;
      }

      // optional float spot_falloff = 14;
      case 14: {
        if (tag == 117) {
         parse_spot_falloff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spot_falloff_)));
          set_has_spot_falloff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Light)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Light)
  return false;
#undef DO_
}

void Light::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Light)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Light.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .experimot.msgs.Light.LightType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .experimot.msgs.Pose pose = 3;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pose_, output);
  }

  // optional .experimot.msgs.Color diffuse = 4;
  if (has_diffuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->diffuse_, output);
  }

  // optional .experimot.msgs.Color specular = 5;
  if (has_specular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->specular_, output);
  }

  // optional float attenuation_constant = 6;
  if (has_attenuation_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->attenuation_constant(), output);
  }

  // optional float attenuation_linear = 7;
  if (has_attenuation_linear()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->attenuation_linear(), output);
  }

  // optional float attenuation_quadratic = 8;
  if (has_attenuation_quadratic()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->attenuation_quadratic(), output);
  }

  // optional .experimot.msgs.Vector3d direction = 9;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->direction_, output);
  }

  // optional float range = 10;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->range(), output);
  }

  // optional bool cast_shadows = 11;
  if (has_cast_shadows()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->cast_shadows(), output);
  }

  // optional float spot_inner_angle = 12;
  if (has_spot_inner_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->spot_inner_angle(), output);
  }

  // optional float spot_outer_angle = 13;
  if (has_spot_outer_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->spot_outer_angle(), output);
  }

  // optional float spot_falloff = 14;
  if (has_spot_falloff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->spot_falloff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Light)
}

::google::protobuf::uint8* Light::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Light)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Light.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .experimot.msgs.Light.LightType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .experimot.msgs.Pose pose = 3;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->pose_, target);
  }

  // optional .experimot.msgs.Color diffuse = 4;
  if (has_diffuse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->diffuse_, target);
  }

  // optional .experimot.msgs.Color specular = 5;
  if (has_specular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->specular_, target);
  }

  // optional float attenuation_constant = 6;
  if (has_attenuation_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->attenuation_constant(), target);
  }

  // optional float attenuation_linear = 7;
  if (has_attenuation_linear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->attenuation_linear(), target);
  }

  // optional float attenuation_quadratic = 8;
  if (has_attenuation_quadratic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->attenuation_quadratic(), target);
  }

  // optional .experimot.msgs.Vector3d direction = 9;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->direction_, target);
  }

  // optional float range = 10;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->range(), target);
  }

  // optional bool cast_shadows = 11;
  if (has_cast_shadows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->cast_shadows(), target);
  }

  // optional float spot_inner_angle = 12;
  if (has_spot_inner_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->spot_inner_angle(), target);
  }

  // optional float spot_outer_angle = 13;
  if (has_spot_outer_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->spot_outer_angle(), target);
  }

  // optional float spot_falloff = 14;
  if (has_spot_falloff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->spot_falloff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Light)
  return target;
}

int Light::ByteSize() const {
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[1 / 32] & 254) {
    // optional .experimot.msgs.Light.LightType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .experimot.msgs.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .experimot.msgs.Color diffuse = 4;
    if (has_diffuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->diffuse_);
    }

    // optional .experimot.msgs.Color specular = 5;
    if (has_specular()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->specular_);
    }

    // optional float attenuation_constant = 6;
    if (has_attenuation_constant()) {
      total_size += 1 + 4;
    }

    // optional float attenuation_linear = 7;
    if (has_attenuation_linear()) {
      total_size += 1 + 4;
    }

    // optional float attenuation_quadratic = 8;
    if (has_attenuation_quadratic()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 16128) {
    // optional .experimot.msgs.Vector3d direction = 9;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->direction_);
    }

    // optional float range = 10;
    if (has_range()) {
      total_size += 1 + 4;
    }

    // optional bool cast_shadows = 11;
    if (has_cast_shadows()) {
      total_size += 1 + 1;
    }

    // optional float spot_inner_angle = 12;
    if (has_spot_inner_angle()) {
      total_size += 1 + 4;
    }

    // optional float spot_outer_angle = 13;
    if (has_spot_outer_angle()) {
      total_size += 1 + 4;
    }

    // optional float spot_falloff = 14;
    if (has_spot_falloff()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Light::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Light* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Light*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pose()) {
      mutable_pose()->::experimot::msgs::Pose::MergeFrom(from.pose());
    }
    if (from.has_diffuse()) {
      mutable_diffuse()->::experimot::msgs::Color::MergeFrom(from.diffuse());
    }
    if (from.has_specular()) {
      mutable_specular()->::experimot::msgs::Color::MergeFrom(from.specular());
    }
    if (from.has_attenuation_constant()) {
      set_attenuation_constant(from.attenuation_constant());
    }
    if (from.has_attenuation_linear()) {
      set_attenuation_linear(from.attenuation_linear());
    }
    if (from.has_attenuation_quadratic()) {
      set_attenuation_quadratic(from.attenuation_quadratic());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_direction()) {
      mutable_direction()->::experimot::msgs::Vector3d::MergeFrom(from.direction());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_cast_shadows()) {
      set_cast_shadows(from.cast_shadows());
    }
    if (from.has_spot_inner_angle()) {
      set_spot_inner_angle(from.spot_inner_angle());
    }
    if (from.has_spot_outer_angle()) {
      set_spot_outer_angle(from.spot_outer_angle());
    }
    if (from.has_spot_falloff()) {
      set_spot_falloff(from.spot_falloff());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Light::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_diffuse()) {
    if (!this->diffuse_->IsInitialized()) return false;
  }
  if (has_specular()) {
    if (!this->specular_->IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction_->IsInitialized()) return false;
  }
  return true;
}

void Light::Swap(Light* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Light::InternalSwap(Light* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(pose_, other->pose_);
  std::swap(diffuse_, other->diffuse_);
  std::swap(specular_, other->specular_);
  std::swap(attenuation_constant_, other->attenuation_constant_);
  std::swap(attenuation_linear_, other->attenuation_linear_);
  std::swap(attenuation_quadratic_, other->attenuation_quadratic_);
  std::swap(direction_, other->direction_);
  std::swap(range_, other->range_);
  std::swap(cast_shadows_, other->cast_shadows_);
  std::swap(spot_inner_angle_, other->spot_inner_angle_);
  std::swap(spot_outer_angle_, other->spot_outer_angle_);
  std::swap(spot_falloff_, other->spot_falloff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Light::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Light_descriptor_;
  metadata.reflection = Light_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Light

// required string name = 1;
 bool Light::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Light::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void Light::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Light::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Light::name() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Light::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Light.name)
}
 void Light::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Light.name)
}
 void Light::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Light.name)
}
 ::std::string* Light::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Light.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Light::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Light::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Light.name)
}

// optional .experimot.msgs.Light.LightType type = 2;
 bool Light::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Light::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
 void Light::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Light::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::experimot::msgs::Light_LightType Light::type() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.type)
  return static_cast< ::experimot::msgs::Light_LightType >(type_);
}
 void Light::set_type(::experimot::msgs::Light_LightType value) {
  assert(::experimot::msgs::Light_LightType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Light.type)
}

// optional .experimot.msgs.Pose pose = 3;
 bool Light::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Light::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
 void Light::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Light::clear_pose() {
  if (pose_ != NULL) pose_->::experimot::msgs::Pose::Clear();
  clear_has_pose();
}
 const ::experimot::msgs::Pose& Light::pose() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
 ::experimot::msgs::Pose* Light::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::experimot::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Light.pose)
  return pose_;
}
 ::experimot::msgs::Pose* Light::release_pose() {
  clear_has_pose();
  ::experimot::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
 void Light::set_allocated_pose(::experimot::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Light.pose)
}

// optional .experimot.msgs.Color diffuse = 4;
 bool Light::has_diffuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Light::set_has_diffuse() {
  _has_bits_[0] |= 0x00000008u;
}
 void Light::clear_has_diffuse() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Light::clear_diffuse() {
  if (diffuse_ != NULL) diffuse_->::experimot::msgs::Color::Clear();
  clear_has_diffuse();
}
 const ::experimot::msgs::Color& Light::diffuse() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.diffuse)
  return diffuse_ != NULL ? *diffuse_ : *default_instance_->diffuse_;
}
 ::experimot::msgs::Color* Light::mutable_diffuse() {
  set_has_diffuse();
  if (diffuse_ == NULL) {
    diffuse_ = new ::experimot::msgs::Color;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Light.diffuse)
  return diffuse_;
}
 ::experimot::msgs::Color* Light::release_diffuse() {
  clear_has_diffuse();
  ::experimot::msgs::Color* temp = diffuse_;
  diffuse_ = NULL;
  return temp;
}
 void Light::set_allocated_diffuse(::experimot::msgs::Color* diffuse) {
  delete diffuse_;
  diffuse_ = diffuse;
  if (diffuse) {
    set_has_diffuse();
  } else {
    clear_has_diffuse();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Light.diffuse)
}

// optional .experimot.msgs.Color specular = 5;
 bool Light::has_specular() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Light::set_has_specular() {
  _has_bits_[0] |= 0x00000010u;
}
 void Light::clear_has_specular() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Light::clear_specular() {
  if (specular_ != NULL) specular_->::experimot::msgs::Color::Clear();
  clear_has_specular();
}
 const ::experimot::msgs::Color& Light::specular() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.specular)
  return specular_ != NULL ? *specular_ : *default_instance_->specular_;
}
 ::experimot::msgs::Color* Light::mutable_specular() {
  set_has_specular();
  if (specular_ == NULL) {
    specular_ = new ::experimot::msgs::Color;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Light.specular)
  return specular_;
}
 ::experimot::msgs::Color* Light::release_specular() {
  clear_has_specular();
  ::experimot::msgs::Color* temp = specular_;
  specular_ = NULL;
  return temp;
}
 void Light::set_allocated_specular(::experimot::msgs::Color* specular) {
  delete specular_;
  specular_ = specular;
  if (specular) {
    set_has_specular();
  } else {
    clear_has_specular();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Light.specular)
}

// optional float attenuation_constant = 6;
 bool Light::has_attenuation_constant() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Light::set_has_attenuation_constant() {
  _has_bits_[0] |= 0x00000020u;
}
 void Light::clear_has_attenuation_constant() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Light::clear_attenuation_constant() {
  attenuation_constant_ = 0;
  clear_has_attenuation_constant();
}
 float Light::attenuation_constant() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.attenuation_constant)
  return attenuation_constant_;
}
 void Light::set_attenuation_constant(float value) {
  set_has_attenuation_constant();
  attenuation_constant_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Light.attenuation_constant)
}

// optional float attenuation_linear = 7;
 bool Light::has_attenuation_linear() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Light::set_has_attenuation_linear() {
  _has_bits_[0] |= 0x00000040u;
}
 void Light::clear_has_attenuation_linear() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Light::clear_attenuation_linear() {
  attenuation_linear_ = 0;
  clear_has_attenuation_linear();
}
 float Light::attenuation_linear() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.attenuation_linear)
  return attenuation_linear_;
}
 void Light::set_attenuation_linear(float value) {
  set_has_attenuation_linear();
  attenuation_linear_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Light.attenuation_linear)
}

// optional float attenuation_quadratic = 8;
 bool Light::has_attenuation_quadratic() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Light::set_has_attenuation_quadratic() {
  _has_bits_[0] |= 0x00000080u;
}
 void Light::clear_has_attenuation_quadratic() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Light::clear_attenuation_quadratic() {
  attenuation_quadratic_ = 0;
  clear_has_attenuation_quadratic();
}
 float Light::attenuation_quadratic() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.attenuation_quadratic)
  return attenuation_quadratic_;
}
 void Light::set_attenuation_quadratic(float value) {
  set_has_attenuation_quadratic();
  attenuation_quadratic_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Light.attenuation_quadratic)
}

// optional .experimot.msgs.Vector3d direction = 9;
 bool Light::has_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Light::set_has_direction() {
  _has_bits_[0] |= 0x00000100u;
}
 void Light::clear_has_direction() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Light::clear_direction() {
  if (direction_ != NULL) direction_->::experimot::msgs::Vector3d::Clear();
  clear_has_direction();
}
 const ::experimot::msgs::Vector3d& Light::direction() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
 ::experimot::msgs::Vector3d* Light::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::experimot::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Light.direction)
  return direction_;
}
 ::experimot::msgs::Vector3d* Light::release_direction() {
  clear_has_direction();
  ::experimot::msgs::Vector3d* temp = direction_;
  direction_ = NULL;
  return temp;
}
 void Light::set_allocated_direction(::experimot::msgs::Vector3d* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Light.direction)
}

// optional float range = 10;
 bool Light::has_range() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void Light::set_has_range() {
  _has_bits_[0] |= 0x00000200u;
}
 void Light::clear_has_range() {
  _has_bits_[0] &= ~0x00000200u;
}
 void Light::clear_range() {
  range_ = 0;
  clear_has_range();
}
 float Light::range() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.range)
  return range_;
}
 void Light::set_range(float value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Light.range)
}

// optional bool cast_shadows = 11;
 bool Light::has_cast_shadows() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void Light::set_has_cast_shadows() {
  _has_bits_[0] |= 0x00000400u;
}
 void Light::clear_has_cast_shadows() {
  _has_bits_[0] &= ~0x00000400u;
}
 void Light::clear_cast_shadows() {
  cast_shadows_ = false;
  clear_has_cast_shadows();
}
 bool Light::cast_shadows() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.cast_shadows)
  return cast_shadows_;
}
 void Light::set_cast_shadows(bool value) {
  set_has_cast_shadows();
  cast_shadows_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Light.cast_shadows)
}

// optional float spot_inner_angle = 12;
 bool Light::has_spot_inner_angle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void Light::set_has_spot_inner_angle() {
  _has_bits_[0] |= 0x00000800u;
}
 void Light::clear_has_spot_inner_angle() {
  _has_bits_[0] &= ~0x00000800u;
}
 void Light::clear_spot_inner_angle() {
  spot_inner_angle_ = 0;
  clear_has_spot_inner_angle();
}
 float Light::spot_inner_angle() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.spot_inner_angle)
  return spot_inner_angle_;
}
 void Light::set_spot_inner_angle(float value) {
  set_has_spot_inner_angle();
  spot_inner_angle_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Light.spot_inner_angle)
}

// optional float spot_outer_angle = 13;
 bool Light::has_spot_outer_angle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void Light::set_has_spot_outer_angle() {
  _has_bits_[0] |= 0x00001000u;
}
 void Light::clear_has_spot_outer_angle() {
  _has_bits_[0] &= ~0x00001000u;
}
 void Light::clear_spot_outer_angle() {
  spot_outer_angle_ = 0;
  clear_has_spot_outer_angle();
}
 float Light::spot_outer_angle() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.spot_outer_angle)
  return spot_outer_angle_;
}
 void Light::set_spot_outer_angle(float value) {
  set_has_spot_outer_angle();
  spot_outer_angle_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Light.spot_outer_angle)
}

// optional float spot_falloff = 14;
 bool Light::has_spot_falloff() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
 void Light::set_has_spot_falloff() {
  _has_bits_[0] |= 0x00002000u;
}
 void Light::clear_has_spot_falloff() {
  _has_bits_[0] &= ~0x00002000u;
}
 void Light::clear_spot_falloff() {
  spot_falloff_ = 0;
  clear_has_spot_falloff();
}
 float Light::spot_falloff() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Light.spot_falloff)
  return spot_falloff_;
}
 void Light::set_spot_falloff(float value) {
  set_has_spot_falloff();
  spot_falloff_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Light.spot_falloff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.Light", Light)
// @@protoc_insertion_point(global_scope)
