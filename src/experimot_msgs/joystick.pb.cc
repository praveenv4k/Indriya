// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joystick.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "joystick.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Joystick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Joystick_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_joystick_2eproto() {
  protobuf_AddDesc_joystick_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "joystick.proto");
  GOOGLE_CHECK(file != NULL);
  Joystick_descriptor_ = file->message_type(0);
  static const int Joystick_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joystick, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joystick, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joystick, buttons_),
  };
  Joystick_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Joystick_descriptor_,
      Joystick::default_instance_,
      Joystick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joystick, _has_bits_[0]),
      -1,
      -1,
      sizeof(Joystick),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joystick, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_joystick_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Joystick_descriptor_, &Joystick::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_joystick_2eproto() {
  delete Joystick::default_instance_;
  delete Joystick_reflection_;
}

void protobuf_AddDesc_joystick_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016joystick.proto\022\016experimot.msgs\032\016vector"
    "3d.proto\"v\n\010Joystick\022-\n\013translation\030\001 \001("
    "\0132\030.experimot.msgs.Vector3d\022*\n\010rotation\030"
    "\002 \001(\0132\030.experimot.msgs.Vector3d\022\017\n\007butto"
    "ns\030\003 \003(\005", 168);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "joystick.proto", &protobuf_RegisterTypes);
  Joystick::default_instance_ = new Joystick();
  Joystick::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_joystick_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_joystick_2eproto {
  StaticDescriptorInitializer_joystick_2eproto() {
    protobuf_AddDesc_joystick_2eproto();
  }
} static_descriptor_initializer_joystick_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Joystick::kTranslationFieldNumber;
const int Joystick::kRotationFieldNumber;
const int Joystick::kButtonsFieldNumber;
#endif  // !_MSC_VER

Joystick::Joystick()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Joystick)
}

void Joystick::InitAsDefaultInstance() {
  translation_ = const_cast< ::experimot::msgs::Vector3d*>(&::experimot::msgs::Vector3d::default_instance());
  rotation_ = const_cast< ::experimot::msgs::Vector3d*>(&::experimot::msgs::Vector3d::default_instance());
}

Joystick::Joystick(const Joystick& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Joystick)
}

void Joystick::SharedCtor() {
  _cached_size_ = 0;
  translation_ = NULL;
  rotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Joystick::~Joystick() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Joystick)
  SharedDtor();
}

void Joystick::SharedDtor() {
  if (this != default_instance_) {
    delete translation_;
    delete rotation_;
  }
}

void Joystick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Joystick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Joystick_descriptor_;
}

const Joystick& Joystick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_joystick_2eproto();
  return *default_instance_;
}

Joystick* Joystick::default_instance_ = NULL;

Joystick* Joystick::New(::google::protobuf::Arena* arena) const {
  Joystick* n = new Joystick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Joystick::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_translation()) {
      if (translation_ != NULL) translation_->::experimot::msgs::Vector3d::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::experimot::msgs::Vector3d::Clear();
    }
  }
  buttons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Joystick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Joystick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .experimot.msgs.Vector3d translation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rotation;
        break;
      }

      // optional .experimot.msgs.Vector3d rotation = 2;
      case 2: {
        if (tag == 18) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buttons;
        break;
      }

      // repeated int32 buttons = 3;
      case 3: {
        if (tag == 24) {
         parse_buttons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_buttons())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buttons())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buttons;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Joystick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Joystick)
  return false;
#undef DO_
}

void Joystick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Joystick)
  // optional .experimot.msgs.Vector3d translation = 1;
  if (has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // optional .experimot.msgs.Vector3d rotation = 2;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotation_, output);
  }

  // repeated int32 buttons = 3;
  for (int i = 0; i < this->buttons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->buttons(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Joystick)
}

::google::protobuf::uint8* Joystick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Joystick)
  // optional .experimot.msgs.Vector3d translation = 1;
  if (has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->translation_, target);
  }

  // optional .experimot.msgs.Vector3d rotation = 2;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->rotation_, target);
  }

  // repeated int32 buttons = 3;
  for (int i = 0; i < this->buttons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->buttons(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Joystick)
  return target;
}

int Joystick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional .experimot.msgs.Vector3d translation = 1;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->translation_);
    }

    // optional .experimot.msgs.Vector3d rotation = 2;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rotation_);
    }

  }
  // repeated int32 buttons = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->buttons_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buttons(i));
    }
    total_size += 1 * this->buttons_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Joystick::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Joystick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Joystick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Joystick::MergeFrom(const Joystick& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  buttons_.MergeFrom(from.buttons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_translation()) {
      mutable_translation()->::experimot::msgs::Vector3d::MergeFrom(from.translation());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::experimot::msgs::Vector3d::MergeFrom(from.rotation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Joystick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joystick::CopyFrom(const Joystick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joystick::IsInitialized() const {

  if (has_translation()) {
    if (!this->translation_->IsInitialized()) return false;
  }
  if (has_rotation()) {
    if (!this->rotation_->IsInitialized()) return false;
  }
  return true;
}

void Joystick::Swap(Joystick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Joystick::InternalSwap(Joystick* other) {
  std::swap(translation_, other->translation_);
  std::swap(rotation_, other->rotation_);
  buttons_.UnsafeArenaSwap(&other->buttons_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Joystick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Joystick_descriptor_;
  metadata.reflection = Joystick_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Joystick

// optional .experimot.msgs.Vector3d translation = 1;
 bool Joystick::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Joystick::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
 void Joystick::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Joystick::clear_translation() {
  if (translation_ != NULL) translation_->::experimot::msgs::Vector3d::Clear();
  clear_has_translation();
}
 const ::experimot::msgs::Vector3d& Joystick::translation() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joystick.translation)
  return translation_ != NULL ? *translation_ : *default_instance_->translation_;
}
 ::experimot::msgs::Vector3d* Joystick::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::experimot::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Joystick.translation)
  return translation_;
}
 ::experimot::msgs::Vector3d* Joystick::release_translation() {
  clear_has_translation();
  ::experimot::msgs::Vector3d* temp = translation_;
  translation_ = NULL;
  return temp;
}
 void Joystick::set_allocated_translation(::experimot::msgs::Vector3d* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Joystick.translation)
}

// optional .experimot.msgs.Vector3d rotation = 2;
 bool Joystick::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Joystick::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
 void Joystick::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Joystick::clear_rotation() {
  if (rotation_ != NULL) rotation_->::experimot::msgs::Vector3d::Clear();
  clear_has_rotation();
}
 const ::experimot::msgs::Vector3d& Joystick::rotation() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joystick.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
 ::experimot::msgs::Vector3d* Joystick::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::experimot::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Joystick.rotation)
  return rotation_;
}
 ::experimot::msgs::Vector3d* Joystick::release_rotation() {
  clear_has_rotation();
  ::experimot::msgs::Vector3d* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
 void Joystick::set_allocated_rotation(::experimot::msgs::Vector3d* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Joystick.rotation)
}

// repeated int32 buttons = 3;
 int Joystick::buttons_size() const {
  return buttons_.size();
}
 void Joystick::clear_buttons() {
  buttons_.Clear();
}
 ::google::protobuf::int32 Joystick::buttons(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joystick.buttons)
  return buttons_.Get(index);
}
 void Joystick::set_buttons(int index, ::google::protobuf::int32 value) {
  buttons_.Set(index, value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Joystick.buttons)
}
 void Joystick::add_buttons(::google::protobuf::int32 value) {
  buttons_.Add(value);
  // @@protoc_insertion_point(field_add:experimot.msgs.Joystick.buttons)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Joystick::buttons() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Joystick.buttons)
  return buttons_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Joystick::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Joystick.buttons)
  return &buttons_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.Joystick", Joystick)
// @@protoc_insertion_point(global_scope)
