// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shadows.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "shadows.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Shadows_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shadows_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Shadows_ShadowType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_shadows_2eproto() {
  protobuf_AddDesc_shadows_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "shadows.proto");
  GOOGLE_CHECK(file != NULL);
  Shadows_descriptor_ = file->message_type(0);
  static const int Shadows_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shadows, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shadows, color_),
  };
  Shadows_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Shadows_descriptor_,
      Shadows::default_instance_,
      Shadows_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shadows, _has_bits_[0]),
      -1,
      -1,
      sizeof(Shadows),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shadows, _internal_metadata_),
      -1);
  Shadows_ShadowType_descriptor_ = Shadows_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_shadows_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Shadows_descriptor_, &Shadows::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_shadows_2eproto() {
  delete Shadows::default_instance_;
  delete Shadows_reflection_;
}

void protobuf_AddDesc_shadows_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_color_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rshadows.proto\022\016experimot.msgs\032\013color.p"
    "roto\"\313\001\n\007Shadows\0220\n\004type\030\005 \001(\0162\".experim"
    "ot.msgs.Shadows.ShadowType\022$\n\005color\030\006 \001("
    "\0132\025.experimot.msgs.Color\"h\n\nShadowType\022\024"
    "\n\020STENCIL_ADDITIVE\020\001\022\026\n\022STENCIL_MODULATI"
    "VE\020\002\022\024\n\020TEXTURE_ADDITIVE\020\003\022\026\n\022TEXTURE_MO"
    "DULATIVE\020\004", 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "shadows.proto", &protobuf_RegisterTypes);
  Shadows::default_instance_ = new Shadows();
  Shadows::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_shadows_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_shadows_2eproto {
  StaticDescriptorInitializer_shadows_2eproto() {
    protobuf_AddDesc_shadows_2eproto();
  }
} static_descriptor_initializer_shadows_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Shadows_ShadowType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shadows_ShadowType_descriptor_;
}
bool Shadows_ShadowType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Shadows_ShadowType Shadows::STENCIL_ADDITIVE;
const Shadows_ShadowType Shadows::STENCIL_MODULATIVE;
const Shadows_ShadowType Shadows::TEXTURE_ADDITIVE;
const Shadows_ShadowType Shadows::TEXTURE_MODULATIVE;
const Shadows_ShadowType Shadows::ShadowType_MIN;
const Shadows_ShadowType Shadows::ShadowType_MAX;
const int Shadows::ShadowType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Shadows::kTypeFieldNumber;
const int Shadows::kColorFieldNumber;
#endif  // !_MSC_VER

Shadows::Shadows()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Shadows)
}

void Shadows::InitAsDefaultInstance() {
  color_ = const_cast< ::experimot::msgs::Color*>(&::experimot::msgs::Color::default_instance());
}

Shadows::Shadows(const Shadows& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Shadows)
}

void Shadows::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shadows::~Shadows() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Shadows)
  SharedDtor();
}

void Shadows::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
  }
}

void Shadows::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shadows::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shadows_descriptor_;
}

const Shadows& Shadows::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shadows_2eproto();
  return *default_instance_;
}

Shadows* Shadows::default_instance_ = NULL;

Shadows* Shadows::New(::google::protobuf::Arena* arena) const {
  Shadows* n = new Shadows;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Shadows::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_color()) {
      if (color_ != NULL) color_->::experimot::msgs::Color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Shadows::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Shadows)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .experimot.msgs.Shadows.ShadowType type = 5;
      case 5: {
        if (tag == 40) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::experimot::msgs::Shadows_ShadowType_IsValid(value)) {
            set_type(static_cast< ::experimot::msgs::Shadows_ShadowType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_color;
        break;
      }

      // optional .experimot.msgs.Color color = 6;
      case 6: {
        if (tag == 50) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Shadows)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Shadows)
  return false;
#undef DO_
}

void Shadows::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Shadows)
  // optional .experimot.msgs.Shadows.ShadowType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .experimot.msgs.Color color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->color_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Shadows)
}

::google::protobuf::uint8* Shadows::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Shadows)
  // optional .experimot.msgs.Shadows.ShadowType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .experimot.msgs.Color color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->color_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Shadows)
  return target;
}

int Shadows::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional .experimot.msgs.Shadows.ShadowType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .experimot.msgs.Color color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->color_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shadows::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Shadows* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shadows*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shadows::MergeFrom(const Shadows& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_color()) {
      mutable_color()->::experimot::msgs::Color::MergeFrom(from.color());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Shadows::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shadows::CopyFrom(const Shadows& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shadows::IsInitialized() const {

  if (has_color()) {
    if (!this->color_->IsInitialized()) return false;
  }
  return true;
}

void Shadows::Swap(Shadows* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shadows::InternalSwap(Shadows* other) {
  std::swap(type_, other->type_);
  std::swap(color_, other->color_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Shadows::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shadows_descriptor_;
  metadata.reflection = Shadows_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Shadows

// optional .experimot.msgs.Shadows.ShadowType type = 5;
 bool Shadows::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Shadows::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
 void Shadows::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Shadows::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::experimot::msgs::Shadows_ShadowType Shadows::type() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Shadows.type)
  return static_cast< ::experimot::msgs::Shadows_ShadowType >(type_);
}
 void Shadows::set_type(::experimot::msgs::Shadows_ShadowType value) {
  assert(::experimot::msgs::Shadows_ShadowType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Shadows.type)
}

// optional .experimot.msgs.Color color = 6;
 bool Shadows::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Shadows::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
 void Shadows::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Shadows::clear_color() {
  if (color_ != NULL) color_->::experimot::msgs::Color::Clear();
  clear_has_color();
}
 const ::experimot::msgs::Color& Shadows::color() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Shadows.color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
 ::experimot::msgs::Color* Shadows::mutable_color() {
  set_has_color();
  if (color_ == NULL) {
    color_ = new ::experimot::msgs::Color;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Shadows.color)
  return color_;
}
 ::experimot::msgs::Color* Shadows::release_color() {
  clear_has_color();
  ::experimot::msgs::Color* temp = color_;
  color_ = NULL;
  return temp;
}
 void Shadows::set_allocated_color(::experimot::msgs::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Shadows.color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.Shadows", Shadows)
// @@protoc_insertion_point(global_scope)
