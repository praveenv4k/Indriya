//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: proto/meshgeom.proto
// Note: requires additional types generated from: vector3d.proto
namespace experimot.msgs
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"MeshGeom")]
  public partial class MeshGeom : global::ProtoBuf.IExtensible
  {
    public MeshGeom() {}
    
    private string _filename;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"filename", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public string filename
    {
      get { return _filename; }
      set { _filename = value; }
    }
    private experimot.msgs.Vector3d _scale = null;
    [global::ProtoBuf.ProtoMember(2, IsRequired = false, Name=@"scale", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue(null)]
    public experimot.msgs.Vector3d scale
    {
      get { return _scale; }
      set { _scale = value; }
    }
    private string _submesh = "";
    [global::ProtoBuf.ProtoMember(3, IsRequired = false, Name=@"submesh", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue("")]
    public string submesh
    {
      get { return _submesh; }
      set { _submesh = value; }
    }
    private bool _center_submesh = default(bool);
    [global::ProtoBuf.ProtoMember(4, IsRequired = false, Name=@"center_submesh", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue(default(bool))]
    public bool center_submesh
    {
      get { return _center_submesh; }
      set { _center_submesh = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}