// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "joint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Joint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Joint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Joint_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_joint_2eproto() {
  protobuf_AddDesc_joint_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "joint.proto");
  GOOGLE_CHECK(file != NULL);
  Joint_descriptor_ = file->message_type(0);
  static const int Joint_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, child_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, child_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, axis1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, axis2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, cfm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, bounce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, fudge_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, limit_cfm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, limit_erp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, suspension_cfm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, suspension_erp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, sensor_),
  };
  Joint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Joint_descriptor_,
      Joint::default_instance_,
      Joint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, _has_bits_[0]),
      -1,
      -1,
      sizeof(Joint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, _internal_metadata_),
      -1);
  Joint_Type_descriptor_ = Joint_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_joint_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Joint_descriptor_, &Joint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_joint_2eproto() {
  delete Joint::default_instance_;
  delete Joint_reflection_;
}

void protobuf_AddDesc_joint_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_axis_2eproto();
  ::experimot::msgs::protobuf_AddDesc_pose_2eproto();
  ::experimot::msgs::protobuf_AddDesc_sensor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013joint.proto\022\016experimot.msgs\032\naxis.prot"
    "o\032\npose.proto\032\014sensor.proto\"\264\004\n\005Joint\022\014\n"
    "\004name\030\001 \002(\t\022\n\n\002id\030\002 \001(\r\022\r\n\005angle\030\003 \003(\001\022("
    "\n\004type\030\004 \001(\0162\032.experimot.msgs.Joint.Type"
    "\022\016\n\006parent\030\005 \001(\t\022\021\n\tparent_id\030\006 \001(\r\022\r\n\005c"
    "hild\030\007 \001(\t\022\020\n\010child_id\030\010 \001(\r\022\"\n\004pose\030\t \001"
    "(\0132\024.experimot.msgs.Pose\022#\n\005axis1\030\n \001(\0132"
    "\024.experimot.msgs.Axis\022#\n\005axis2\030\013 \001(\0132\024.e"
    "xperimot.msgs.Axis\022\013\n\003cfm\030\014 \001(\001\022\016\n\006bounc"
    "e\030\r \001(\001\022\020\n\010velocity\030\016 \001(\001\022\024\n\014fudge_facto"
    "r\030\017 \001(\001\022\021\n\tlimit_cfm\030\020 \001(\001\022\021\n\tlimit_erp\030"
    "\021 \001(\001\022\026\n\016suspension_cfm\030\022 \001(\001\022\026\n\016suspens"
    "ion_erp\030\023 \001(\001\022&\n\006sensor\030\024 \003(\0132\026.experimo"
    "t.msgs.Sensor\"c\n\004Type\022\014\n\010REVOLUTE\020\001\022\r\n\tR"
    "EVOLUTE2\020\002\022\r\n\tPRISMATIC\020\003\022\r\n\tUNIVERSAL\020\004"
    "\022\010\n\004BALL\020\005\022\t\n\005SCREW\020\006\022\013\n\007GEARBOX\020\007", 634);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "joint.proto", &protobuf_RegisterTypes);
  Joint::default_instance_ = new Joint();
  Joint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_joint_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_joint_2eproto {
  StaticDescriptorInitializer_joint_2eproto() {
    protobuf_AddDesc_joint_2eproto();
  }
} static_descriptor_initializer_joint_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Joint_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Joint_Type_descriptor_;
}
bool Joint_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Joint_Type Joint::REVOLUTE;
const Joint_Type Joint::REVOLUTE2;
const Joint_Type Joint::PRISMATIC;
const Joint_Type Joint::UNIVERSAL;
const Joint_Type Joint::BALL;
const Joint_Type Joint::SCREW;
const Joint_Type Joint::GEARBOX;
const Joint_Type Joint::Type_MIN;
const Joint_Type Joint::Type_MAX;
const int Joint::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Joint::kNameFieldNumber;
const int Joint::kIdFieldNumber;
const int Joint::kAngleFieldNumber;
const int Joint::kTypeFieldNumber;
const int Joint::kParentFieldNumber;
const int Joint::kParentIdFieldNumber;
const int Joint::kChildFieldNumber;
const int Joint::kChildIdFieldNumber;
const int Joint::kPoseFieldNumber;
const int Joint::kAxis1FieldNumber;
const int Joint::kAxis2FieldNumber;
const int Joint::kCfmFieldNumber;
const int Joint::kBounceFieldNumber;
const int Joint::kVelocityFieldNumber;
const int Joint::kFudgeFactorFieldNumber;
const int Joint::kLimitCfmFieldNumber;
const int Joint::kLimitErpFieldNumber;
const int Joint::kSuspensionCfmFieldNumber;
const int Joint::kSuspensionErpFieldNumber;
const int Joint::kSensorFieldNumber;
#endif  // !_MSC_VER

Joint::Joint()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Joint)
}

void Joint::InitAsDefaultInstance() {
  pose_ = const_cast< ::experimot::msgs::Pose*>(&::experimot::msgs::Pose::default_instance());
  axis1_ = const_cast< ::experimot::msgs::Axis*>(&::experimot::msgs::Axis::default_instance());
  axis2_ = const_cast< ::experimot::msgs::Axis*>(&::experimot::msgs::Axis::default_instance());
}

Joint::Joint(const Joint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Joint)
}

void Joint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  type_ = 1;
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_ = 0u;
  child_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_id_ = 0u;
  pose_ = NULL;
  axis1_ = NULL;
  axis2_ = NULL;
  cfm_ = 0;
  bounce_ = 0;
  velocity_ = 0;
  fudge_factor_ = 0;
  limit_cfm_ = 0;
  limit_erp_ = 0;
  suspension_cfm_ = 0;
  suspension_erp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Joint::~Joint() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Joint)
  SharedDtor();
}

void Joint::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete pose_;
    delete axis1_;
    delete axis2_;
  }
}

void Joint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Joint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Joint_descriptor_;
}

const Joint& Joint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_joint_2eproto();
  return *default_instance_;
}

Joint* Joint::default_instance_ = NULL;

Joint* Joint::New(::google::protobuf::Arena* arena) const {
  Joint* n = new Joint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Joint::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Joint*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(parent_id_, child_id_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    id_ = 0u;
    type_ = 1;
    if (has_parent()) {
      parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_child()) {
      child_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(cfm_, limit_cfm_);
    if (has_pose()) {
      if (pose_ != NULL) pose_->::experimot::msgs::Pose::Clear();
    }
    if (has_axis1()) {
      if (axis1_ != NULL) axis1_->::experimot::msgs::Axis::Clear();
    }
    if (has_axis2()) {
      if (axis2_ != NULL) axis2_->::experimot::msgs::Axis::Clear();
    }
  }
  ZR_(limit_erp_, suspension_erp_);

#undef ZR_HELPER_
#undef ZR_

  angle_.Clear();
  sensor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Joint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Joint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Joint.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_angle;
        break;
      }

      // repeated double angle = 3;
      case 3: {
        if (tag == 25) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_angle())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_angle())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_angle;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .experimot.msgs.Joint.Type type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::experimot::msgs::Joint_Type_IsValid(value)) {
            set_type(static_cast< ::experimot::msgs::Joint_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_parent;
        break;
      }

      // optional string parent = 5;
      case 5: {
        if (tag == 42) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Joint.parent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_parent_id;
        break;
      }

      // optional uint32 parent_id = 6;
      case 6: {
        if (tag == 48) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_child;
        break;
      }

      // optional string child = 7;
      case 7: {
        if (tag == 58) {
         parse_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_child()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->child().data(), this->child().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Joint.child");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_child_id;
        break;
      }

      // optional uint32 child_id = 8;
      case 8: {
        if (tag == 64) {
         parse_child_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &child_id_)));
          set_has_child_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_pose;
        break;
      }

      // optional .experimot.msgs.Pose pose = 9;
      case 9: {
        if (tag == 74) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_axis1;
        break;
      }

      // optional .experimot.msgs.Axis axis1 = 10;
      case 10: {
        if (tag == 82) {
         parse_axis1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_axis2;
        break;
      }

      // optional .experimot.msgs.Axis axis2 = 11;
      case 11: {
        if (tag == 90) {
         parse_axis2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_cfm;
        break;
      }

      // optional double cfm = 12;
      case 12: {
        if (tag == 97) {
         parse_cfm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cfm_)));
          set_has_cfm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_bounce;
        break;
      }

      // optional double bounce = 13;
      case 13: {
        if (tag == 105) {
         parse_bounce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bounce_)));
          set_has_bounce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_velocity;
        break;
      }

      // optional double velocity = 14;
      case 14: {
        if (tag == 113) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_fudge_factor;
        break;
      }

      // optional double fudge_factor = 15;
      case 15: {
        if (tag == 121) {
         parse_fudge_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fudge_factor_)));
          set_has_fudge_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_limit_cfm;
        break;
      }

      // optional double limit_cfm = 16;
      case 16: {
        if (tag == 129) {
         parse_limit_cfm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_cfm_)));
          set_has_limit_cfm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_limit_erp;
        break;
      }

      // optional double limit_erp = 17;
      case 17: {
        if (tag == 137) {
         parse_limit_erp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_erp_)));
          set_has_limit_erp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_suspension_cfm;
        break;
      }

      // optional double suspension_cfm = 18;
      case 18: {
        if (tag == 145) {
         parse_suspension_cfm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &suspension_cfm_)));
          set_has_suspension_cfm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_suspension_erp;
        break;
      }

      // optional double suspension_erp = 19;
      case 19: {
        if (tag == 153) {
         parse_suspension_erp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &suspension_erp_)));
          set_has_suspension_erp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_sensor;
        break;
      }

      // repeated .experimot.msgs.Sensor sensor = 20;
      case 20: {
        if (tag == 162) {
         parse_sensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_sensor;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Joint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Joint)
  return false;
#undef DO_
}

void Joint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Joint)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Joint.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // repeated double angle = 3;
  for (int i = 0; i < this->angle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->angle(i), output);
  }

  // optional .experimot.msgs.Joint.Type type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string parent = 5;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Joint.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->parent(), output);
  }

  // optional uint32 parent_id = 6;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->parent_id(), output);
  }

  // optional string child = 7;
  if (has_child()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child().data(), this->child().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Joint.child");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->child(), output);
  }

  // optional uint32 child_id = 8;
  if (has_child_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->child_id(), output);
  }

  // optional .experimot.msgs.Pose pose = 9;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->pose_, output);
  }

  // optional .experimot.msgs.Axis axis1 = 10;
  if (has_axis1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->axis1_, output);
  }

  // optional .experimot.msgs.Axis axis2 = 11;
  if (has_axis2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->axis2_, output);
  }

  // optional double cfm = 12;
  if (has_cfm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->cfm(), output);
  }

  // optional double bounce = 13;
  if (has_bounce()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->bounce(), output);
  }

  // optional double velocity = 14;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->velocity(), output);
  }

  // optional double fudge_factor = 15;
  if (has_fudge_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->fudge_factor(), output);
  }

  // optional double limit_cfm = 16;
  if (has_limit_cfm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->limit_cfm(), output);
  }

  // optional double limit_erp = 17;
  if (has_limit_erp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->limit_erp(), output);
  }

  // optional double suspension_cfm = 18;
  if (has_suspension_cfm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->suspension_cfm(), output);
  }

  // optional double suspension_erp = 19;
  if (has_suspension_erp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->suspension_erp(), output);
  }

  // repeated .experimot.msgs.Sensor sensor = 20;
  for (unsigned int i = 0, n = this->sensor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->sensor(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Joint)
}

::google::protobuf::uint8* Joint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Joint)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Joint.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // repeated double angle = 3;
  for (int i = 0; i < this->angle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->angle(i), target);
  }

  // optional .experimot.msgs.Joint.Type type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional string parent = 5;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Joint.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->parent(), target);
  }

  // optional uint32 parent_id = 6;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->parent_id(), target);
  }

  // optional string child = 7;
  if (has_child()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child().data(), this->child().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Joint.child");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->child(), target);
  }

  // optional uint32 child_id = 8;
  if (has_child_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->child_id(), target);
  }

  // optional .experimot.msgs.Pose pose = 9;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->pose_, target);
  }

  // optional .experimot.msgs.Axis axis1 = 10;
  if (has_axis1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->axis1_, target);
  }

  // optional .experimot.msgs.Axis axis2 = 11;
  if (has_axis2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->axis2_, target);
  }

  // optional double cfm = 12;
  if (has_cfm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->cfm(), target);
  }

  // optional double bounce = 13;
  if (has_bounce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->bounce(), target);
  }

  // optional double velocity = 14;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->velocity(), target);
  }

  // optional double fudge_factor = 15;
  if (has_fudge_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->fudge_factor(), target);
  }

  // optional double limit_cfm = 16;
  if (has_limit_cfm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->limit_cfm(), target);
  }

  // optional double limit_erp = 17;
  if (has_limit_erp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->limit_erp(), target);
  }

  // optional double suspension_cfm = 18;
  if (has_suspension_cfm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->suspension_cfm(), target);
  }

  // optional double suspension_erp = 19;
  if (has_suspension_erp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->suspension_erp(), target);
  }

  // repeated .experimot.msgs.Sensor sensor = 20;
  for (unsigned int i = 0, n = this->sensor_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->sensor(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Joint)
  return target;
}

int Joint::ByteSize() const {
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[1 / 32] & 250) {
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .experimot.msgs.Joint.Type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string parent = 5;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent());
    }

    // optional uint32 parent_id = 6;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_id());
    }

    // optional string child = 7;
    if (has_child()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->child());
    }

    // optional uint32 child_id = 8;
    if (has_child_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->child_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280) {
    // optional .experimot.msgs.Pose pose = 9;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .experimot.msgs.Axis axis1 = 10;
    if (has_axis1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->axis1_);
    }

    // optional .experimot.msgs.Axis axis2 = 11;
    if (has_axis2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->axis2_);
    }

    // optional double cfm = 12;
    if (has_cfm()) {
      total_size += 1 + 8;
    }

    // optional double bounce = 13;
    if (has_bounce()) {
      total_size += 1 + 8;
    }

    // optional double velocity = 14;
    if (has_velocity()) {
      total_size += 1 + 8;
    }

    // optional double fudge_factor = 15;
    if (has_fudge_factor()) {
      total_size += 1 + 8;
    }

    // optional double limit_cfm = 16;
    if (has_limit_cfm()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 458752) {
    // optional double limit_erp = 17;
    if (has_limit_erp()) {
      total_size += 2 + 8;
    }

    // optional double suspension_cfm = 18;
    if (has_suspension_cfm()) {
      total_size += 2 + 8;
    }

    // optional double suspension_erp = 19;
    if (has_suspension_erp()) {
      total_size += 2 + 8;
    }

  }
  // repeated double angle = 3;
  {
    int data_size = 0;
    data_size = 8 * this->angle_size();
    total_size += 1 * this->angle_size() + data_size;
  }

  // repeated .experimot.msgs.Sensor sensor = 20;
  total_size += 2 * this->sensor_size();
  for (int i = 0; i < this->sensor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensor(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Joint::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Joint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Joint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Joint::MergeFrom(const Joint& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  angle_.MergeFrom(from.angle_);
  sensor_.MergeFrom(from.sensor_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_parent()) {
      set_has_parent();
      parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_child()) {
      set_has_child();
      child_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.child_);
    }
    if (from.has_child_id()) {
      set_child_id(from.child_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pose()) {
      mutable_pose()->::experimot::msgs::Pose::MergeFrom(from.pose());
    }
    if (from.has_axis1()) {
      mutable_axis1()->::experimot::msgs::Axis::MergeFrom(from.axis1());
    }
    if (from.has_axis2()) {
      mutable_axis2()->::experimot::msgs::Axis::MergeFrom(from.axis2());
    }
    if (from.has_cfm()) {
      set_cfm(from.cfm());
    }
    if (from.has_bounce()) {
      set_bounce(from.bounce());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_fudge_factor()) {
      set_fudge_factor(from.fudge_factor());
    }
    if (from.has_limit_cfm()) {
      set_limit_cfm(from.limit_cfm());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_limit_erp()) {
      set_limit_erp(from.limit_erp());
    }
    if (from.has_suspension_cfm()) {
      set_suspension_cfm(from.suspension_cfm());
    }
    if (from.has_suspension_erp()) {
      set_suspension_erp(from.suspension_erp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Joint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joint::CopyFrom(const Joint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_axis1()) {
    if (!this->axis1_->IsInitialized()) return false;
  }
  if (has_axis2()) {
    if (!this->axis2_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->sensor())) return false;
  return true;
}

void Joint::Swap(Joint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Joint::InternalSwap(Joint* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  angle_.UnsafeArenaSwap(&other->angle_);
  std::swap(type_, other->type_);
  parent_.Swap(&other->parent_);
  std::swap(parent_id_, other->parent_id_);
  child_.Swap(&other->child_);
  std::swap(child_id_, other->child_id_);
  std::swap(pose_, other->pose_);
  std::swap(axis1_, other->axis1_);
  std::swap(axis2_, other->axis2_);
  std::swap(cfm_, other->cfm_);
  std::swap(bounce_, other->bounce_);
  std::swap(velocity_, other->velocity_);
  std::swap(fudge_factor_, other->fudge_factor_);
  std::swap(limit_cfm_, other->limit_cfm_);
  std::swap(limit_erp_, other->limit_erp_);
  std::swap(suspension_cfm_, other->suspension_cfm_);
  std::swap(suspension_erp_, other->suspension_erp_);
  sensor_.UnsafeArenaSwap(&other->sensor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Joint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Joint_descriptor_;
  metadata.reflection = Joint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Joint

// required string name = 1;
 bool Joint::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Joint::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void Joint::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Joint::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Joint::name() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Joint::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.name)
}
 void Joint::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Joint.name)
}
 void Joint::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Joint.name)
}
 ::std::string* Joint::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Joint.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Joint::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Joint::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Joint.name)
}

// optional uint32 id = 2;
 bool Joint::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Joint::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void Joint::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Joint::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 Joint::id() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.id)
  return id_;
}
 void Joint::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.id)
}

// repeated double angle = 3;
 int Joint::angle_size() const {
  return angle_.size();
}
 void Joint::clear_angle() {
  angle_.Clear();
}
 double Joint::angle(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.angle)
  return angle_.Get(index);
}
 void Joint::set_angle(int index, double value) {
  angle_.Set(index, value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.angle)
}
 void Joint::add_angle(double value) {
  angle_.Add(value);
  // @@protoc_insertion_point(field_add:experimot.msgs.Joint.angle)
}
 const ::google::protobuf::RepeatedField< double >&
Joint::angle() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Joint.angle)
  return angle_;
}
 ::google::protobuf::RepeatedField< double >*
Joint::mutable_angle() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Joint.angle)
  return &angle_;
}

// optional .experimot.msgs.Joint.Type type = 4;
 bool Joint::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Joint::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
 void Joint::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Joint::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::experimot::msgs::Joint_Type Joint::type() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.type)
  return static_cast< ::experimot::msgs::Joint_Type >(type_);
}
 void Joint::set_type(::experimot::msgs::Joint_Type value) {
  assert(::experimot::msgs::Joint_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.type)
}

// optional string parent = 5;
 bool Joint::has_parent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Joint::set_has_parent() {
  _has_bits_[0] |= 0x00000010u;
}
 void Joint::clear_has_parent() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Joint::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent();
}
 const ::std::string& Joint::parent() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.parent)
  return parent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Joint::set_parent(const ::std::string& value) {
  set_has_parent();
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.parent)
}
 void Joint::set_parent(const char* value) {
  set_has_parent();
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Joint.parent)
}
 void Joint::set_parent(const char* value, size_t size) {
  set_has_parent();
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Joint.parent)
}
 ::std::string* Joint::mutable_parent() {
  set_has_parent();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Joint.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Joint::release_parent() {
  clear_has_parent();
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Joint::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Joint.parent)
}

// optional uint32 parent_id = 6;
 bool Joint::has_parent_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Joint::set_has_parent_id() {
  _has_bits_[0] |= 0x00000020u;
}
 void Joint::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Joint::clear_parent_id() {
  parent_id_ = 0u;
  clear_has_parent_id();
}
 ::google::protobuf::uint32 Joint::parent_id() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.parent_id)
  return parent_id_;
}
 void Joint::set_parent_id(::google::protobuf::uint32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.parent_id)
}

// optional string child = 7;
 bool Joint::has_child() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Joint::set_has_child() {
  _has_bits_[0] |= 0x00000040u;
}
 void Joint::clear_has_child() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Joint::clear_child() {
  child_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_child();
}
 const ::std::string& Joint::child() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.child)
  return child_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Joint::set_child(const ::std::string& value) {
  set_has_child();
  child_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.child)
}
 void Joint::set_child(const char* value) {
  set_has_child();
  child_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Joint.child)
}
 void Joint::set_child(const char* value, size_t size) {
  set_has_child();
  child_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Joint.child)
}
 ::std::string* Joint::mutable_child() {
  set_has_child();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Joint.child)
  return child_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Joint::release_child() {
  clear_has_child();
  return child_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Joint::set_allocated_child(::std::string* child) {
  if (child != NULL) {
    set_has_child();
  } else {
    clear_has_child();
  }
  child_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), child);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Joint.child)
}

// optional uint32 child_id = 8;
 bool Joint::has_child_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Joint::set_has_child_id() {
  _has_bits_[0] |= 0x00000080u;
}
 void Joint::clear_has_child_id() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Joint::clear_child_id() {
  child_id_ = 0u;
  clear_has_child_id();
}
 ::google::protobuf::uint32 Joint::child_id() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.child_id)
  return child_id_;
}
 void Joint::set_child_id(::google::protobuf::uint32 value) {
  set_has_child_id();
  child_id_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.child_id)
}

// optional .experimot.msgs.Pose pose = 9;
 bool Joint::has_pose() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Joint::set_has_pose() {
  _has_bits_[0] |= 0x00000100u;
}
 void Joint::clear_has_pose() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Joint::clear_pose() {
  if (pose_ != NULL) pose_->::experimot::msgs::Pose::Clear();
  clear_has_pose();
}
 const ::experimot::msgs::Pose& Joint::pose() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
 ::experimot::msgs::Pose* Joint::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::experimot::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Joint.pose)
  return pose_;
}
 ::experimot::msgs::Pose* Joint::release_pose() {
  clear_has_pose();
  ::experimot::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
 void Joint::set_allocated_pose(::experimot::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Joint.pose)
}

// optional .experimot.msgs.Axis axis1 = 10;
 bool Joint::has_axis1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void Joint::set_has_axis1() {
  _has_bits_[0] |= 0x00000200u;
}
 void Joint::clear_has_axis1() {
  _has_bits_[0] &= ~0x00000200u;
}
 void Joint::clear_axis1() {
  if (axis1_ != NULL) axis1_->::experimot::msgs::Axis::Clear();
  clear_has_axis1();
}
 const ::experimot::msgs::Axis& Joint::axis1() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.axis1)
  return axis1_ != NULL ? *axis1_ : *default_instance_->axis1_;
}
 ::experimot::msgs::Axis* Joint::mutable_axis1() {
  set_has_axis1();
  if (axis1_ == NULL) {
    axis1_ = new ::experimot::msgs::Axis;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Joint.axis1)
  return axis1_;
}
 ::experimot::msgs::Axis* Joint::release_axis1() {
  clear_has_axis1();
  ::experimot::msgs::Axis* temp = axis1_;
  axis1_ = NULL;
  return temp;
}
 void Joint::set_allocated_axis1(::experimot::msgs::Axis* axis1) {
  delete axis1_;
  axis1_ = axis1;
  if (axis1) {
    set_has_axis1();
  } else {
    clear_has_axis1();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Joint.axis1)
}

// optional .experimot.msgs.Axis axis2 = 11;
 bool Joint::has_axis2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void Joint::set_has_axis2() {
  _has_bits_[0] |= 0x00000400u;
}
 void Joint::clear_has_axis2() {
  _has_bits_[0] &= ~0x00000400u;
}
 void Joint::clear_axis2() {
  if (axis2_ != NULL) axis2_->::experimot::msgs::Axis::Clear();
  clear_has_axis2();
}
 const ::experimot::msgs::Axis& Joint::axis2() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.axis2)
  return axis2_ != NULL ? *axis2_ : *default_instance_->axis2_;
}
 ::experimot::msgs::Axis* Joint::mutable_axis2() {
  set_has_axis2();
  if (axis2_ == NULL) {
    axis2_ = new ::experimot::msgs::Axis;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Joint.axis2)
  return axis2_;
}
 ::experimot::msgs::Axis* Joint::release_axis2() {
  clear_has_axis2();
  ::experimot::msgs::Axis* temp = axis2_;
  axis2_ = NULL;
  return temp;
}
 void Joint::set_allocated_axis2(::experimot::msgs::Axis* axis2) {
  delete axis2_;
  axis2_ = axis2;
  if (axis2) {
    set_has_axis2();
  } else {
    clear_has_axis2();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Joint.axis2)
}

// optional double cfm = 12;
 bool Joint::has_cfm() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void Joint::set_has_cfm() {
  _has_bits_[0] |= 0x00000800u;
}
 void Joint::clear_has_cfm() {
  _has_bits_[0] &= ~0x00000800u;
}
 void Joint::clear_cfm() {
  cfm_ = 0;
  clear_has_cfm();
}
 double Joint::cfm() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.cfm)
  return cfm_;
}
 void Joint::set_cfm(double value) {
  set_has_cfm();
  cfm_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.cfm)
}

// optional double bounce = 13;
 bool Joint::has_bounce() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void Joint::set_has_bounce() {
  _has_bits_[0] |= 0x00001000u;
}
 void Joint::clear_has_bounce() {
  _has_bits_[0] &= ~0x00001000u;
}
 void Joint::clear_bounce() {
  bounce_ = 0;
  clear_has_bounce();
}
 double Joint::bounce() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.bounce)
  return bounce_;
}
 void Joint::set_bounce(double value) {
  set_has_bounce();
  bounce_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.bounce)
}

// optional double velocity = 14;
 bool Joint::has_velocity() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
 void Joint::set_has_velocity() {
  _has_bits_[0] |= 0x00002000u;
}
 void Joint::clear_has_velocity() {
  _has_bits_[0] &= ~0x00002000u;
}
 void Joint::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
 double Joint::velocity() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.velocity)
  return velocity_;
}
 void Joint::set_velocity(double value) {
  set_has_velocity();
  velocity_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.velocity)
}

// optional double fudge_factor = 15;
 bool Joint::has_fudge_factor() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
 void Joint::set_has_fudge_factor() {
  _has_bits_[0] |= 0x00004000u;
}
 void Joint::clear_has_fudge_factor() {
  _has_bits_[0] &= ~0x00004000u;
}
 void Joint::clear_fudge_factor() {
  fudge_factor_ = 0;
  clear_has_fudge_factor();
}
 double Joint::fudge_factor() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.fudge_factor)
  return fudge_factor_;
}
 void Joint::set_fudge_factor(double value) {
  set_has_fudge_factor();
  fudge_factor_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.fudge_factor)
}

// optional double limit_cfm = 16;
 bool Joint::has_limit_cfm() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
 void Joint::set_has_limit_cfm() {
  _has_bits_[0] |= 0x00008000u;
}
 void Joint::clear_has_limit_cfm() {
  _has_bits_[0] &= ~0x00008000u;
}
 void Joint::clear_limit_cfm() {
  limit_cfm_ = 0;
  clear_has_limit_cfm();
}
 double Joint::limit_cfm() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.limit_cfm)
  return limit_cfm_;
}
 void Joint::set_limit_cfm(double value) {
  set_has_limit_cfm();
  limit_cfm_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.limit_cfm)
}

// optional double limit_erp = 17;
 bool Joint::has_limit_erp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
 void Joint::set_has_limit_erp() {
  _has_bits_[0] |= 0x00010000u;
}
 void Joint::clear_has_limit_erp() {
  _has_bits_[0] &= ~0x00010000u;
}
 void Joint::clear_limit_erp() {
  limit_erp_ = 0;
  clear_has_limit_erp();
}
 double Joint::limit_erp() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.limit_erp)
  return limit_erp_;
}
 void Joint::set_limit_erp(double value) {
  set_has_limit_erp();
  limit_erp_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.limit_erp)
}

// optional double suspension_cfm = 18;
 bool Joint::has_suspension_cfm() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
 void Joint::set_has_suspension_cfm() {
  _has_bits_[0] |= 0x00020000u;
}
 void Joint::clear_has_suspension_cfm() {
  _has_bits_[0] &= ~0x00020000u;
}
 void Joint::clear_suspension_cfm() {
  suspension_cfm_ = 0;
  clear_has_suspension_cfm();
}
 double Joint::suspension_cfm() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.suspension_cfm)
  return suspension_cfm_;
}
 void Joint::set_suspension_cfm(double value) {
  set_has_suspension_cfm();
  suspension_cfm_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.suspension_cfm)
}

// optional double suspension_erp = 19;
 bool Joint::has_suspension_erp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
 void Joint::set_has_suspension_erp() {
  _has_bits_[0] |= 0x00040000u;
}
 void Joint::clear_has_suspension_erp() {
  _has_bits_[0] &= ~0x00040000u;
}
 void Joint::clear_suspension_erp() {
  suspension_erp_ = 0;
  clear_has_suspension_erp();
}
 double Joint::suspension_erp() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.suspension_erp)
  return suspension_erp_;
}
 void Joint::set_suspension_erp(double value) {
  set_has_suspension_erp();
  suspension_erp_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Joint.suspension_erp)
}

// repeated .experimot.msgs.Sensor sensor = 20;
 int Joint::sensor_size() const {
  return sensor_.size();
}
 void Joint::clear_sensor() {
  sensor_.Clear();
}
 const ::experimot::msgs::Sensor& Joint::sensor(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Joint.sensor)
  return sensor_.Get(index);
}
 ::experimot::msgs::Sensor* Joint::mutable_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Joint.sensor)
  return sensor_.Mutable(index);
}
 ::experimot::msgs::Sensor* Joint::add_sensor() {
  // @@protoc_insertion_point(field_add:experimot.msgs.Joint.sensor)
  return sensor_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Sensor >&
Joint::sensor() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Joint.sensor)
  return sensor_;
}
 ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Sensor >*
Joint::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Joint.sensor)
  return &sensor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.Joint", Joint)
// @@protoc_insertion_point(global_scope)
