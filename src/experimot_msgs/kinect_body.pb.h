// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_body.proto

#ifndef PROTOBUF_kinect_5fbody_2eproto__INCLUDED
#define PROTOBUF_kinect_5fbody_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector2d.pb.h"
#include "kinect_joint.pb.h"
#include <boost/shared_ptr.hpp>
#include "MsgFactory.h"
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_kinect_5fbody_2eproto();
void protobuf_AssignDesc_kinect_5fbody_2eproto();
void protobuf_ShutdownFile_kinect_5fbody_2eproto();

class KinectBody;
class KinectBodies;

enum KinectBody_Activity {
  KinectBody_Activity_EyeLeftClosed = 0,
  KinectBody_Activity_EyeRightClosed = 1,
  KinectBody_Activity_MouthOpen = 2,
  KinectBody_Activity_MouthMoved = 3,
  KinectBody_Activity_LookingAway = 4
};
bool KinectBody_Activity_IsValid(int value);
const KinectBody_Activity KinectBody_Activity_Activity_MIN = KinectBody_Activity_EyeLeftClosed;
const KinectBody_Activity KinectBody_Activity_Activity_MAX = KinectBody_Activity_LookingAway;
const int KinectBody_Activity_Activity_ARRAYSIZE = KinectBody_Activity_Activity_MAX + 1;

const ::google::protobuf::EnumDescriptor* KinectBody_Activity_descriptor();
inline const ::std::string& KinectBody_Activity_Name(KinectBody_Activity value) {
  return ::google::protobuf::internal::NameOfEnum(
    KinectBody_Activity_descriptor(), value);
}
inline bool KinectBody_Activity_Parse(
    const ::std::string& name, KinectBody_Activity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KinectBody_Activity>(
    KinectBody_Activity_descriptor(), name, value);
}
enum KinectBody_Appearance {
  KinectBody_Appearance_WearingGlasses = 0
};
bool KinectBody_Appearance_IsValid(int value);
const KinectBody_Appearance KinectBody_Appearance_Appearance_MIN = KinectBody_Appearance_WearingGlasses;
const KinectBody_Appearance KinectBody_Appearance_Appearance_MAX = KinectBody_Appearance_WearingGlasses;
const int KinectBody_Appearance_Appearance_ARRAYSIZE = KinectBody_Appearance_Appearance_MAX + 1;

const ::google::protobuf::EnumDescriptor* KinectBody_Appearance_descriptor();
inline const ::std::string& KinectBody_Appearance_Name(KinectBody_Appearance value) {
  return ::google::protobuf::internal::NameOfEnum(
    KinectBody_Appearance_descriptor(), value);
}
inline bool KinectBody_Appearance_Parse(
    const ::std::string& name, KinectBody_Appearance* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KinectBody_Appearance>(
    KinectBody_Appearance_descriptor(), name, value);
}
enum KinectBody_DetectionResult {
  KinectBody_DetectionResult_Unknown = 0,
  KinectBody_DetectionResult_No = 1,
  KinectBody_DetectionResult_Maybe = 2,
  KinectBody_DetectionResult_Yes = 3
};
bool KinectBody_DetectionResult_IsValid(int value);
const KinectBody_DetectionResult KinectBody_DetectionResult_DetectionResult_MIN = KinectBody_DetectionResult_Unknown;
const KinectBody_DetectionResult KinectBody_DetectionResult_DetectionResult_MAX = KinectBody_DetectionResult_Yes;
const int KinectBody_DetectionResult_DetectionResult_ARRAYSIZE = KinectBody_DetectionResult_DetectionResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* KinectBody_DetectionResult_descriptor();
inline const ::std::string& KinectBody_DetectionResult_Name(KinectBody_DetectionResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    KinectBody_DetectionResult_descriptor(), value);
}
inline bool KinectBody_DetectionResult_Parse(
    const ::std::string& name, KinectBody_DetectionResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KinectBody_DetectionResult>(
    KinectBody_DetectionResult_descriptor(), name, value);
}
enum KinectBody_FrameEdges {
  KinectBody_FrameEdges_None = 0,
  KinectBody_FrameEdges_Right = 1,
  KinectBody_FrameEdges_Left = 2,
  KinectBody_FrameEdges_Top = 4,
  KinectBody_FrameEdges_Bottom = 8
};
bool KinectBody_FrameEdges_IsValid(int value);
const KinectBody_FrameEdges KinectBody_FrameEdges_FrameEdges_MIN = KinectBody_FrameEdges_None;
const KinectBody_FrameEdges KinectBody_FrameEdges_FrameEdges_MAX = KinectBody_FrameEdges_Bottom;
const int KinectBody_FrameEdges_FrameEdges_ARRAYSIZE = KinectBody_FrameEdges_FrameEdges_MAX + 1;

const ::google::protobuf::EnumDescriptor* KinectBody_FrameEdges_descriptor();
inline const ::std::string& KinectBody_FrameEdges_Name(KinectBody_FrameEdges value) {
  return ::google::protobuf::internal::NameOfEnum(
    KinectBody_FrameEdges_descriptor(), value);
}
inline bool KinectBody_FrameEdges_Parse(
    const ::std::string& name, KinectBody_FrameEdges* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KinectBody_FrameEdges>(
    KinectBody_FrameEdges_descriptor(), name, value);
}
enum KinectBody_Expression {
  KinectBody_Expression_Neutral = 0,
  KinectBody_Expression_Happy = 1
};
bool KinectBody_Expression_IsValid(int value);
const KinectBody_Expression KinectBody_Expression_Expression_MIN = KinectBody_Expression_Neutral;
const KinectBody_Expression KinectBody_Expression_Expression_MAX = KinectBody_Expression_Happy;
const int KinectBody_Expression_Expression_ARRAYSIZE = KinectBody_Expression_Expression_MAX + 1;

const ::google::protobuf::EnumDescriptor* KinectBody_Expression_descriptor();
inline const ::std::string& KinectBody_Expression_Name(KinectBody_Expression value) {
  return ::google::protobuf::internal::NameOfEnum(
    KinectBody_Expression_descriptor(), value);
}
inline bool KinectBody_Expression_Parse(
    const ::std::string& name, KinectBody_Expression* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KinectBody_Expression>(
    KinectBody_Expression_descriptor(), name, value);
}
enum KinectBody_TrackingConfidence {
  KinectBody_TrackingConfidence_Low = 0,
  KinectBody_TrackingConfidence_High = 1
};
bool KinectBody_TrackingConfidence_IsValid(int value);
const KinectBody_TrackingConfidence KinectBody_TrackingConfidence_TrackingConfidence_MIN = KinectBody_TrackingConfidence_Low;
const KinectBody_TrackingConfidence KinectBody_TrackingConfidence_TrackingConfidence_MAX = KinectBody_TrackingConfidence_High;
const int KinectBody_TrackingConfidence_TrackingConfidence_ARRAYSIZE = KinectBody_TrackingConfidence_TrackingConfidence_MAX + 1;

const ::google::protobuf::EnumDescriptor* KinectBody_TrackingConfidence_descriptor();
inline const ::std::string& KinectBody_TrackingConfidence_Name(KinectBody_TrackingConfidence value) {
  return ::google::protobuf::internal::NameOfEnum(
    KinectBody_TrackingConfidence_descriptor(), value);
}
inline bool KinectBody_TrackingConfidence_Parse(
    const ::std::string& name, KinectBody_TrackingConfidence* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KinectBody_TrackingConfidence>(
    KinectBody_TrackingConfidence_descriptor(), name, value);
}
enum KinectBody_HandState {
  KinectBody_HandState_HS_Unknown = 0,
  KinectBody_HandState_HS_NotTracked = 1,
  KinectBody_HandState_HS_Open = 2,
  KinectBody_HandState_HS_Closed = 3,
  KinectBody_HandState_HS_Lasso = 4
};
bool KinectBody_HandState_IsValid(int value);
const KinectBody_HandState KinectBody_HandState_HandState_MIN = KinectBody_HandState_HS_Unknown;
const KinectBody_HandState KinectBody_HandState_HandState_MAX = KinectBody_HandState_HS_Lasso;
const int KinectBody_HandState_HandState_ARRAYSIZE = KinectBody_HandState_HandState_MAX + 1;

const ::google::protobuf::EnumDescriptor* KinectBody_HandState_descriptor();
inline const ::std::string& KinectBody_HandState_Name(KinectBody_HandState value) {
  return ::google::protobuf::internal::NameOfEnum(
    KinectBody_HandState_descriptor(), value);
}
inline bool KinectBody_HandState_Parse(
    const ::std::string& name, KinectBody_HandState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KinectBody_HandState>(
    KinectBody_HandState_descriptor(), name, value);
}
// ===================================================================

class KinectBody : public ::google::protobuf::Message {
 public:
  KinectBody();
  virtual ~KinectBody();

  KinectBody(const KinectBody& from);

  inline KinectBody& operator=(const KinectBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KinectBody& default_instance();

  void Swap(KinectBody* other);

  // implements Message ----------------------------------------------

  inline KinectBody* New() const { return New(NULL); }

  KinectBody* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KinectBody& from);
  void MergeFrom(const KinectBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KinectBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef KinectBody_Activity Activity;
  static const Activity EyeLeftClosed = KinectBody_Activity_EyeLeftClosed;
  static const Activity EyeRightClosed = KinectBody_Activity_EyeRightClosed;
  static const Activity MouthOpen = KinectBody_Activity_MouthOpen;
  static const Activity MouthMoved = KinectBody_Activity_MouthMoved;
  static const Activity LookingAway = KinectBody_Activity_LookingAway;
  static inline bool Activity_IsValid(int value) {
    return KinectBody_Activity_IsValid(value);
  }
  static const Activity Activity_MIN =
    KinectBody_Activity_Activity_MIN;
  static const Activity Activity_MAX =
    KinectBody_Activity_Activity_MAX;
  static const int Activity_ARRAYSIZE =
    KinectBody_Activity_Activity_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Activity_descriptor() {
    return KinectBody_Activity_descriptor();
  }
  static inline const ::std::string& Activity_Name(Activity value) {
    return KinectBody_Activity_Name(value);
  }
  static inline bool Activity_Parse(const ::std::string& name,
      Activity* value) {
    return KinectBody_Activity_Parse(name, value);
  }

  typedef KinectBody_Appearance Appearance;
  static const Appearance WearingGlasses = KinectBody_Appearance_WearingGlasses;
  static inline bool Appearance_IsValid(int value) {
    return KinectBody_Appearance_IsValid(value);
  }
  static const Appearance Appearance_MIN =
    KinectBody_Appearance_Appearance_MIN;
  static const Appearance Appearance_MAX =
    KinectBody_Appearance_Appearance_MAX;
  static const int Appearance_ARRAYSIZE =
    KinectBody_Appearance_Appearance_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Appearance_descriptor() {
    return KinectBody_Appearance_descriptor();
  }
  static inline const ::std::string& Appearance_Name(Appearance value) {
    return KinectBody_Appearance_Name(value);
  }
  static inline bool Appearance_Parse(const ::std::string& name,
      Appearance* value) {
    return KinectBody_Appearance_Parse(name, value);
  }

  typedef KinectBody_DetectionResult DetectionResult;
  static const DetectionResult Unknown = KinectBody_DetectionResult_Unknown;
  static const DetectionResult No = KinectBody_DetectionResult_No;
  static const DetectionResult Maybe = KinectBody_DetectionResult_Maybe;
  static const DetectionResult Yes = KinectBody_DetectionResult_Yes;
  static inline bool DetectionResult_IsValid(int value) {
    return KinectBody_DetectionResult_IsValid(value);
  }
  static const DetectionResult DetectionResult_MIN =
    KinectBody_DetectionResult_DetectionResult_MIN;
  static const DetectionResult DetectionResult_MAX =
    KinectBody_DetectionResult_DetectionResult_MAX;
  static const int DetectionResult_ARRAYSIZE =
    KinectBody_DetectionResult_DetectionResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DetectionResult_descriptor() {
    return KinectBody_DetectionResult_descriptor();
  }
  static inline const ::std::string& DetectionResult_Name(DetectionResult value) {
    return KinectBody_DetectionResult_Name(value);
  }
  static inline bool DetectionResult_Parse(const ::std::string& name,
      DetectionResult* value) {
    return KinectBody_DetectionResult_Parse(name, value);
  }

  typedef KinectBody_FrameEdges FrameEdges;
  static const FrameEdges None = KinectBody_FrameEdges_None;
  static const FrameEdges Right = KinectBody_FrameEdges_Right;
  static const FrameEdges Left = KinectBody_FrameEdges_Left;
  static const FrameEdges Top = KinectBody_FrameEdges_Top;
  static const FrameEdges Bottom = KinectBody_FrameEdges_Bottom;
  static inline bool FrameEdges_IsValid(int value) {
    return KinectBody_FrameEdges_IsValid(value);
  }
  static const FrameEdges FrameEdges_MIN =
    KinectBody_FrameEdges_FrameEdges_MIN;
  static const FrameEdges FrameEdges_MAX =
    KinectBody_FrameEdges_FrameEdges_MAX;
  static const int FrameEdges_ARRAYSIZE =
    KinectBody_FrameEdges_FrameEdges_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FrameEdges_descriptor() {
    return KinectBody_FrameEdges_descriptor();
  }
  static inline const ::std::string& FrameEdges_Name(FrameEdges value) {
    return KinectBody_FrameEdges_Name(value);
  }
  static inline bool FrameEdges_Parse(const ::std::string& name,
      FrameEdges* value) {
    return KinectBody_FrameEdges_Parse(name, value);
  }

  typedef KinectBody_Expression Expression;
  static const Expression Neutral = KinectBody_Expression_Neutral;
  static const Expression Happy = KinectBody_Expression_Happy;
  static inline bool Expression_IsValid(int value) {
    return KinectBody_Expression_IsValid(value);
  }
  static const Expression Expression_MIN =
    KinectBody_Expression_Expression_MIN;
  static const Expression Expression_MAX =
    KinectBody_Expression_Expression_MAX;
  static const int Expression_ARRAYSIZE =
    KinectBody_Expression_Expression_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Expression_descriptor() {
    return KinectBody_Expression_descriptor();
  }
  static inline const ::std::string& Expression_Name(Expression value) {
    return KinectBody_Expression_Name(value);
  }
  static inline bool Expression_Parse(const ::std::string& name,
      Expression* value) {
    return KinectBody_Expression_Parse(name, value);
  }

  typedef KinectBody_TrackingConfidence TrackingConfidence;
  static const TrackingConfidence Low = KinectBody_TrackingConfidence_Low;
  static const TrackingConfidence High = KinectBody_TrackingConfidence_High;
  static inline bool TrackingConfidence_IsValid(int value) {
    return KinectBody_TrackingConfidence_IsValid(value);
  }
  static const TrackingConfidence TrackingConfidence_MIN =
    KinectBody_TrackingConfidence_TrackingConfidence_MIN;
  static const TrackingConfidence TrackingConfidence_MAX =
    KinectBody_TrackingConfidence_TrackingConfidence_MAX;
  static const int TrackingConfidence_ARRAYSIZE =
    KinectBody_TrackingConfidence_TrackingConfidence_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrackingConfidence_descriptor() {
    return KinectBody_TrackingConfidence_descriptor();
  }
  static inline const ::std::string& TrackingConfidence_Name(TrackingConfidence value) {
    return KinectBody_TrackingConfidence_Name(value);
  }
  static inline bool TrackingConfidence_Parse(const ::std::string& name,
      TrackingConfidence* value) {
    return KinectBody_TrackingConfidence_Parse(name, value);
  }

  typedef KinectBody_HandState HandState;
  static const HandState HS_Unknown = KinectBody_HandState_HS_Unknown;
  static const HandState HS_NotTracked = KinectBody_HandState_HS_NotTracked;
  static const HandState HS_Open = KinectBody_HandState_HS_Open;
  static const HandState HS_Closed = KinectBody_HandState_HS_Closed;
  static const HandState HS_Lasso = KinectBody_HandState_HS_Lasso;
  static inline bool HandState_IsValid(int value) {
    return KinectBody_HandState_IsValid(value);
  }
  static const HandState HandState_MIN =
    KinectBody_HandState_HandState_MIN;
  static const HandState HandState_MAX =
    KinectBody_HandState_HandState_MAX;
  static const int HandState_ARRAYSIZE =
    KinectBody_HandState_HandState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HandState_descriptor() {
    return KinectBody_HandState_descriptor();
  }
  static inline const ::std::string& HandState_Name(HandState value) {
    return KinectBody_HandState_Name(value);
  }
  static inline bool HandState_Parse(const ::std::string& name,
      HandState* value) {
    return KinectBody_HandState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 TrackingId = 1;
  bool has_trackingid() const;
  void clear_trackingid();
  static const int kTrackingIdFieldNumber = 1;
  ::google::protobuf::int32 trackingid() const;
  void set_trackingid(::google::protobuf::int32 value);

  // required bool IsTracked = 2;
  bool has_istracked() const;
  void clear_istracked();
  static const int kIsTrackedFieldNumber = 2;
  bool istracked() const;
  void set_istracked(bool value);

  // required int32 JointCount = 3;
  bool has_jointcount() const;
  void clear_jointcount();
  static const int kJointCountFieldNumber = 3;
  ::google::protobuf::int32 jointcount() const;
  void set_jointcount(::google::protobuf::int32 value);

  // repeated .experimot.msgs.KinectJoint Joints = 4;
  int joints_size() const;
  void clear_joints();
  static const int kJointsFieldNumber = 4;
  const ::experimot::msgs::KinectJoint& joints(int index) const;
  ::experimot::msgs::KinectJoint* mutable_joints(int index);
  ::experimot::msgs::KinectJoint* add_joints();
  const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::KinectJoint >&
      joints() const;
  ::google::protobuf::RepeatedPtrField< ::experimot::msgs::KinectJoint >*
      mutable_joints();

  // optional .experimot.msgs.KinectBody.FrameEdges ClippedEdges = 5;
  bool has_clippededges() const;
  void clear_clippededges();
  static const int kClippedEdgesFieldNumber = 5;
  ::experimot::msgs::KinectBody_FrameEdges clippededges() const;
  void set_clippededges(::experimot::msgs::KinectBody_FrameEdges value);

  // optional .experimot.msgs.KinectBody.TrackingConfidence HandLeftConfidence = 6;
  bool has_handleftconfidence() const;
  void clear_handleftconfidence();
  static const int kHandLeftConfidenceFieldNumber = 6;
  ::experimot::msgs::KinectBody_TrackingConfidence handleftconfidence() const;
  void set_handleftconfidence(::experimot::msgs::KinectBody_TrackingConfidence value);

  // optional .experimot.msgs.KinectBody.HandState HandLeftState = 7;
  bool has_handleftstate() const;
  void clear_handleftstate();
  static const int kHandLeftStateFieldNumber = 7;
  ::experimot::msgs::KinectBody_HandState handleftstate() const;
  void set_handleftstate(::experimot::msgs::KinectBody_HandState value);

  // optional .experimot.msgs.KinectBody.TrackingConfidence HandRightConfidence = 8;
  bool has_handrightconfidence() const;
  void clear_handrightconfidence();
  static const int kHandRightConfidenceFieldNumber = 8;
  ::experimot::msgs::KinectBody_TrackingConfidence handrightconfidence() const;
  void set_handrightconfidence(::experimot::msgs::KinectBody_TrackingConfidence value);

  // optional .experimot.msgs.KinectBody.HandState HandRightState = 9;
  bool has_handrightstate() const;
  void clear_handrightstate();
  static const int kHandRightStateFieldNumber = 9;
  ::experimot::msgs::KinectBody_HandState handrightstate() const;
  void set_handrightstate(::experimot::msgs::KinectBody_HandState value);

  // optional bool IsRestricted = 10;
  bool has_isrestricted() const;
  void clear_isrestricted();
  static const int kIsRestrictedFieldNumber = 10;
  bool isrestricted() const;
  void set_isrestricted(bool value);

  // optional .experimot.msgs.Vector2d Lean = 11;
  bool has_lean() const;
  void clear_lean();
  static const int kLeanFieldNumber = 11;
  const ::experimot::msgs::Vector2d& lean() const;
  ::experimot::msgs::Vector2d* mutable_lean();
  ::experimot::msgs::Vector2d* release_lean();
  void set_allocated_lean(::experimot::msgs::Vector2d* lean);

  // optional int32 LeanTrackingState = 12;
  bool has_leantrackingstate() const;
  void clear_leantrackingstate();
  static const int kLeanTrackingStateFieldNumber = 12;
  ::google::protobuf::int32 leantrackingstate() const;
  void set_leantrackingstate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:experimot.msgs.KinectBody)
 private:
  inline void set_has_trackingid();
  inline void clear_has_trackingid();
  inline void set_has_istracked();
  inline void clear_has_istracked();
  inline void set_has_jointcount();
  inline void clear_has_jointcount();
  inline void set_has_clippededges();
  inline void clear_has_clippededges();
  inline void set_has_handleftconfidence();
  inline void clear_has_handleftconfidence();
  inline void set_has_handleftstate();
  inline void clear_has_handleftstate();
  inline void set_has_handrightconfidence();
  inline void clear_has_handrightconfidence();
  inline void set_has_handrightstate();
  inline void clear_has_handrightstate();
  inline void set_has_isrestricted();
  inline void clear_has_isrestricted();
  inline void set_has_lean();
  inline void clear_has_lean();
  inline void set_has_leantrackingstate();
  inline void clear_has_leantrackingstate();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 trackingid_;
  ::google::protobuf::int32 jointcount_;
  ::google::protobuf::RepeatedPtrField< ::experimot::msgs::KinectJoint > joints_;
  int clippededges_;
  int handleftconfidence_;
  bool istracked_;
  bool isrestricted_;
  int handleftstate_;
  int handrightconfidence_;
  int handrightstate_;
  ::experimot::msgs::Vector2d* lean_;
  ::google::protobuf::int32 leantrackingstate_;
  friend void  protobuf_AddDesc_kinect_5fbody_2eproto();
  friend void protobuf_AssignDesc_kinect_5fbody_2eproto();
  friend void protobuf_ShutdownFile_kinect_5fbody_2eproto();

  void InitAsDefaultInstance();
  static KinectBody* default_instance_;
};
// -------------------------------------------------------------------

class KinectBodies : public ::google::protobuf::Message {
 public:
  KinectBodies();
  virtual ~KinectBodies();

  KinectBodies(const KinectBodies& from);

  inline KinectBodies& operator=(const KinectBodies& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KinectBodies& default_instance();

  void Swap(KinectBodies* other);

  // implements Message ----------------------------------------------

  inline KinectBodies* New() const { return New(NULL); }

  KinectBodies* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KinectBodies& from);
  void MergeFrom(const KinectBodies& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KinectBodies* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .experimot.msgs.KinectBody Body = 1;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 1;
  const ::experimot::msgs::KinectBody& body(int index) const;
  ::experimot::msgs::KinectBody* mutable_body(int index);
  ::experimot::msgs::KinectBody* add_body();
  const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::KinectBody >&
      body() const;
  ::google::protobuf::RepeatedPtrField< ::experimot::msgs::KinectBody >*
      mutable_body();

  // @@protoc_insertion_point(class_scope:experimot.msgs.KinectBodies)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::experimot::msgs::KinectBody > body_;
  friend void  protobuf_AddDesc_kinect_5fbody_2eproto();
  friend void protobuf_AssignDesc_kinect_5fbody_2eproto();
  friend void protobuf_ShutdownFile_kinect_5fbody_2eproto();

  void InitAsDefaultInstance();
  static KinectBodies* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// KinectBody

// required int32 TrackingId = 1;
inline bool KinectBody::has_trackingid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KinectBody::set_has_trackingid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KinectBody::clear_has_trackingid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KinectBody::clear_trackingid() {
  trackingid_ = 0;
  clear_has_trackingid();
}
inline ::google::protobuf::int32 KinectBody::trackingid() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBody.TrackingId)
  return trackingid_;
}
inline void KinectBody::set_trackingid(::google::protobuf::int32 value) {
  set_has_trackingid();
  trackingid_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.KinectBody.TrackingId)
}

// required bool IsTracked = 2;
inline bool KinectBody::has_istracked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KinectBody::set_has_istracked() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KinectBody::clear_has_istracked() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KinectBody::clear_istracked() {
  istracked_ = false;
  clear_has_istracked();
}
inline bool KinectBody::istracked() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBody.IsTracked)
  return istracked_;
}
inline void KinectBody::set_istracked(bool value) {
  set_has_istracked();
  istracked_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.KinectBody.IsTracked)
}

// required int32 JointCount = 3;
inline bool KinectBody::has_jointcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KinectBody::set_has_jointcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KinectBody::clear_has_jointcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KinectBody::clear_jointcount() {
  jointcount_ = 0;
  clear_has_jointcount();
}
inline ::google::protobuf::int32 KinectBody::jointcount() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBody.JointCount)
  return jointcount_;
}
inline void KinectBody::set_jointcount(::google::protobuf::int32 value) {
  set_has_jointcount();
  jointcount_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.KinectBody.JointCount)
}

// repeated .experimot.msgs.KinectJoint Joints = 4;
inline int KinectBody::joints_size() const {
  return joints_.size();
}
inline void KinectBody::clear_joints() {
  joints_.Clear();
}
inline const ::experimot::msgs::KinectJoint& KinectBody::joints(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBody.Joints)
  return joints_.Get(index);
}
inline ::experimot::msgs::KinectJoint* KinectBody::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.KinectBody.Joints)
  return joints_.Mutable(index);
}
inline ::experimot::msgs::KinectJoint* KinectBody::add_joints() {
  // @@protoc_insertion_point(field_add:experimot.msgs.KinectBody.Joints)
  return joints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::KinectJoint >&
KinectBody::joints() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.KinectBody.Joints)
  return joints_;
}
inline ::google::protobuf::RepeatedPtrField< ::experimot::msgs::KinectJoint >*
KinectBody::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.KinectBody.Joints)
  return &joints_;
}

// optional .experimot.msgs.KinectBody.FrameEdges ClippedEdges = 5;
inline bool KinectBody::has_clippededges() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KinectBody::set_has_clippededges() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KinectBody::clear_has_clippededges() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KinectBody::clear_clippededges() {
  clippededges_ = 0;
  clear_has_clippededges();
}
inline ::experimot::msgs::KinectBody_FrameEdges KinectBody::clippededges() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBody.ClippedEdges)
  return static_cast< ::experimot::msgs::KinectBody_FrameEdges >(clippededges_);
}
inline void KinectBody::set_clippededges(::experimot::msgs::KinectBody_FrameEdges value) {
  assert(::experimot::msgs::KinectBody_FrameEdges_IsValid(value));
  set_has_clippededges();
  clippededges_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.KinectBody.ClippedEdges)
}

// optional .experimot.msgs.KinectBody.TrackingConfidence HandLeftConfidence = 6;
inline bool KinectBody::has_handleftconfidence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KinectBody::set_has_handleftconfidence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KinectBody::clear_has_handleftconfidence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KinectBody::clear_handleftconfidence() {
  handleftconfidence_ = 0;
  clear_has_handleftconfidence();
}
inline ::experimot::msgs::KinectBody_TrackingConfidence KinectBody::handleftconfidence() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBody.HandLeftConfidence)
  return static_cast< ::experimot::msgs::KinectBody_TrackingConfidence >(handleftconfidence_);
}
inline void KinectBody::set_handleftconfidence(::experimot::msgs::KinectBody_TrackingConfidence value) {
  assert(::experimot::msgs::KinectBody_TrackingConfidence_IsValid(value));
  set_has_handleftconfidence();
  handleftconfidence_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.KinectBody.HandLeftConfidence)
}

// optional .experimot.msgs.KinectBody.HandState HandLeftState = 7;
inline bool KinectBody::has_handleftstate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KinectBody::set_has_handleftstate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void KinectBody::clear_has_handleftstate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void KinectBody::clear_handleftstate() {
  handleftstate_ = 0;
  clear_has_handleftstate();
}
inline ::experimot::msgs::KinectBody_HandState KinectBody::handleftstate() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBody.HandLeftState)
  return static_cast< ::experimot::msgs::KinectBody_HandState >(handleftstate_);
}
inline void KinectBody::set_handleftstate(::experimot::msgs::KinectBody_HandState value) {
  assert(::experimot::msgs::KinectBody_HandState_IsValid(value));
  set_has_handleftstate();
  handleftstate_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.KinectBody.HandLeftState)
}

// optional .experimot.msgs.KinectBody.TrackingConfidence HandRightConfidence = 8;
inline bool KinectBody::has_handrightconfidence() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void KinectBody::set_has_handrightconfidence() {
  _has_bits_[0] |= 0x00000080u;
}
inline void KinectBody::clear_has_handrightconfidence() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void KinectBody::clear_handrightconfidence() {
  handrightconfidence_ = 0;
  clear_has_handrightconfidence();
}
inline ::experimot::msgs::KinectBody_TrackingConfidence KinectBody::handrightconfidence() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBody.HandRightConfidence)
  return static_cast< ::experimot::msgs::KinectBody_TrackingConfidence >(handrightconfidence_);
}
inline void KinectBody::set_handrightconfidence(::experimot::msgs::KinectBody_TrackingConfidence value) {
  assert(::experimot::msgs::KinectBody_TrackingConfidence_IsValid(value));
  set_has_handrightconfidence();
  handrightconfidence_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.KinectBody.HandRightConfidence)
}

// optional .experimot.msgs.KinectBody.HandState HandRightState = 9;
inline bool KinectBody::has_handrightstate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void KinectBody::set_has_handrightstate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void KinectBody::clear_has_handrightstate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void KinectBody::clear_handrightstate() {
  handrightstate_ = 0;
  clear_has_handrightstate();
}
inline ::experimot::msgs::KinectBody_HandState KinectBody::handrightstate() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBody.HandRightState)
  return static_cast< ::experimot::msgs::KinectBody_HandState >(handrightstate_);
}
inline void KinectBody::set_handrightstate(::experimot::msgs::KinectBody_HandState value) {
  assert(::experimot::msgs::KinectBody_HandState_IsValid(value));
  set_has_handrightstate();
  handrightstate_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.KinectBody.HandRightState)
}

// optional bool IsRestricted = 10;
inline bool KinectBody::has_isrestricted() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void KinectBody::set_has_isrestricted() {
  _has_bits_[0] |= 0x00000200u;
}
inline void KinectBody::clear_has_isrestricted() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void KinectBody::clear_isrestricted() {
  isrestricted_ = false;
  clear_has_isrestricted();
}
inline bool KinectBody::isrestricted() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBody.IsRestricted)
  return isrestricted_;
}
inline void KinectBody::set_isrestricted(bool value) {
  set_has_isrestricted();
  isrestricted_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.KinectBody.IsRestricted)
}

// optional .experimot.msgs.Vector2d Lean = 11;
inline bool KinectBody::has_lean() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void KinectBody::set_has_lean() {
  _has_bits_[0] |= 0x00000400u;
}
inline void KinectBody::clear_has_lean() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void KinectBody::clear_lean() {
  if (lean_ != NULL) lean_->::experimot::msgs::Vector2d::Clear();
  clear_has_lean();
}
inline const ::experimot::msgs::Vector2d& KinectBody::lean() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBody.Lean)
  return lean_ != NULL ? *lean_ : *default_instance_->lean_;
}
inline ::experimot::msgs::Vector2d* KinectBody::mutable_lean() {
  set_has_lean();
  if (lean_ == NULL) {
    lean_ = new ::experimot::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.KinectBody.Lean)
  return lean_;
}
inline ::experimot::msgs::Vector2d* KinectBody::release_lean() {
  clear_has_lean();
  ::experimot::msgs::Vector2d* temp = lean_;
  lean_ = NULL;
  return temp;
}
inline void KinectBody::set_allocated_lean(::experimot::msgs::Vector2d* lean) {
  delete lean_;
  lean_ = lean;
  if (lean) {
    set_has_lean();
  } else {
    clear_has_lean();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.KinectBody.Lean)
}

// optional int32 LeanTrackingState = 12;
inline bool KinectBody::has_leantrackingstate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void KinectBody::set_has_leantrackingstate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void KinectBody::clear_has_leantrackingstate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void KinectBody::clear_leantrackingstate() {
  leantrackingstate_ = 0;
  clear_has_leantrackingstate();
}
inline ::google::protobuf::int32 KinectBody::leantrackingstate() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBody.LeanTrackingState)
  return leantrackingstate_;
}
inline void KinectBody::set_leantrackingstate(::google::protobuf::int32 value) {
  set_has_leantrackingstate();
  leantrackingstate_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.KinectBody.LeanTrackingState)
}

// -------------------------------------------------------------------

// KinectBodies

// repeated .experimot.msgs.KinectBody Body = 1;
inline int KinectBodies::body_size() const {
  return body_.size();
}
inline void KinectBodies::clear_body() {
  body_.Clear();
}
inline const ::experimot::msgs::KinectBody& KinectBodies::body(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.KinectBodies.Body)
  return body_.Get(index);
}
inline ::experimot::msgs::KinectBody* KinectBodies::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.KinectBodies.Body)
  return body_.Mutable(index);
}
inline ::experimot::msgs::KinectBody* KinectBodies::add_body() {
  // @@protoc_insertion_point(field_add:experimot.msgs.KinectBodies.Body)
  return body_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::KinectBody >&
KinectBodies::body() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.KinectBodies.Body)
  return body_;
}
inline ::google::protobuf::RepeatedPtrField< ::experimot::msgs::KinectBody >*
KinectBodies::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.KinectBodies.Body)
  return &body_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<experimot::msgs::KinectBody> KinectBodyPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::experimot::msgs::KinectBody_Activity> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::experimot::msgs::KinectBody_Activity>() {
  return ::experimot::msgs::KinectBody_Activity_descriptor();
}
template <> struct is_proto_enum< ::experimot::msgs::KinectBody_Appearance> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::experimot::msgs::KinectBody_Appearance>() {
  return ::experimot::msgs::KinectBody_Appearance_descriptor();
}
template <> struct is_proto_enum< ::experimot::msgs::KinectBody_DetectionResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::experimot::msgs::KinectBody_DetectionResult>() {
  return ::experimot::msgs::KinectBody_DetectionResult_descriptor();
}
template <> struct is_proto_enum< ::experimot::msgs::KinectBody_FrameEdges> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::experimot::msgs::KinectBody_FrameEdges>() {
  return ::experimot::msgs::KinectBody_FrameEdges_descriptor();
}
template <> struct is_proto_enum< ::experimot::msgs::KinectBody_Expression> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::experimot::msgs::KinectBody_Expression>() {
  return ::experimot::msgs::KinectBody_Expression_descriptor();
}
template <> struct is_proto_enum< ::experimot::msgs::KinectBody_TrackingConfidence> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::experimot::msgs::KinectBody_TrackingConfidence>() {
  return ::experimot::msgs::KinectBody_TrackingConfidence_descriptor();
}
template <> struct is_proto_enum< ::experimot::msgs::KinectBody_HandState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::experimot::msgs::KinectBody_HandState>() {
  return ::experimot::msgs::KinectBody_HandState_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

typedef const boost::shared_ptr<experimot::msgs::KinectBody const> ConstKinectBodyPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kinect_5fbody_2eproto__INCLUDED
