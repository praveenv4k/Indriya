// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#ifndef PROTOBUF_header_2eproto__INCLUDED
#define PROTOBUF_header_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#include <boost/shared_ptr.hpp>
#include "MsgFactory.h"
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_header_2eproto();
void protobuf_AssignDesc_header_2eproto();
void protobuf_ShutdownFile_header_2eproto();

class Header;

// ===================================================================

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  inline Header* New() const { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string str_id = 1;
  bool has_str_id() const;
  void clear_str_id();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& str_id() const;
  void set_str_id(const ::std::string& value);
  void set_str_id(const char* value);
  void set_str_id(const char* value, size_t size);
  ::std::string* mutable_str_id();
  ::std::string* release_str_id();
  void set_allocated_str_id(::std::string* str_id);

  // optional .experimot.msgs.Time stamp = 2;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 2;
  const ::experimot::msgs::Time& stamp() const;
  ::experimot::msgs::Time* mutable_stamp();
  ::experimot::msgs::Time* release_stamp();
  void set_allocated_stamp(::experimot::msgs::Time* stamp);

  // optional int32 index = 3;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:experimot.msgs.Header)
 private:
  inline void set_has_str_id();
  inline void clear_has_str_id();
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str_id_;
  ::experimot::msgs::Time* stamp_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_header_2eproto();
  friend void protobuf_AssignDesc_header_2eproto();
  friend void protobuf_ShutdownFile_header_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// optional string str_id = 1;
inline bool Header::has_str_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_str_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_str_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_str_id() {
  str_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_id();
}
inline const ::std::string& Header::str_id() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Header.str_id)
  return str_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_str_id(const ::std::string& value) {
  set_has_str_id();
  str_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Header.str_id)
}
inline void Header::set_str_id(const char* value) {
  set_has_str_id();
  str_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Header.str_id)
}
inline void Header::set_str_id(const char* value, size_t size) {
  set_has_str_id();
  str_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Header.str_id)
}
inline ::std::string* Header::mutable_str_id() {
  set_has_str_id();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Header.str_id)
  return str_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_str_id() {
  clear_has_str_id();
  return str_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_str_id(::std::string* str_id) {
  if (str_id != NULL) {
    set_has_str_id();
  } else {
    clear_has_str_id();
  }
  str_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_id);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Header.str_id)
}

// optional .experimot.msgs.Time stamp = 2;
inline bool Header::has_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_stamp() {
  if (stamp_ != NULL) stamp_->::experimot::msgs::Time::Clear();
  clear_has_stamp();
}
inline const ::experimot::msgs::Time& Header::stamp() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Header.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
inline ::experimot::msgs::Time* Header::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::experimot::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Header.stamp)
  return stamp_;
}
inline ::experimot::msgs::Time* Header::release_stamp() {
  clear_has_stamp();
  ::experimot::msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline void Header::set_allocated_stamp(::experimot::msgs::Time* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Header.stamp)
}

// optional int32 index = 3;
inline bool Header::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Header::index() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Header.index)
  return index_;
}
inline void Header::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Header.index)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<experimot::msgs::Header> HeaderPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

typedef const boost::shared_ptr<experimot::msgs::Header const> ConstHeaderPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_header_2eproto__INCLUDED
