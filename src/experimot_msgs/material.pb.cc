// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: material.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "material.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Material_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Material_reflection_ = NULL;
const ::google::protobuf::Descriptor* Material_Script_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Material_Script_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Material_ShaderType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_material_2eproto() {
  protobuf_AddDesc_material_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "material.proto");
  GOOGLE_CHECK(file != NULL);
  Material_descriptor_ = file->message_type(0);
  static const int Material_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, shader_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, normal_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, ambient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, diffuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, specular_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, emissive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, lighting_),
  };
  Material_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Material_descriptor_,
      Material::default_instance_,
      Material_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _has_bits_[0]),
      -1,
      -1,
      sizeof(Material),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _internal_metadata_),
      -1);
  Material_Script_descriptor_ = Material_descriptor_->nested_type(0);
  static const int Material_Script_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material_Script, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material_Script, name_),
  };
  Material_Script_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Material_Script_descriptor_,
      Material_Script::default_instance_,
      Material_Script_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material_Script, _has_bits_[0]),
      -1,
      -1,
      sizeof(Material_Script),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material_Script, _internal_metadata_),
      -1);
  Material_ShaderType_descriptor_ = Material_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_material_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Material_descriptor_, &Material::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Material_Script_descriptor_, &Material_Script::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_material_2eproto() {
  delete Material::default_instance_;
  delete Material_reflection_;
  delete Material_Script::default_instance_;
  delete Material_Script_reflection_;
}

void protobuf_AddDesc_material_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_color_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016material.proto\022\016experimot.msgs\032\013color."
    "proto\"\302\003\n\010Material\022/\n\006script\030\001 \001(\0132\037.exp"
    "erimot.msgs.Material.Script\0228\n\013shader_ty"
    "pe\030\002 \001(\0162#.experimot.msgs.Material.Shade"
    "rType\022\022\n\nnormal_map\030\003 \001(\t\022&\n\007ambient\030\004 \001"
    "(\0132\025.experimot.msgs.Color\022&\n\007diffuse\030\005 \001"
    "(\0132\025.experimot.msgs.Color\022\'\n\010specular\030\006 "
    "\001(\0132\025.experimot.msgs.Color\022\'\n\010emissive\030\007"
    " \001(\0132\025.experimot.msgs.Color\022\020\n\010lighting\030"
    "\010 \001(\010\032#\n\006Script\022\013\n\003uri\030\001 \003(\t\022\014\n\004name\030\002 \002"
    "(\t\"^\n\nShaderType\022\n\n\006VERTEX\020\001\022\t\n\005PIXEL\020\002\022"
    "\033\n\027NORMAL_MAP_OBJECT_SPACE\020\003\022\034\n\030NORMAL_M"
    "AP_TANGENT_SPACE\020\004", 498);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "material.proto", &protobuf_RegisterTypes);
  Material::default_instance_ = new Material();
  Material_Script::default_instance_ = new Material_Script();
  Material::default_instance_->InitAsDefaultInstance();
  Material_Script::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_material_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_material_2eproto {
  StaticDescriptorInitializer_material_2eproto() {
    protobuf_AddDesc_material_2eproto();
  }
} static_descriptor_initializer_material_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Material_ShaderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Material_ShaderType_descriptor_;
}
bool Material_ShaderType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Material_ShaderType Material::VERTEX;
const Material_ShaderType Material::PIXEL;
const Material_ShaderType Material::NORMAL_MAP_OBJECT_SPACE;
const Material_ShaderType Material::NORMAL_MAP_TANGENT_SPACE;
const Material_ShaderType Material::ShaderType_MIN;
const Material_ShaderType Material::ShaderType_MAX;
const int Material::ShaderType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Material_Script::kUriFieldNumber;
const int Material_Script::kNameFieldNumber;
#endif  // !_MSC_VER

Material_Script::Material_Script()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Material.Script)
}

void Material_Script::InitAsDefaultInstance() {
}

Material_Script::Material_Script(const Material_Script& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Material.Script)
}

void Material_Script::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Material_Script::~Material_Script() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Material.Script)
  SharedDtor();
}

void Material_Script::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Material_Script::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Material_Script::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Material_Script_descriptor_;
}

const Material_Script& Material_Script::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_material_2eproto();
  return *default_instance_;
}

Material_Script* Material_Script::default_instance_ = NULL;

Material_Script* Material_Script::New(::google::protobuf::Arena* arena) const {
  Material_Script* n = new Material_Script;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Material_Script::Clear() {
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  uri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Material_Script::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Material.Script)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string uri = 1;
      case 1: {
        if (tag == 10) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri(this->uri_size() - 1).data(),
            this->uri(this->uri_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Material.Script.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_uri;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Material.Script.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Material.Script)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Material.Script)
  return false;
#undef DO_
}

void Material_Script::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Material.Script)
  // repeated string uri = 1;
  for (int i = 0; i < this->uri_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->uri(i).data(), this->uri(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "experimot.msgs.Material.Script.uri");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uri(i), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Material.Script.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Material.Script)
}

::google::protobuf::uint8* Material_Script::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Material.Script)
  // repeated string uri = 1;
  for (int i = 0; i < this->uri_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri(i).data(), this->uri(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Material.Script.uri");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->uri(i), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Material.Script.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Material.Script)
  return target;
}

int Material_Script::ByteSize() const {
  int total_size = 0;

  // required string name = 2;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated string uri = 1;
  total_size += 1 * this->uri_size();
  for (int i = 0; i < this->uri_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uri(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Material_Script::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Material_Script* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Material_Script*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Material_Script::MergeFrom(const Material_Script& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  uri_.MergeFrom(from.uri_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Material_Script::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material_Script::CopyFrom(const Material_Script& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material_Script::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Material_Script::Swap(Material_Script* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Material_Script::InternalSwap(Material_Script* other) {
  uri_.UnsafeArenaSwap(&other->uri_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Material_Script::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Material_Script_descriptor_;
  metadata.reflection = Material_Script_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Material::kScriptFieldNumber;
const int Material::kShaderTypeFieldNumber;
const int Material::kNormalMapFieldNumber;
const int Material::kAmbientFieldNumber;
const int Material::kDiffuseFieldNumber;
const int Material::kSpecularFieldNumber;
const int Material::kEmissiveFieldNumber;
const int Material::kLightingFieldNumber;
#endif  // !_MSC_VER

Material::Material()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Material)
}

void Material::InitAsDefaultInstance() {
  script_ = const_cast< ::experimot::msgs::Material_Script*>(&::experimot::msgs::Material_Script::default_instance());
  ambient_ = const_cast< ::experimot::msgs::Color*>(&::experimot::msgs::Color::default_instance());
  diffuse_ = const_cast< ::experimot::msgs::Color*>(&::experimot::msgs::Color::default_instance());
  specular_ = const_cast< ::experimot::msgs::Color*>(&::experimot::msgs::Color::default_instance());
  emissive_ = const_cast< ::experimot::msgs::Color*>(&::experimot::msgs::Color::default_instance());
}

Material::Material(const Material& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Material)
}

void Material::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  script_ = NULL;
  shader_type_ = 1;
  normal_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ambient_ = NULL;
  diffuse_ = NULL;
  specular_ = NULL;
  emissive_ = NULL;
  lighting_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Material::~Material() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Material)
  SharedDtor();
}

void Material::SharedDtor() {
  normal_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete script_;
    delete ambient_;
    delete diffuse_;
    delete specular_;
    delete emissive_;
  }
}

void Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Material::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Material_descriptor_;
}

const Material& Material::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_material_2eproto();
  return *default_instance_;
}

Material* Material::default_instance_ = NULL;

Material* Material::New(::google::protobuf::Arena* arena) const {
  Material* n = new Material;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Material::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_script()) {
      if (script_ != NULL) script_->::experimot::msgs::Material_Script::Clear();
    }
    shader_type_ = 1;
    if (has_normal_map()) {
      normal_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ambient()) {
      if (ambient_ != NULL) ambient_->::experimot::msgs::Color::Clear();
    }
    if (has_diffuse()) {
      if (diffuse_ != NULL) diffuse_->::experimot::msgs::Color::Clear();
    }
    if (has_specular()) {
      if (specular_ != NULL) specular_->::experimot::msgs::Color::Clear();
    }
    if (has_emissive()) {
      if (emissive_ != NULL) emissive_->::experimot::msgs::Color::Clear();
    }
    lighting_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Material)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .experimot.msgs.Material.Script script = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_script()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shader_type;
        break;
      }

      // optional .experimot.msgs.Material.ShaderType shader_type = 2;
      case 2: {
        if (tag == 16) {
         parse_shader_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::experimot::msgs::Material_ShaderType_IsValid(value)) {
            set_shader_type(static_cast< ::experimot::msgs::Material_ShaderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_normal_map;
        break;
      }

      // optional string normal_map = 3;
      case 3: {
        if (tag == 26) {
         parse_normal_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->normal_map().data(), this->normal_map().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Material.normal_map");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ambient;
        break;
      }

      // optional .experimot.msgs.Color ambient = 4;
      case 4: {
        if (tag == 34) {
         parse_ambient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ambient()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_diffuse;
        break;
      }

      // optional .experimot.msgs.Color diffuse = 5;
      case 5: {
        if (tag == 42) {
         parse_diffuse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffuse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_specular;
        break;
      }

      // optional .experimot.msgs.Color specular = 6;
      case 6: {
        if (tag == 50) {
         parse_specular:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specular()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_emissive;
        break;
      }

      // optional .experimot.msgs.Color emissive = 7;
      case 7: {
        if (tag == 58) {
         parse_emissive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emissive()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lighting;
        break;
      }

      // optional bool lighting = 8;
      case 8: {
        if (tag == 64) {
         parse_lighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lighting_)));
          set_has_lighting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Material)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Material)
  return false;
#undef DO_
}

void Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Material)
  // optional .experimot.msgs.Material.Script script = 1;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->script_, output);
  }

  // optional .experimot.msgs.Material.ShaderType shader_type = 2;
  if (has_shader_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->shader_type(), output);
  }

  // optional string normal_map = 3;
  if (has_normal_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normal_map().data(), this->normal_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Material.normal_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->normal_map(), output);
  }

  // optional .experimot.msgs.Color ambient = 4;
  if (has_ambient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ambient_, output);
  }

  // optional .experimot.msgs.Color diffuse = 5;
  if (has_diffuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->diffuse_, output);
  }

  // optional .experimot.msgs.Color specular = 6;
  if (has_specular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->specular_, output);
  }

  // optional .experimot.msgs.Color emissive = 7;
  if (has_emissive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->emissive_, output);
  }

  // optional bool lighting = 8;
  if (has_lighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->lighting(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Material)
}

::google::protobuf::uint8* Material::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Material)
  // optional .experimot.msgs.Material.Script script = 1;
  if (has_script()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->script_, target);
  }

  // optional .experimot.msgs.Material.ShaderType shader_type = 2;
  if (has_shader_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->shader_type(), target);
  }

  // optional string normal_map = 3;
  if (has_normal_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normal_map().data(), this->normal_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Material.normal_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->normal_map(), target);
  }

  // optional .experimot.msgs.Color ambient = 4;
  if (has_ambient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->ambient_, target);
  }

  // optional .experimot.msgs.Color diffuse = 5;
  if (has_diffuse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->diffuse_, target);
  }

  // optional .experimot.msgs.Color specular = 6;
  if (has_specular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->specular_, target);
  }

  // optional .experimot.msgs.Color emissive = 7;
  if (has_emissive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->emissive_, target);
  }

  // optional bool lighting = 8;
  if (has_lighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->lighting(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Material)
  return target;
}

int Material::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional .experimot.msgs.Material.Script script = 1;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->script_);
    }

    // optional .experimot.msgs.Material.ShaderType shader_type = 2;
    if (has_shader_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shader_type());
    }

    // optional string normal_map = 3;
    if (has_normal_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normal_map());
    }

    // optional .experimot.msgs.Color ambient = 4;
    if (has_ambient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ambient_);
    }

    // optional .experimot.msgs.Color diffuse = 5;
    if (has_diffuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->diffuse_);
    }

    // optional .experimot.msgs.Color specular = 6;
    if (has_specular()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->specular_);
    }

    // optional .experimot.msgs.Color emissive = 7;
    if (has_emissive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->emissive_);
    }

    // optional bool lighting = 8;
    if (has_lighting()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Material::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Material* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Material*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script()) {
      mutable_script()->::experimot::msgs::Material_Script::MergeFrom(from.script());
    }
    if (from.has_shader_type()) {
      set_shader_type(from.shader_type());
    }
    if (from.has_normal_map()) {
      set_has_normal_map();
      normal_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_map_);
    }
    if (from.has_ambient()) {
      mutable_ambient()->::experimot::msgs::Color::MergeFrom(from.ambient());
    }
    if (from.has_diffuse()) {
      mutable_diffuse()->::experimot::msgs::Color::MergeFrom(from.diffuse());
    }
    if (from.has_specular()) {
      mutable_specular()->::experimot::msgs::Color::MergeFrom(from.specular());
    }
    if (from.has_emissive()) {
      mutable_emissive()->::experimot::msgs::Color::MergeFrom(from.emissive());
    }
    if (from.has_lighting()) {
      set_lighting(from.lighting());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Material::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {

  if (has_script()) {
    if (!this->script_->IsInitialized()) return false;
  }
  if (has_ambient()) {
    if (!this->ambient_->IsInitialized()) return false;
  }
  if (has_diffuse()) {
    if (!this->diffuse_->IsInitialized()) return false;
  }
  if (has_specular()) {
    if (!this->specular_->IsInitialized()) return false;
  }
  if (has_emissive()) {
    if (!this->emissive_->IsInitialized()) return false;
  }
  return true;
}

void Material::Swap(Material* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Material::InternalSwap(Material* other) {
  std::swap(script_, other->script_);
  std::swap(shader_type_, other->shader_type_);
  normal_map_.Swap(&other->normal_map_);
  std::swap(ambient_, other->ambient_);
  std::swap(diffuse_, other->diffuse_);
  std::swap(specular_, other->specular_);
  std::swap(emissive_, other->emissive_);
  std::swap(lighting_, other->lighting_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Material::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Material_descriptor_;
  metadata.reflection = Material_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Material_Script

// repeated string uri = 1;
 int Material_Script::uri_size() const {
  return uri_.size();
}
 void Material_Script::clear_uri() {
  uri_.Clear();
}
 const ::std::string& Material_Script::uri(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Material.Script.uri)
  return uri_.Get(index);
}
 ::std::string* Material_Script::mutable_uri(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Material.Script.uri)
  return uri_.Mutable(index);
}
 void Material_Script::set_uri(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:experimot.msgs.Material.Script.uri)
  uri_.Mutable(index)->assign(value);
}
 void Material_Script::set_uri(int index, const char* value) {
  uri_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Material.Script.uri)
}
 void Material_Script::set_uri(int index, const char* value, size_t size) {
  uri_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Material.Script.uri)
}
 ::std::string* Material_Script::add_uri() {
  return uri_.Add();
}
 void Material_Script::add_uri(const ::std::string& value) {
  uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:experimot.msgs.Material.Script.uri)
}
 void Material_Script::add_uri(const char* value) {
  uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:experimot.msgs.Material.Script.uri)
}
 void Material_Script::add_uri(const char* value, size_t size) {
  uri_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:experimot.msgs.Material.Script.uri)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Material_Script::uri() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Material.Script.uri)
  return uri_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Material_Script::mutable_uri() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Material.Script.uri)
  return &uri_;
}

// required string name = 2;
 bool Material_Script::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Material_Script::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
 void Material_Script::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Material_Script::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Material_Script::name() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Material.Script.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Material_Script::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Material.Script.name)
}
 void Material_Script::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Material.Script.name)
}
 void Material_Script::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Material.Script.name)
}
 ::std::string* Material_Script::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Material.Script.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Material_Script::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Material_Script::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Material.Script.name)
}

// -------------------------------------------------------------------

// Material

// optional .experimot.msgs.Material.Script script = 1;
 bool Material::has_script() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Material::set_has_script() {
  _has_bits_[0] |= 0x00000001u;
}
 void Material::clear_has_script() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Material::clear_script() {
  if (script_ != NULL) script_->::experimot::msgs::Material_Script::Clear();
  clear_has_script();
}
 const ::experimot::msgs::Material_Script& Material::script() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Material.script)
  return script_ != NULL ? *script_ : *default_instance_->script_;
}
 ::experimot::msgs::Material_Script* Material::mutable_script() {
  set_has_script();
  if (script_ == NULL) {
    script_ = new ::experimot::msgs::Material_Script;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Material.script)
  return script_;
}
 ::experimot::msgs::Material_Script* Material::release_script() {
  clear_has_script();
  ::experimot::msgs::Material_Script* temp = script_;
  script_ = NULL;
  return temp;
}
 void Material::set_allocated_script(::experimot::msgs::Material_Script* script) {
  delete script_;
  script_ = script;
  if (script) {
    set_has_script();
  } else {
    clear_has_script();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Material.script)
}

// optional .experimot.msgs.Material.ShaderType shader_type = 2;
 bool Material::has_shader_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Material::set_has_shader_type() {
  _has_bits_[0] |= 0x00000002u;
}
 void Material::clear_has_shader_type() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Material::clear_shader_type() {
  shader_type_ = 1;
  clear_has_shader_type();
}
 ::experimot::msgs::Material_ShaderType Material::shader_type() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Material.shader_type)
  return static_cast< ::experimot::msgs::Material_ShaderType >(shader_type_);
}
 void Material::set_shader_type(::experimot::msgs::Material_ShaderType value) {
  assert(::experimot::msgs::Material_ShaderType_IsValid(value));
  set_has_shader_type();
  shader_type_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Material.shader_type)
}

// optional string normal_map = 3;
 bool Material::has_normal_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Material::set_has_normal_map() {
  _has_bits_[0] |= 0x00000004u;
}
 void Material::clear_has_normal_map() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Material::clear_normal_map() {
  normal_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_normal_map();
}
 const ::std::string& Material::normal_map() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Material.normal_map)
  return normal_map_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Material::set_normal_map(const ::std::string& value) {
  set_has_normal_map();
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Material.normal_map)
}
 void Material::set_normal_map(const char* value) {
  set_has_normal_map();
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Material.normal_map)
}
 void Material::set_normal_map(const char* value, size_t size) {
  set_has_normal_map();
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Material.normal_map)
}
 ::std::string* Material::mutable_normal_map() {
  set_has_normal_map();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Material.normal_map)
  return normal_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Material::release_normal_map() {
  clear_has_normal_map();
  return normal_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Material::set_allocated_normal_map(::std::string* normal_map) {
  if (normal_map != NULL) {
    set_has_normal_map();
  } else {
    clear_has_normal_map();
  }
  normal_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normal_map);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Material.normal_map)
}

// optional .experimot.msgs.Color ambient = 4;
 bool Material::has_ambient() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Material::set_has_ambient() {
  _has_bits_[0] |= 0x00000008u;
}
 void Material::clear_has_ambient() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Material::clear_ambient() {
  if (ambient_ != NULL) ambient_->::experimot::msgs::Color::Clear();
  clear_has_ambient();
}
 const ::experimot::msgs::Color& Material::ambient() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Material.ambient)
  return ambient_ != NULL ? *ambient_ : *default_instance_->ambient_;
}
 ::experimot::msgs::Color* Material::mutable_ambient() {
  set_has_ambient();
  if (ambient_ == NULL) {
    ambient_ = new ::experimot::msgs::Color;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Material.ambient)
  return ambient_;
}
 ::experimot::msgs::Color* Material::release_ambient() {
  clear_has_ambient();
  ::experimot::msgs::Color* temp = ambient_;
  ambient_ = NULL;
  return temp;
}
 void Material::set_allocated_ambient(::experimot::msgs::Color* ambient) {
  delete ambient_;
  ambient_ = ambient;
  if (ambient) {
    set_has_ambient();
  } else {
    clear_has_ambient();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Material.ambient)
}

// optional .experimot.msgs.Color diffuse = 5;
 bool Material::has_diffuse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Material::set_has_diffuse() {
  _has_bits_[0] |= 0x00000010u;
}
 void Material::clear_has_diffuse() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Material::clear_diffuse() {
  if (diffuse_ != NULL) diffuse_->::experimot::msgs::Color::Clear();
  clear_has_diffuse();
}
 const ::experimot::msgs::Color& Material::diffuse() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Material.diffuse)
  return diffuse_ != NULL ? *diffuse_ : *default_instance_->diffuse_;
}
 ::experimot::msgs::Color* Material::mutable_diffuse() {
  set_has_diffuse();
  if (diffuse_ == NULL) {
    diffuse_ = new ::experimot::msgs::Color;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Material.diffuse)
  return diffuse_;
}
 ::experimot::msgs::Color* Material::release_diffuse() {
  clear_has_diffuse();
  ::experimot::msgs::Color* temp = diffuse_;
  diffuse_ = NULL;
  return temp;
}
 void Material::set_allocated_diffuse(::experimot::msgs::Color* diffuse) {
  delete diffuse_;
  diffuse_ = diffuse;
  if (diffuse) {
    set_has_diffuse();
  } else {
    clear_has_diffuse();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Material.diffuse)
}

// optional .experimot.msgs.Color specular = 6;
 bool Material::has_specular() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Material::set_has_specular() {
  _has_bits_[0] |= 0x00000020u;
}
 void Material::clear_has_specular() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Material::clear_specular() {
  if (specular_ != NULL) specular_->::experimot::msgs::Color::Clear();
  clear_has_specular();
}
 const ::experimot::msgs::Color& Material::specular() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Material.specular)
  return specular_ != NULL ? *specular_ : *default_instance_->specular_;
}
 ::experimot::msgs::Color* Material::mutable_specular() {
  set_has_specular();
  if (specular_ == NULL) {
    specular_ = new ::experimot::msgs::Color;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Material.specular)
  return specular_;
}
 ::experimot::msgs::Color* Material::release_specular() {
  clear_has_specular();
  ::experimot::msgs::Color* temp = specular_;
  specular_ = NULL;
  return temp;
}
 void Material::set_allocated_specular(::experimot::msgs::Color* specular) {
  delete specular_;
  specular_ = specular;
  if (specular) {
    set_has_specular();
  } else {
    clear_has_specular();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Material.specular)
}

// optional .experimot.msgs.Color emissive = 7;
 bool Material::has_emissive() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Material::set_has_emissive() {
  _has_bits_[0] |= 0x00000040u;
}
 void Material::clear_has_emissive() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Material::clear_emissive() {
  if (emissive_ != NULL) emissive_->::experimot::msgs::Color::Clear();
  clear_has_emissive();
}
 const ::experimot::msgs::Color& Material::emissive() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Material.emissive)
  return emissive_ != NULL ? *emissive_ : *default_instance_->emissive_;
}
 ::experimot::msgs::Color* Material::mutable_emissive() {
  set_has_emissive();
  if (emissive_ == NULL) {
    emissive_ = new ::experimot::msgs::Color;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Material.emissive)
  return emissive_;
}
 ::experimot::msgs::Color* Material::release_emissive() {
  clear_has_emissive();
  ::experimot::msgs::Color* temp = emissive_;
  emissive_ = NULL;
  return temp;
}
 void Material::set_allocated_emissive(::experimot::msgs::Color* emissive) {
  delete emissive_;
  emissive_ = emissive;
  if (emissive) {
    set_has_emissive();
  } else {
    clear_has_emissive();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Material.emissive)
}

// optional bool lighting = 8;
 bool Material::has_lighting() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Material::set_has_lighting() {
  _has_bits_[0] |= 0x00000080u;
}
 void Material::clear_has_lighting() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Material::clear_lighting() {
  lighting_ = false;
  clear_has_lighting();
}
 bool Material::lighting() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Material.lighting)
  return lighting_;
}
 void Material::set_lighting(bool value) {
  set_has_lighting();
  lighting_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Material.lighting)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.Material", Material)
// @@protoc_insertion_point(global_scope)
