// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collision.proto

#ifndef PROTOBUF_collision_2eproto__INCLUDED
#define PROTOBUF_collision_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "pose.pb.h"
#include "geometry.pb.h"
#include "surface.pb.h"
#include "visual.pb.h"
#include <boost/shared_ptr.hpp>
#include "MsgFactory.h"
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_collision_2eproto();
void protobuf_AssignDesc_collision_2eproto();
void protobuf_ShutdownFile_collision_2eproto();

class Collision;

// ===================================================================

class Collision : public ::google::protobuf::Message {
 public:
  Collision();
  virtual ~Collision();

  Collision(const Collision& from);

  inline Collision& operator=(const Collision& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Collision& default_instance();

  void Swap(Collision* other);

  // implements Message ----------------------------------------------

  inline Collision* New() const { return New(NULL); }

  Collision* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Collision& from);
  void MergeFrom(const Collision& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Collision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double laser_retro = 3;
  bool has_laser_retro() const;
  void clear_laser_retro();
  static const int kLaserRetroFieldNumber = 3;
  double laser_retro() const;
  void set_laser_retro(double value);

  // optional double max_contacts = 4;
  bool has_max_contacts() const;
  void clear_max_contacts();
  static const int kMaxContactsFieldNumber = 4;
  double max_contacts() const;
  void set_max_contacts(double value);

  // optional .experimot.msgs.Pose pose = 5;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 5;
  const ::experimot::msgs::Pose& pose() const;
  ::experimot::msgs::Pose* mutable_pose();
  ::experimot::msgs::Pose* release_pose();
  void set_allocated_pose(::experimot::msgs::Pose* pose);

  // optional .experimot.msgs.Geometry geometry = 6;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 6;
  const ::experimot::msgs::Geometry& geometry() const;
  ::experimot::msgs::Geometry* mutable_geometry();
  ::experimot::msgs::Geometry* release_geometry();
  void set_allocated_geometry(::experimot::msgs::Geometry* geometry);

  // optional .experimot.msgs.Surface surface = 7;
  bool has_surface() const;
  void clear_surface();
  static const int kSurfaceFieldNumber = 7;
  const ::experimot::msgs::Surface& surface() const;
  ::experimot::msgs::Surface* mutable_surface();
  ::experimot::msgs::Surface* release_surface();
  void set_allocated_surface(::experimot::msgs::Surface* surface);

  // repeated .experimot.msgs.Visual visual = 8;
  int visual_size() const;
  void clear_visual();
  static const int kVisualFieldNumber = 8;
  const ::experimot::msgs::Visual& visual(int index) const;
  ::experimot::msgs::Visual* mutable_visual(int index);
  ::experimot::msgs::Visual* add_visual();
  const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Visual >&
      visual() const;
  ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Visual >*
      mutable_visual();

  // @@protoc_insertion_point(class_scope:experimot.msgs.Collision)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_laser_retro();
  inline void clear_has_laser_retro();
  inline void set_has_max_contacts();
  inline void clear_has_max_contacts();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_geometry();
  inline void clear_has_geometry();
  inline void set_has_surface();
  inline void clear_has_surface();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double laser_retro_;
  double max_contacts_;
  ::experimot::msgs::Pose* pose_;
  ::experimot::msgs::Geometry* geometry_;
  ::experimot::msgs::Surface* surface_;
  ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Visual > visual_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_collision_2eproto();
  friend void protobuf_AssignDesc_collision_2eproto();
  friend void protobuf_ShutdownFile_collision_2eproto();

  void InitAsDefaultInstance();
  static Collision* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Collision

// required uint32 id = 1;
inline bool Collision::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Collision::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Collision::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Collision::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Collision::id() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Collision.id)
  return id_;
}
inline void Collision::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Collision.id)
}

// required string name = 2;
inline bool Collision::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Collision::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Collision::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Collision::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Collision::name() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Collision.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Collision::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Collision.name)
}
inline void Collision::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Collision.name)
}
inline void Collision::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Collision.name)
}
inline ::std::string* Collision::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Collision.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Collision::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Collision::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Collision.name)
}

// optional double laser_retro = 3;
inline bool Collision::has_laser_retro() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Collision::set_has_laser_retro() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Collision::clear_has_laser_retro() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Collision::clear_laser_retro() {
  laser_retro_ = 0;
  clear_has_laser_retro();
}
inline double Collision::laser_retro() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Collision.laser_retro)
  return laser_retro_;
}
inline void Collision::set_laser_retro(double value) {
  set_has_laser_retro();
  laser_retro_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Collision.laser_retro)
}

// optional double max_contacts = 4;
inline bool Collision::has_max_contacts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Collision::set_has_max_contacts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Collision::clear_has_max_contacts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Collision::clear_max_contacts() {
  max_contacts_ = 0;
  clear_has_max_contacts();
}
inline double Collision::max_contacts() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Collision.max_contacts)
  return max_contacts_;
}
inline void Collision::set_max_contacts(double value) {
  set_has_max_contacts();
  max_contacts_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Collision.max_contacts)
}

// optional .experimot.msgs.Pose pose = 5;
inline bool Collision::has_pose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Collision::set_has_pose() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Collision::clear_has_pose() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Collision::clear_pose() {
  if (pose_ != NULL) pose_->::experimot::msgs::Pose::Clear();
  clear_has_pose();
}
inline const ::experimot::msgs::Pose& Collision::pose() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Collision.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::experimot::msgs::Pose* Collision::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::experimot::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Collision.pose)
  return pose_;
}
inline ::experimot::msgs::Pose* Collision::release_pose() {
  clear_has_pose();
  ::experimot::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Collision::set_allocated_pose(::experimot::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Collision.pose)
}

// optional .experimot.msgs.Geometry geometry = 6;
inline bool Collision::has_geometry() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Collision::set_has_geometry() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Collision::clear_has_geometry() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Collision::clear_geometry() {
  if (geometry_ != NULL) geometry_->::experimot::msgs::Geometry::Clear();
  clear_has_geometry();
}
inline const ::experimot::msgs::Geometry& Collision::geometry() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Collision.geometry)
  return geometry_ != NULL ? *geometry_ : *default_instance_->geometry_;
}
inline ::experimot::msgs::Geometry* Collision::mutable_geometry() {
  set_has_geometry();
  if (geometry_ == NULL) {
    geometry_ = new ::experimot::msgs::Geometry;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Collision.geometry)
  return geometry_;
}
inline ::experimot::msgs::Geometry* Collision::release_geometry() {
  clear_has_geometry();
  ::experimot::msgs::Geometry* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
inline void Collision::set_allocated_geometry(::experimot::msgs::Geometry* geometry) {
  delete geometry_;
  geometry_ = geometry;
  if (geometry) {
    set_has_geometry();
  } else {
    clear_has_geometry();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Collision.geometry)
}

// optional .experimot.msgs.Surface surface = 7;
inline bool Collision::has_surface() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Collision::set_has_surface() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Collision::clear_has_surface() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Collision::clear_surface() {
  if (surface_ != NULL) surface_->::experimot::msgs::Surface::Clear();
  clear_has_surface();
}
inline const ::experimot::msgs::Surface& Collision::surface() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Collision.surface)
  return surface_ != NULL ? *surface_ : *default_instance_->surface_;
}
inline ::experimot::msgs::Surface* Collision::mutable_surface() {
  set_has_surface();
  if (surface_ == NULL) {
    surface_ = new ::experimot::msgs::Surface;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Collision.surface)
  return surface_;
}
inline ::experimot::msgs::Surface* Collision::release_surface() {
  clear_has_surface();
  ::experimot::msgs::Surface* temp = surface_;
  surface_ = NULL;
  return temp;
}
inline void Collision::set_allocated_surface(::experimot::msgs::Surface* surface) {
  delete surface_;
  surface_ = surface;
  if (surface) {
    set_has_surface();
  } else {
    clear_has_surface();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Collision.surface)
}

// repeated .experimot.msgs.Visual visual = 8;
inline int Collision::visual_size() const {
  return visual_.size();
}
inline void Collision::clear_visual() {
  visual_.Clear();
}
inline const ::experimot::msgs::Visual& Collision::visual(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Collision.visual)
  return visual_.Get(index);
}
inline ::experimot::msgs::Visual* Collision::mutable_visual(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Collision.visual)
  return visual_.Mutable(index);
}
inline ::experimot::msgs::Visual* Collision::add_visual() {
  // @@protoc_insertion_point(field_add:experimot.msgs.Collision.visual)
  return visual_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Visual >&
Collision::visual() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Collision.visual)
  return visual_;
}
inline ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Visual >*
Collision::mutable_visual() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Collision.visual)
  return &visual_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<experimot::msgs::Collision> CollisionPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

typedef const boost::shared_ptr<experimot::msgs::Collision const> ConstCollisionPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_collision_2eproto__INCLUDED
