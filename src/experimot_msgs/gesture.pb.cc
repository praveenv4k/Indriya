// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gesture.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gesture.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* GestureDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GestureDescription_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GestureDescription_GestureType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GestureRecognitionModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GestureRecognitionModule_reflection_ = NULL;
const ::google::protobuf::Descriptor* GestureRecognitionModules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GestureRecognitionModules_reflection_ = NULL;
const ::google::protobuf::Descriptor* GestureTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GestureTrigger_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gesture_2eproto() {
  protobuf_AddDesc_gesture_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gesture.proto");
  GOOGLE_CHECK(file != NULL);
  GestureDescription_descriptor_ = file->message_type(0);
  static const int GestureDescription_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureDescription, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureDescription, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureDescription, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureDescription, confidence_),
  };
  GestureDescription_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GestureDescription_descriptor_,
      GestureDescription::default_instance_,
      GestureDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureDescription, _has_bits_[0]),
      -1,
      -1,
      sizeof(GestureDescription),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureDescription, _internal_metadata_),
      -1);
  GestureDescription_GestureType_descriptor_ = GestureDescription_descriptor_->enum_type(0);
  GestureRecognitionModule_descriptor_ = file->message_type(1);
  static const int GestureRecognitionModule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureRecognitionModule, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureRecognitionModule, motions_),
  };
  GestureRecognitionModule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GestureRecognitionModule_descriptor_,
      GestureRecognitionModule::default_instance_,
      GestureRecognitionModule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureRecognitionModule, _has_bits_[0]),
      -1,
      -1,
      sizeof(GestureRecognitionModule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureRecognitionModule, _internal_metadata_),
      -1);
  GestureRecognitionModules_descriptor_ = file->message_type(2);
  static const int GestureRecognitionModules_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureRecognitionModules, modules_),
  };
  GestureRecognitionModules_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GestureRecognitionModules_descriptor_,
      GestureRecognitionModules::default_instance_,
      GestureRecognitionModules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureRecognitionModules, _has_bits_[0]),
      -1,
      -1,
      sizeof(GestureRecognitionModules),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureRecognitionModules, _internal_metadata_),
      -1);
  GestureTrigger_descriptor_ = file->message_type(3);
  static const int GestureTrigger_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureTrigger, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureTrigger, motion_),
  };
  GestureTrigger_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GestureTrigger_descriptor_,
      GestureTrigger::default_instance_,
      GestureTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureTrigger, _has_bits_[0]),
      -1,
      -1,
      sizeof(GestureTrigger),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GestureTrigger, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gesture_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GestureDescription_descriptor_, &GestureDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GestureRecognitionModule_descriptor_, &GestureRecognitionModule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GestureRecognitionModules_descriptor_, &GestureRecognitionModules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GestureTrigger_descriptor_, &GestureTrigger::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gesture_2eproto() {
  delete GestureDescription::default_instance_;
  delete GestureDescription_reflection_;
  delete GestureRecognitionModule::default_instance_;
  delete GestureRecognitionModule_reflection_;
  delete GestureRecognitionModules::default_instance_;
  delete GestureRecognitionModules_reflection_;
  delete GestureTrigger::default_instance_;
  delete GestureTrigger_reflection_;
}

void protobuf_AddDesc_gesture_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rgesture.proto\022\016experimot.msgs\"\315\001\n\022Gest"
    "ureDescription\022\014\n\004name\030\001 \002(\t\022<\n\004type\030\002 \002"
    "(\0162..experimot.msgs.GestureDescription.G"
    "estureType\022\016\n\006active\030\003 \001(\010\022\020\n\010progress\030\004"
    " \001(\005\022\022\n\nconfidence\030\005 \001(\005\"5\n\013GestureType\022"
    "\010\n\004None\020\000\022\014\n\010Discrete\020\001\022\016\n\nContinuous\020\002\""
    "]\n\030GestureRecognitionModule\022\014\n\004name\030\001 \002("
    "\t\0223\n\007motions\030\002 \003(\0132\".experimot.msgs.Gest"
    "ureDescription\"V\n\031GestureRecognitionModu"
    "les\0229\n\007modules\030\001 \003(\0132(.experimot.msgs.Ge"
    "stureRecognitionModule\"P\n\016GestureTrigger"
    "\022\n\n\002id\030\001 \002(\005\0222\n\006motion\030\002 \002(\0132\".experimot"
    ".msgs.GestureDescription", 504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gesture.proto", &protobuf_RegisterTypes);
  GestureDescription::default_instance_ = new GestureDescription();
  GestureRecognitionModule::default_instance_ = new GestureRecognitionModule();
  GestureRecognitionModules::default_instance_ = new GestureRecognitionModules();
  GestureTrigger::default_instance_ = new GestureTrigger();
  GestureDescription::default_instance_->InitAsDefaultInstance();
  GestureRecognitionModule::default_instance_->InitAsDefaultInstance();
  GestureRecognitionModules::default_instance_->InitAsDefaultInstance();
  GestureTrigger::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gesture_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gesture_2eproto {
  StaticDescriptorInitializer_gesture_2eproto() {
    protobuf_AddDesc_gesture_2eproto();
  }
} static_descriptor_initializer_gesture_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* GestureDescription_GestureType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GestureDescription_GestureType_descriptor_;
}
bool GestureDescription_GestureType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GestureDescription_GestureType GestureDescription::None;
const GestureDescription_GestureType GestureDescription::Discrete;
const GestureDescription_GestureType GestureDescription::Continuous;
const GestureDescription_GestureType GestureDescription::GestureType_MIN;
const GestureDescription_GestureType GestureDescription::GestureType_MAX;
const int GestureDescription::GestureType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GestureDescription::kNameFieldNumber;
const int GestureDescription::kTypeFieldNumber;
const int GestureDescription::kActiveFieldNumber;
const int GestureDescription::kProgressFieldNumber;
const int GestureDescription::kConfidenceFieldNumber;
#endif  // !_MSC_VER

GestureDescription::GestureDescription()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.GestureDescription)
}

void GestureDescription::InitAsDefaultInstance() {
}

GestureDescription::GestureDescription(const GestureDescription& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.GestureDescription)
}

void GestureDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  active_ = false;
  progress_ = 0;
  confidence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GestureDescription::~GestureDescription() {
  // @@protoc_insertion_point(destructor:experimot.msgs.GestureDescription)
  SharedDtor();
}

void GestureDescription::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GestureDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GestureDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GestureDescription_descriptor_;
}

const GestureDescription& GestureDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gesture_2eproto();
  return *default_instance_;
}

GestureDescription* GestureDescription::default_instance_ = NULL;

GestureDescription* GestureDescription::New(::google::protobuf::Arena* arena) const {
  GestureDescription* n = new GestureDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GestureDescription::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GestureDescription*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, confidence_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GestureDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.GestureDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.GestureDescription.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .experimot.msgs.GestureDescription.GestureType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::experimot::msgs::GestureDescription_GestureType_IsValid(value)) {
            set_type(static_cast< ::experimot::msgs::GestureDescription_GestureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // optional bool active = 3;
      case 3: {
        if (tag == 24) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_progress;
        break;
      }

      // optional int32 progress = 4;
      case 4: {
        if (tag == 32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_confidence;
        break;
      }

      // optional int32 confidence = 5;
      case 5: {
        if (tag == 40) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.GestureDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.GestureDescription)
  return false;
#undef DO_
}

void GestureDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.GestureDescription)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.GestureDescription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .experimot.msgs.GestureDescription.GestureType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool active = 3;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  // optional int32 progress = 4;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->progress(), output);
  }

  // optional int32 confidence = 5;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.GestureDescription)
}

::google::protobuf::uint8* GestureDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.GestureDescription)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.GestureDescription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .experimot.msgs.GestureDescription.GestureType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool active = 3;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  // optional int32 progress = 4;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->progress(), target);
  }

  // optional int32 confidence = 5;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.GestureDescription)
  return target;
}

int GestureDescription::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_type()) {
    // required .experimot.msgs.GestureDescription.GestureType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int GestureDescription::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .experimot.msgs.GestureDescription.GestureType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 28) {
    // optional bool active = 3;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 progress = 4;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }

    // optional int32 confidence = 5;
    if (has_confidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confidence());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GestureDescription::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GestureDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GestureDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GestureDescription::MergeFrom(const GestureDescription& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GestureDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GestureDescription::CopyFrom(const GestureDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GestureDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GestureDescription::Swap(GestureDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GestureDescription::InternalSwap(GestureDescription* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(active_, other->active_);
  std::swap(progress_, other->progress_);
  std::swap(confidence_, other->confidence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GestureDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GestureDescription_descriptor_;
  metadata.reflection = GestureDescription_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GestureDescription

// required string name = 1;
 bool GestureDescription::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void GestureDescription::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void GestureDescription::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void GestureDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& GestureDescription::name() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.GestureDescription.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GestureDescription::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.GestureDescription.name)
}
 void GestureDescription::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.GestureDescription.name)
}
 void GestureDescription::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.GestureDescription.name)
}
 ::std::string* GestureDescription::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.GestureDescription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GestureDescription::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GestureDescription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.GestureDescription.name)
}

// required .experimot.msgs.GestureDescription.GestureType type = 2;
 bool GestureDescription::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void GestureDescription::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
 void GestureDescription::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
 void GestureDescription::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::experimot::msgs::GestureDescription_GestureType GestureDescription::type() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.GestureDescription.type)
  return static_cast< ::experimot::msgs::GestureDescription_GestureType >(type_);
}
 void GestureDescription::set_type(::experimot::msgs::GestureDescription_GestureType value) {
  assert(::experimot::msgs::GestureDescription_GestureType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.GestureDescription.type)
}

// optional bool active = 3;
 bool GestureDescription::has_active() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void GestureDescription::set_has_active() {
  _has_bits_[0] |= 0x00000004u;
}
 void GestureDescription::clear_has_active() {
  _has_bits_[0] &= ~0x00000004u;
}
 void GestureDescription::clear_active() {
  active_ = false;
  clear_has_active();
}
 bool GestureDescription::active() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.GestureDescription.active)
  return active_;
}
 void GestureDescription::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.GestureDescription.active)
}

// optional int32 progress = 4;
 bool GestureDescription::has_progress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void GestureDescription::set_has_progress() {
  _has_bits_[0] |= 0x00000008u;
}
 void GestureDescription::clear_has_progress() {
  _has_bits_[0] &= ~0x00000008u;
}
 void GestureDescription::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
 ::google::protobuf::int32 GestureDescription::progress() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.GestureDescription.progress)
  return progress_;
}
 void GestureDescription::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.GestureDescription.progress)
}

// optional int32 confidence = 5;
 bool GestureDescription::has_confidence() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void GestureDescription::set_has_confidence() {
  _has_bits_[0] |= 0x00000010u;
}
 void GestureDescription::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000010u;
}
 void GestureDescription::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
 ::google::protobuf::int32 GestureDescription::confidence() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.GestureDescription.confidence)
  return confidence_;
}
 void GestureDescription::set_confidence(::google::protobuf::int32 value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.GestureDescription.confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GestureRecognitionModule::kNameFieldNumber;
const int GestureRecognitionModule::kMotionsFieldNumber;
#endif  // !_MSC_VER

GestureRecognitionModule::GestureRecognitionModule()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.GestureRecognitionModule)
}

void GestureRecognitionModule::InitAsDefaultInstance() {
}

GestureRecognitionModule::GestureRecognitionModule(const GestureRecognitionModule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.GestureRecognitionModule)
}

void GestureRecognitionModule::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GestureRecognitionModule::~GestureRecognitionModule() {
  // @@protoc_insertion_point(destructor:experimot.msgs.GestureRecognitionModule)
  SharedDtor();
}

void GestureRecognitionModule::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GestureRecognitionModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GestureRecognitionModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GestureRecognitionModule_descriptor_;
}

const GestureRecognitionModule& GestureRecognitionModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gesture_2eproto();
  return *default_instance_;
}

GestureRecognitionModule* GestureRecognitionModule::default_instance_ = NULL;

GestureRecognitionModule* GestureRecognitionModule::New(::google::protobuf::Arena* arena) const {
  GestureRecognitionModule* n = new GestureRecognitionModule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GestureRecognitionModule::Clear() {
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  motions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GestureRecognitionModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.GestureRecognitionModule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.GestureRecognitionModule.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_motions;
        break;
      }

      // repeated .experimot.msgs.GestureDescription motions = 2;
      case 2: {
        if (tag == 18) {
         parse_motions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_motions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.GestureRecognitionModule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.GestureRecognitionModule)
  return false;
#undef DO_
}

void GestureRecognitionModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.GestureRecognitionModule)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.GestureRecognitionModule.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .experimot.msgs.GestureDescription motions = 2;
  for (unsigned int i = 0, n = this->motions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->motions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.GestureRecognitionModule)
}

::google::protobuf::uint8* GestureRecognitionModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.GestureRecognitionModule)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.GestureRecognitionModule.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .experimot.msgs.GestureDescription motions = 2;
  for (unsigned int i = 0, n = this->motions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->motions(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.GestureRecognitionModule)
  return target;
}

int GestureRecognitionModule::ByteSize() const {
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated .experimot.msgs.GestureDescription motions = 2;
  total_size += 1 * this->motions_size();
  for (int i = 0; i < this->motions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GestureRecognitionModule::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GestureRecognitionModule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GestureRecognitionModule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GestureRecognitionModule::MergeFrom(const GestureRecognitionModule& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  motions_.MergeFrom(from.motions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GestureRecognitionModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GestureRecognitionModule::CopyFrom(const GestureRecognitionModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GestureRecognitionModule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->motions())) return false;
  return true;
}

void GestureRecognitionModule::Swap(GestureRecognitionModule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GestureRecognitionModule::InternalSwap(GestureRecognitionModule* other) {
  name_.Swap(&other->name_);
  motions_.UnsafeArenaSwap(&other->motions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GestureRecognitionModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GestureRecognitionModule_descriptor_;
  metadata.reflection = GestureRecognitionModule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GestureRecognitionModule

// required string name = 1;
 bool GestureRecognitionModule::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void GestureRecognitionModule::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void GestureRecognitionModule::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void GestureRecognitionModule::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& GestureRecognitionModule::name() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.GestureRecognitionModule.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GestureRecognitionModule::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.GestureRecognitionModule.name)
}
 void GestureRecognitionModule::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.GestureRecognitionModule.name)
}
 void GestureRecognitionModule::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.GestureRecognitionModule.name)
}
 ::std::string* GestureRecognitionModule::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.GestureRecognitionModule.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GestureRecognitionModule::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GestureRecognitionModule::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.GestureRecognitionModule.name)
}

// repeated .experimot.msgs.GestureDescription motions = 2;
 int GestureRecognitionModule::motions_size() const {
  return motions_.size();
}
 void GestureRecognitionModule::clear_motions() {
  motions_.Clear();
}
 const ::experimot::msgs::GestureDescription& GestureRecognitionModule::motions(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.GestureRecognitionModule.motions)
  return motions_.Get(index);
}
 ::experimot::msgs::GestureDescription* GestureRecognitionModule::mutable_motions(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.GestureRecognitionModule.motions)
  return motions_.Mutable(index);
}
 ::experimot::msgs::GestureDescription* GestureRecognitionModule::add_motions() {
  // @@protoc_insertion_point(field_add:experimot.msgs.GestureRecognitionModule.motions)
  return motions_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::GestureDescription >&
GestureRecognitionModule::motions() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.GestureRecognitionModule.motions)
  return motions_;
}
 ::google::protobuf::RepeatedPtrField< ::experimot::msgs::GestureDescription >*
GestureRecognitionModule::mutable_motions() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.GestureRecognitionModule.motions)
  return &motions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GestureRecognitionModules::kModulesFieldNumber;
#endif  // !_MSC_VER

GestureRecognitionModules::GestureRecognitionModules()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.GestureRecognitionModules)
}

void GestureRecognitionModules::InitAsDefaultInstance() {
}

GestureRecognitionModules::GestureRecognitionModules(const GestureRecognitionModules& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.GestureRecognitionModules)
}

void GestureRecognitionModules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GestureRecognitionModules::~GestureRecognitionModules() {
  // @@protoc_insertion_point(destructor:experimot.msgs.GestureRecognitionModules)
  SharedDtor();
}

void GestureRecognitionModules::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GestureRecognitionModules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GestureRecognitionModules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GestureRecognitionModules_descriptor_;
}

const GestureRecognitionModules& GestureRecognitionModules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gesture_2eproto();
  return *default_instance_;
}

GestureRecognitionModules* GestureRecognitionModules::default_instance_ = NULL;

GestureRecognitionModules* GestureRecognitionModules::New(::google::protobuf::Arena* arena) const {
  GestureRecognitionModules* n = new GestureRecognitionModules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GestureRecognitionModules::Clear() {
  modules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GestureRecognitionModules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.GestureRecognitionModules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .experimot.msgs.GestureRecognitionModule modules = 1;
      case 1: {
        if (tag == 10) {
         parse_modules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_modules;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.GestureRecognitionModules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.GestureRecognitionModules)
  return false;
#undef DO_
}

void GestureRecognitionModules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.GestureRecognitionModules)
  // repeated .experimot.msgs.GestureRecognitionModule modules = 1;
  for (unsigned int i = 0, n = this->modules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->modules(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.GestureRecognitionModules)
}

::google::protobuf::uint8* GestureRecognitionModules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.GestureRecognitionModules)
  // repeated .experimot.msgs.GestureRecognitionModule modules = 1;
  for (unsigned int i = 0, n = this->modules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->modules(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.GestureRecognitionModules)
  return target;
}

int GestureRecognitionModules::ByteSize() const {
  int total_size = 0;

  // repeated .experimot.msgs.GestureRecognitionModule modules = 1;
  total_size += 1 * this->modules_size();
  for (int i = 0; i < this->modules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->modules(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GestureRecognitionModules::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GestureRecognitionModules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GestureRecognitionModules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GestureRecognitionModules::MergeFrom(const GestureRecognitionModules& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  modules_.MergeFrom(from.modules_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GestureRecognitionModules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GestureRecognitionModules::CopyFrom(const GestureRecognitionModules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GestureRecognitionModules::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->modules())) return false;
  return true;
}

void GestureRecognitionModules::Swap(GestureRecognitionModules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GestureRecognitionModules::InternalSwap(GestureRecognitionModules* other) {
  modules_.UnsafeArenaSwap(&other->modules_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GestureRecognitionModules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GestureRecognitionModules_descriptor_;
  metadata.reflection = GestureRecognitionModules_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GestureRecognitionModules

// repeated .experimot.msgs.GestureRecognitionModule modules = 1;
 int GestureRecognitionModules::modules_size() const {
  return modules_.size();
}
 void GestureRecognitionModules::clear_modules() {
  modules_.Clear();
}
 const ::experimot::msgs::GestureRecognitionModule& GestureRecognitionModules::modules(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.GestureRecognitionModules.modules)
  return modules_.Get(index);
}
 ::experimot::msgs::GestureRecognitionModule* GestureRecognitionModules::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.GestureRecognitionModules.modules)
  return modules_.Mutable(index);
}
 ::experimot::msgs::GestureRecognitionModule* GestureRecognitionModules::add_modules() {
  // @@protoc_insertion_point(field_add:experimot.msgs.GestureRecognitionModules.modules)
  return modules_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::GestureRecognitionModule >&
GestureRecognitionModules::modules() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.GestureRecognitionModules.modules)
  return modules_;
}
 ::google::protobuf::RepeatedPtrField< ::experimot::msgs::GestureRecognitionModule >*
GestureRecognitionModules::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.GestureRecognitionModules.modules)
  return &modules_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GestureTrigger::kIdFieldNumber;
const int GestureTrigger::kMotionFieldNumber;
#endif  // !_MSC_VER

GestureTrigger::GestureTrigger()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.GestureTrigger)
}

void GestureTrigger::InitAsDefaultInstance() {
  motion_ = const_cast< ::experimot::msgs::GestureDescription*>(&::experimot::msgs::GestureDescription::default_instance());
}

GestureTrigger::GestureTrigger(const GestureTrigger& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.GestureTrigger)
}

void GestureTrigger::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  motion_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GestureTrigger::~GestureTrigger() {
  // @@protoc_insertion_point(destructor:experimot.msgs.GestureTrigger)
  SharedDtor();
}

void GestureTrigger::SharedDtor() {
  if (this != default_instance_) {
    delete motion_;
  }
}

void GestureTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GestureTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GestureTrigger_descriptor_;
}

const GestureTrigger& GestureTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gesture_2eproto();
  return *default_instance_;
}

GestureTrigger* GestureTrigger::default_instance_ = NULL;

GestureTrigger* GestureTrigger::New(::google::protobuf::Arena* arena) const {
  GestureTrigger* n = new GestureTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GestureTrigger::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_motion()) {
      if (motion_ != NULL) motion_->::experimot::msgs::GestureDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GestureTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.GestureTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_motion;
        break;
      }

      // required .experimot.msgs.GestureDescription motion = 2;
      case 2: {
        if (tag == 18) {
         parse_motion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.GestureTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.GestureTrigger)
  return false;
#undef DO_
}

void GestureTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.GestureTrigger)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .experimot.msgs.GestureDescription motion = 2;
  if (has_motion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->motion_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.GestureTrigger)
}

::google::protobuf::uint8* GestureTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.GestureTrigger)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .experimot.msgs.GestureDescription motion = 2;
  if (has_motion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->motion_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.GestureTrigger)
  return target;
}

int GestureTrigger::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_motion()) {
    // required .experimot.msgs.GestureDescription motion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->motion_);
  }

  return total_size;
}
int GestureTrigger::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required .experimot.msgs.GestureDescription motion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->motion_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GestureTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GestureTrigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GestureTrigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GestureTrigger::MergeFrom(const GestureTrigger& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_motion()) {
      mutable_motion()->::experimot::msgs::GestureDescription::MergeFrom(from.motion());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GestureTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GestureTrigger::CopyFrom(const GestureTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GestureTrigger::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_motion()) {
    if (!this->motion_->IsInitialized()) return false;
  }
  return true;
}

void GestureTrigger::Swap(GestureTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GestureTrigger::InternalSwap(GestureTrigger* other) {
  std::swap(id_, other->id_);
  std::swap(motion_, other->motion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GestureTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GestureTrigger_descriptor_;
  metadata.reflection = GestureTrigger_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GestureTrigger

// required int32 id = 1;
 bool GestureTrigger::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void GestureTrigger::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void GestureTrigger::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void GestureTrigger::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 GestureTrigger::id() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.GestureTrigger.id)
  return id_;
}
 void GestureTrigger::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.GestureTrigger.id)
}

// required .experimot.msgs.GestureDescription motion = 2;
 bool GestureTrigger::has_motion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void GestureTrigger::set_has_motion() {
  _has_bits_[0] |= 0x00000002u;
}
 void GestureTrigger::clear_has_motion() {
  _has_bits_[0] &= ~0x00000002u;
}
 void GestureTrigger::clear_motion() {
  if (motion_ != NULL) motion_->::experimot::msgs::GestureDescription::Clear();
  clear_has_motion();
}
 const ::experimot::msgs::GestureDescription& GestureTrigger::motion() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.GestureTrigger.motion)
  return motion_ != NULL ? *motion_ : *default_instance_->motion_;
}
 ::experimot::msgs::GestureDescription* GestureTrigger::mutable_motion() {
  set_has_motion();
  if (motion_ == NULL) {
    motion_ = new ::experimot::msgs::GestureDescription;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.GestureTrigger.motion)
  return motion_;
}
 ::experimot::msgs::GestureDescription* GestureTrigger::release_motion() {
  clear_has_motion();
  ::experimot::msgs::GestureDescription* temp = motion_;
  motion_ = NULL;
  return temp;
}
 void GestureTrigger::set_allocated_motion(::experimot::msgs::GestureDescription* motion) {
  delete motion_;
  motion_ = motion;
  if (motion) {
    set_has_motion();
  } else {
    clear_has_motion();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.GestureTrigger.motion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.GestureDescription", GestureDescription)
// @@protoc_insertion_point(global_scope)
