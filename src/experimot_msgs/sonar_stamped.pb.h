// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sonar_stamped.proto

#ifndef PROTOBUF_sonar_5fstamped_2eproto__INCLUDED
#define PROTOBUF_sonar_5fstamped_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#include "sonar.pb.h"
#include <boost/shared_ptr.hpp>
#include "MsgFactory.h"
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sonar_5fstamped_2eproto();
void protobuf_AssignDesc_sonar_5fstamped_2eproto();
void protobuf_ShutdownFile_sonar_5fstamped_2eproto();

class SonarStamped;

// ===================================================================

class SonarStamped : public ::google::protobuf::Message {
 public:
  SonarStamped();
  virtual ~SonarStamped();

  SonarStamped(const SonarStamped& from);

  inline SonarStamped& operator=(const SonarStamped& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SonarStamped& default_instance();

  void Swap(SonarStamped* other);

  // implements Message ----------------------------------------------

  inline SonarStamped* New() const { return New(NULL); }

  SonarStamped* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SonarStamped& from);
  void MergeFrom(const SonarStamped& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SonarStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .experimot.msgs.Time time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::experimot::msgs::Time& time() const;
  ::experimot::msgs::Time* mutable_time();
  ::experimot::msgs::Time* release_time();
  void set_allocated_time(::experimot::msgs::Time* time);

  // required .experimot.msgs.Sonar sonar = 2;
  bool has_sonar() const;
  void clear_sonar();
  static const int kSonarFieldNumber = 2;
  const ::experimot::msgs::Sonar& sonar() const;
  ::experimot::msgs::Sonar* mutable_sonar();
  ::experimot::msgs::Sonar* release_sonar();
  void set_allocated_sonar(::experimot::msgs::Sonar* sonar);

  // @@protoc_insertion_point(class_scope:experimot.msgs.SonarStamped)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sonar();
  inline void clear_has_sonar();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::experimot::msgs::Time* time_;
  ::experimot::msgs::Sonar* sonar_;
  friend void  protobuf_AddDesc_sonar_5fstamped_2eproto();
  friend void protobuf_AssignDesc_sonar_5fstamped_2eproto();
  friend void protobuf_ShutdownFile_sonar_5fstamped_2eproto();

  void InitAsDefaultInstance();
  static SonarStamped* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SonarStamped

// required .experimot.msgs.Time time = 1;
inline bool SonarStamped::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SonarStamped::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SonarStamped::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SonarStamped::clear_time() {
  if (time_ != NULL) time_->::experimot::msgs::Time::Clear();
  clear_has_time();
}
inline const ::experimot::msgs::Time& SonarStamped::time() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.SonarStamped.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::experimot::msgs::Time* SonarStamped::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::experimot::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.SonarStamped.time)
  return time_;
}
inline ::experimot::msgs::Time* SonarStamped::release_time() {
  clear_has_time();
  ::experimot::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline void SonarStamped::set_allocated_time(::experimot::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.SonarStamped.time)
}

// required .experimot.msgs.Sonar sonar = 2;
inline bool SonarStamped::has_sonar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SonarStamped::set_has_sonar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SonarStamped::clear_has_sonar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SonarStamped::clear_sonar() {
  if (sonar_ != NULL) sonar_->::experimot::msgs::Sonar::Clear();
  clear_has_sonar();
}
inline const ::experimot::msgs::Sonar& SonarStamped::sonar() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.SonarStamped.sonar)
  return sonar_ != NULL ? *sonar_ : *default_instance_->sonar_;
}
inline ::experimot::msgs::Sonar* SonarStamped::mutable_sonar() {
  set_has_sonar();
  if (sonar_ == NULL) {
    sonar_ = new ::experimot::msgs::Sonar;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.SonarStamped.sonar)
  return sonar_;
}
inline ::experimot::msgs::Sonar* SonarStamped::release_sonar() {
  clear_has_sonar();
  ::experimot::msgs::Sonar* temp = sonar_;
  sonar_ = NULL;
  return temp;
}
inline void SonarStamped::set_allocated_sonar(::experimot::msgs::Sonar* sonar) {
  delete sonar_;
  sonar_ = sonar;
  if (sonar) {
    set_has_sonar();
  } else {
    clear_has_sonar();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.SonarStamped.sonar)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<experimot::msgs::SonarStamped> SonarStampedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

typedef const boost::shared_ptr<experimot::msgs::SonarStamped const> ConstSonarStampedPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sonar_5fstamped_2eproto__INCLUDED
