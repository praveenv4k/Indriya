// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boxgeom.proto

#ifndef PROTOBUF_boxgeom_2eproto__INCLUDED
#define PROTOBUF_boxgeom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#include <boost/shared_ptr.hpp>
#include "MsgFactory.h"
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_boxgeom_2eproto();
void protobuf_AssignDesc_boxgeom_2eproto();
void protobuf_ShutdownFile_boxgeom_2eproto();

class BoxGeom;

// ===================================================================

class BoxGeom : public ::google::protobuf::Message {
 public:
  BoxGeom();
  virtual ~BoxGeom();

  BoxGeom(const BoxGeom& from);

  inline BoxGeom& operator=(const BoxGeom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoxGeom& default_instance();

  void Swap(BoxGeom* other);

  // implements Message ----------------------------------------------

  inline BoxGeom* New() const { return New(NULL); }

  BoxGeom* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoxGeom& from);
  void MergeFrom(const BoxGeom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoxGeom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Indriya.Core.Msgs.Vector3d size = 1;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  const ::Indriya::Core::Msgs::Vector3d& size() const;
  ::Indriya::Core::Msgs::Vector3d* mutable_size();
  ::Indriya::Core::Msgs::Vector3d* release_size();
  void set_allocated_size(::Indriya::Core::Msgs::Vector3d* size);

  // @@protoc_insertion_point(class_scope:Indriya.Core.Msgs.BoxGeom)
 private:
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Indriya::Core::Msgs::Vector3d* size_;
  friend void  protobuf_AddDesc_boxgeom_2eproto();
  friend void protobuf_AssignDesc_boxgeom_2eproto();
  friend void protobuf_ShutdownFile_boxgeom_2eproto();

  void InitAsDefaultInstance();
  static BoxGeom* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BoxGeom

// required .Indriya.Core.Msgs.Vector3d size = 1;
inline bool BoxGeom::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoxGeom::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoxGeom::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoxGeom::clear_size() {
  if (size_ != NULL) size_->::Indriya::Core::Msgs::Vector3d::Clear();
  clear_has_size();
}
inline const ::Indriya::Core::Msgs::Vector3d& BoxGeom::size() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.BoxGeom.size)
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::Indriya::Core::Msgs::Vector3d* BoxGeom::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::Indriya::Core::Msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.BoxGeom.size)
  return size_;
}
inline ::Indriya::Core::Msgs::Vector3d* BoxGeom::release_size() {
  clear_has_size();
  ::Indriya::Core::Msgs::Vector3d* temp = size_;
  size_ = NULL;
  return temp;
}
inline void BoxGeom::set_allocated_size(::Indriya::Core::Msgs::Vector3d* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.BoxGeom.size)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<Indriya::Core::Msgs::BoxGeom> BoxGeomPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

typedef const boost::shared_ptr<Indriya::Core::Msgs::BoxGeom const> ConstBoxGeomPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_boxgeom_2eproto__INCLUDED
