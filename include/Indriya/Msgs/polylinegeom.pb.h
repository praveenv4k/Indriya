// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polylinegeom.proto

#ifndef PROTOBUF_polylinegeom_2eproto__INCLUDED
#define PROTOBUF_polylinegeom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector2d.pb.h"
#include <boost/shared_ptr.hpp>
#include "MsgFactory.h"
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_polylinegeom_2eproto();
void protobuf_AssignDesc_polylinegeom_2eproto();
void protobuf_ShutdownFile_polylinegeom_2eproto();

class Polyline;

// ===================================================================

class Polyline : public ::google::protobuf::Message {
 public:
  Polyline();
  virtual ~Polyline();

  Polyline(const Polyline& from);

  inline Polyline& operator=(const Polyline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polyline& default_instance();

  void Swap(Polyline* other);

  // implements Message ----------------------------------------------

  inline Polyline* New() const { return New(NULL); }

  Polyline* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Polyline& from);
  void MergeFrom(const Polyline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Polyline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double height = 1;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  double height() const;
  void set_height(double value);

  // repeated .Indriya.Core.Msgs.Vector2d point = 2;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 2;
  const ::Indriya::Core::Msgs::Vector2d& point(int index) const;
  ::Indriya::Core::Msgs::Vector2d* mutable_point(int index);
  ::Indriya::Core::Msgs::Vector2d* add_point();
  const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector2d >&
      point() const;
  ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector2d >*
      mutable_point();

  // @@protoc_insertion_point(class_scope:Indriya.Core.Msgs.Polyline)
 private:
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double height_;
  ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector2d > point_;
  friend void  protobuf_AddDesc_polylinegeom_2eproto();
  friend void protobuf_AssignDesc_polylinegeom_2eproto();
  friend void protobuf_ShutdownFile_polylinegeom_2eproto();

  void InitAsDefaultInstance();
  static Polyline* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Polyline

// required double height = 1;
inline bool Polyline::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Polyline::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Polyline::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Polyline::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double Polyline::height() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Polyline.height)
  return height_;
}
inline void Polyline::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Polyline.height)
}

// repeated .Indriya.Core.Msgs.Vector2d point = 2;
inline int Polyline::point_size() const {
  return point_.size();
}
inline void Polyline::clear_point() {
  point_.Clear();
}
inline const ::Indriya::Core::Msgs::Vector2d& Polyline::point(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Polyline.point)
  return point_.Get(index);
}
inline ::Indriya::Core::Msgs::Vector2d* Polyline::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Polyline.point)
  return point_.Mutable(index);
}
inline ::Indriya::Core::Msgs::Vector2d* Polyline::add_point() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Polyline.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector2d >&
Polyline::point() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Polyline.point)
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector2d >*
Polyline::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Polyline.point)
  return &point_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<Indriya::Core::Msgs::Polyline> PolylinePtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

typedef const boost::shared_ptr<Indriya::Core::Msgs::Polyline const> ConstPolylinePtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_polylinegeom_2eproto__INCLUDED
