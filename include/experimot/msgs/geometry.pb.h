// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#ifndef PROTOBUF_geometry_2eproto__INCLUDED
#define PROTOBUF_geometry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "boxgeom.pb.h"
#include "cylindergeom.pb.h"
#include "spheregeom.pb.h"
#include "planegeom.pb.h"
#include "imagegeom.pb.h"
#include "heightmapgeom.pb.h"
#include "meshgeom.pb.h"
#include "vector3d.pb.h"
#include "polylinegeom.pb.h"
#include <boost/shared_ptr.hpp>
#include "MsgFactory.h"
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_geometry_2eproto();
void protobuf_AssignDesc_geometry_2eproto();
void protobuf_ShutdownFile_geometry_2eproto();

class Geometry;

enum Geometry_Type {
  Geometry_Type_BOX = 1,
  Geometry_Type_CYLINDER = 2,
  Geometry_Type_SPHERE = 3,
  Geometry_Type_PLANE = 4,
  Geometry_Type_IMAGE = 5,
  Geometry_Type_HEIGHTMAP = 6,
  Geometry_Type_MESH = 7,
  Geometry_Type_TRIANGLE_FAN = 8,
  Geometry_Type_LINE_STRIP = 9,
  Geometry_Type_POLYLINE = 10,
  Geometry_Type_EMPTY = 11
};
bool Geometry_Type_IsValid(int value);
const Geometry_Type Geometry_Type_Type_MIN = Geometry_Type_BOX;
const Geometry_Type Geometry_Type_Type_MAX = Geometry_Type_EMPTY;
const int Geometry_Type_Type_ARRAYSIZE = Geometry_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Geometry_Type_descriptor();
inline const ::std::string& Geometry_Type_Name(Geometry_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Geometry_Type_descriptor(), value);
}
inline bool Geometry_Type_Parse(
    const ::std::string& name, Geometry_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Geometry_Type>(
    Geometry_Type_descriptor(), name, value);
}
// ===================================================================

class Geometry : public ::google::protobuf::Message {
 public:
  Geometry();
  virtual ~Geometry();

  Geometry(const Geometry& from);

  inline Geometry& operator=(const Geometry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geometry& default_instance();

  void Swap(Geometry* other);

  // implements Message ----------------------------------------------

  inline Geometry* New() const { return New(NULL); }

  Geometry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Geometry& from);
  void MergeFrom(const Geometry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Geometry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Geometry_Type Type;
  static const Type BOX = Geometry_Type_BOX;
  static const Type CYLINDER = Geometry_Type_CYLINDER;
  static const Type SPHERE = Geometry_Type_SPHERE;
  static const Type PLANE = Geometry_Type_PLANE;
  static const Type IMAGE = Geometry_Type_IMAGE;
  static const Type HEIGHTMAP = Geometry_Type_HEIGHTMAP;
  static const Type MESH = Geometry_Type_MESH;
  static const Type TRIANGLE_FAN = Geometry_Type_TRIANGLE_FAN;
  static const Type LINE_STRIP = Geometry_Type_LINE_STRIP;
  static const Type POLYLINE = Geometry_Type_POLYLINE;
  static const Type EMPTY = Geometry_Type_EMPTY;
  static inline bool Type_IsValid(int value) {
    return Geometry_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Geometry_Type_Type_MIN;
  static const Type Type_MAX =
    Geometry_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Geometry_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Geometry_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Geometry_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Geometry_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .experimot.msgs.Geometry.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::experimot::msgs::Geometry_Type type() const;
  void set_type(::experimot::msgs::Geometry_Type value);

  // optional .experimot.msgs.BoxGeom box = 2;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 2;
  const ::experimot::msgs::BoxGeom& box() const;
  ::experimot::msgs::BoxGeom* mutable_box();
  ::experimot::msgs::BoxGeom* release_box();
  void set_allocated_box(::experimot::msgs::BoxGeom* box);

  // optional .experimot.msgs.CylinderGeom cylinder = 3;
  bool has_cylinder() const;
  void clear_cylinder();
  static const int kCylinderFieldNumber = 3;
  const ::experimot::msgs::CylinderGeom& cylinder() const;
  ::experimot::msgs::CylinderGeom* mutable_cylinder();
  ::experimot::msgs::CylinderGeom* release_cylinder();
  void set_allocated_cylinder(::experimot::msgs::CylinderGeom* cylinder);

  // optional .experimot.msgs.PlaneGeom plane = 4;
  bool has_plane() const;
  void clear_plane();
  static const int kPlaneFieldNumber = 4;
  const ::experimot::msgs::PlaneGeom& plane() const;
  ::experimot::msgs::PlaneGeom* mutable_plane();
  ::experimot::msgs::PlaneGeom* release_plane();
  void set_allocated_plane(::experimot::msgs::PlaneGeom* plane);

  // optional .experimot.msgs.SphereGeom sphere = 5;
  bool has_sphere() const;
  void clear_sphere();
  static const int kSphereFieldNumber = 5;
  const ::experimot::msgs::SphereGeom& sphere() const;
  ::experimot::msgs::SphereGeom* mutable_sphere();
  ::experimot::msgs::SphereGeom* release_sphere();
  void set_allocated_sphere(::experimot::msgs::SphereGeom* sphere);

  // optional .experimot.msgs.ImageGeom image = 6;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 6;
  const ::experimot::msgs::ImageGeom& image() const;
  ::experimot::msgs::ImageGeom* mutable_image();
  ::experimot::msgs::ImageGeom* release_image();
  void set_allocated_image(::experimot::msgs::ImageGeom* image);

  // optional .experimot.msgs.HeightmapGeom heightmap = 7;
  bool has_heightmap() const;
  void clear_heightmap();
  static const int kHeightmapFieldNumber = 7;
  const ::experimot::msgs::HeightmapGeom& heightmap() const;
  ::experimot::msgs::HeightmapGeom* mutable_heightmap();
  ::experimot::msgs::HeightmapGeom* release_heightmap();
  void set_allocated_heightmap(::experimot::msgs::HeightmapGeom* heightmap);

  // optional .experimot.msgs.MeshGeom mesh = 8;
  bool has_mesh() const;
  void clear_mesh();
  static const int kMeshFieldNumber = 8;
  const ::experimot::msgs::MeshGeom& mesh() const;
  ::experimot::msgs::MeshGeom* mutable_mesh();
  ::experimot::msgs::MeshGeom* release_mesh();
  void set_allocated_mesh(::experimot::msgs::MeshGeom* mesh);

  // repeated .experimot.msgs.Vector3d points = 9;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 9;
  const ::experimot::msgs::Vector3d& points(int index) const;
  ::experimot::msgs::Vector3d* mutable_points(int index);
  ::experimot::msgs::Vector3d* add_points();
  const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Vector3d >&
      points() const;
  ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Vector3d >*
      mutable_points();

  // repeated .experimot.msgs.Polyline polyline = 10;
  int polyline_size() const;
  void clear_polyline();
  static const int kPolylineFieldNumber = 10;
  const ::experimot::msgs::Polyline& polyline(int index) const;
  ::experimot::msgs::Polyline* mutable_polyline(int index);
  ::experimot::msgs::Polyline* add_polyline();
  const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Polyline >&
      polyline() const;
  ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Polyline >*
      mutable_polyline();

  // @@protoc_insertion_point(class_scope:experimot.msgs.Geometry)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_box();
  inline void clear_has_box();
  inline void set_has_cylinder();
  inline void clear_has_cylinder();
  inline void set_has_plane();
  inline void clear_has_plane();
  inline void set_has_sphere();
  inline void clear_has_sphere();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_heightmap();
  inline void clear_has_heightmap();
  inline void set_has_mesh();
  inline void clear_has_mesh();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::experimot::msgs::BoxGeom* box_;
  ::experimot::msgs::CylinderGeom* cylinder_;
  ::experimot::msgs::PlaneGeom* plane_;
  ::experimot::msgs::SphereGeom* sphere_;
  ::experimot::msgs::ImageGeom* image_;
  ::experimot::msgs::HeightmapGeom* heightmap_;
  ::experimot::msgs::MeshGeom* mesh_;
  ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Vector3d > points_;
  ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Polyline > polyline_;
  int type_;
  friend void  protobuf_AddDesc_geometry_2eproto();
  friend void protobuf_AssignDesc_geometry_2eproto();
  friend void protobuf_ShutdownFile_geometry_2eproto();

  void InitAsDefaultInstance();
  static Geometry* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Geometry

// optional .experimot.msgs.Geometry.Type type = 1;
inline bool Geometry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geometry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geometry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geometry::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::experimot::msgs::Geometry_Type Geometry::type() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Geometry.type)
  return static_cast< ::experimot::msgs::Geometry_Type >(type_);
}
inline void Geometry::set_type(::experimot::msgs::Geometry_Type value) {
  assert(::experimot::msgs::Geometry_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Geometry.type)
}

// optional .experimot.msgs.BoxGeom box = 2;
inline bool Geometry::has_box() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geometry::set_has_box() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geometry::clear_has_box() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geometry::clear_box() {
  if (box_ != NULL) box_->::experimot::msgs::BoxGeom::Clear();
  clear_has_box();
}
inline const ::experimot::msgs::BoxGeom& Geometry::box() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Geometry.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
inline ::experimot::msgs::BoxGeom* Geometry::mutable_box() {
  set_has_box();
  if (box_ == NULL) {
    box_ = new ::experimot::msgs::BoxGeom;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Geometry.box)
  return box_;
}
inline ::experimot::msgs::BoxGeom* Geometry::release_box() {
  clear_has_box();
  ::experimot::msgs::BoxGeom* temp = box_;
  box_ = NULL;
  return temp;
}
inline void Geometry::set_allocated_box(::experimot::msgs::BoxGeom* box) {
  delete box_;
  box_ = box;
  if (box) {
    set_has_box();
  } else {
    clear_has_box();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Geometry.box)
}

// optional .experimot.msgs.CylinderGeom cylinder = 3;
inline bool Geometry::has_cylinder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Geometry::set_has_cylinder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Geometry::clear_has_cylinder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Geometry::clear_cylinder() {
  if (cylinder_ != NULL) cylinder_->::experimot::msgs::CylinderGeom::Clear();
  clear_has_cylinder();
}
inline const ::experimot::msgs::CylinderGeom& Geometry::cylinder() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Geometry.cylinder)
  return cylinder_ != NULL ? *cylinder_ : *default_instance_->cylinder_;
}
inline ::experimot::msgs::CylinderGeom* Geometry::mutable_cylinder() {
  set_has_cylinder();
  if (cylinder_ == NULL) {
    cylinder_ = new ::experimot::msgs::CylinderGeom;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Geometry.cylinder)
  return cylinder_;
}
inline ::experimot::msgs::CylinderGeom* Geometry::release_cylinder() {
  clear_has_cylinder();
  ::experimot::msgs::CylinderGeom* temp = cylinder_;
  cylinder_ = NULL;
  return temp;
}
inline void Geometry::set_allocated_cylinder(::experimot::msgs::CylinderGeom* cylinder) {
  delete cylinder_;
  cylinder_ = cylinder;
  if (cylinder) {
    set_has_cylinder();
  } else {
    clear_has_cylinder();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Geometry.cylinder)
}

// optional .experimot.msgs.PlaneGeom plane = 4;
inline bool Geometry::has_plane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Geometry::set_has_plane() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Geometry::clear_has_plane() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Geometry::clear_plane() {
  if (plane_ != NULL) plane_->::experimot::msgs::PlaneGeom::Clear();
  clear_has_plane();
}
inline const ::experimot::msgs::PlaneGeom& Geometry::plane() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Geometry.plane)
  return plane_ != NULL ? *plane_ : *default_instance_->plane_;
}
inline ::experimot::msgs::PlaneGeom* Geometry::mutable_plane() {
  set_has_plane();
  if (plane_ == NULL) {
    plane_ = new ::experimot::msgs::PlaneGeom;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Geometry.plane)
  return plane_;
}
inline ::experimot::msgs::PlaneGeom* Geometry::release_plane() {
  clear_has_plane();
  ::experimot::msgs::PlaneGeom* temp = plane_;
  plane_ = NULL;
  return temp;
}
inline void Geometry::set_allocated_plane(::experimot::msgs::PlaneGeom* plane) {
  delete plane_;
  plane_ = plane;
  if (plane) {
    set_has_plane();
  } else {
    clear_has_plane();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Geometry.plane)
}

// optional .experimot.msgs.SphereGeom sphere = 5;
inline bool Geometry::has_sphere() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Geometry::set_has_sphere() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Geometry::clear_has_sphere() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Geometry::clear_sphere() {
  if (sphere_ != NULL) sphere_->::experimot::msgs::SphereGeom::Clear();
  clear_has_sphere();
}
inline const ::experimot::msgs::SphereGeom& Geometry::sphere() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Geometry.sphere)
  return sphere_ != NULL ? *sphere_ : *default_instance_->sphere_;
}
inline ::experimot::msgs::SphereGeom* Geometry::mutable_sphere() {
  set_has_sphere();
  if (sphere_ == NULL) {
    sphere_ = new ::experimot::msgs::SphereGeom;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Geometry.sphere)
  return sphere_;
}
inline ::experimot::msgs::SphereGeom* Geometry::release_sphere() {
  clear_has_sphere();
  ::experimot::msgs::SphereGeom* temp = sphere_;
  sphere_ = NULL;
  return temp;
}
inline void Geometry::set_allocated_sphere(::experimot::msgs::SphereGeom* sphere) {
  delete sphere_;
  sphere_ = sphere;
  if (sphere) {
    set_has_sphere();
  } else {
    clear_has_sphere();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Geometry.sphere)
}

// optional .experimot.msgs.ImageGeom image = 6;
inline bool Geometry::has_image() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Geometry::set_has_image() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Geometry::clear_has_image() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Geometry::clear_image() {
  if (image_ != NULL) image_->::experimot::msgs::ImageGeom::Clear();
  clear_has_image();
}
inline const ::experimot::msgs::ImageGeom& Geometry::image() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Geometry.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::experimot::msgs::ImageGeom* Geometry::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::experimot::msgs::ImageGeom;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Geometry.image)
  return image_;
}
inline ::experimot::msgs::ImageGeom* Geometry::release_image() {
  clear_has_image();
  ::experimot::msgs::ImageGeom* temp = image_;
  image_ = NULL;
  return temp;
}
inline void Geometry::set_allocated_image(::experimot::msgs::ImageGeom* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Geometry.image)
}

// optional .experimot.msgs.HeightmapGeom heightmap = 7;
inline bool Geometry::has_heightmap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Geometry::set_has_heightmap() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Geometry::clear_has_heightmap() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Geometry::clear_heightmap() {
  if (heightmap_ != NULL) heightmap_->::experimot::msgs::HeightmapGeom::Clear();
  clear_has_heightmap();
}
inline const ::experimot::msgs::HeightmapGeom& Geometry::heightmap() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Geometry.heightmap)
  return heightmap_ != NULL ? *heightmap_ : *default_instance_->heightmap_;
}
inline ::experimot::msgs::HeightmapGeom* Geometry::mutable_heightmap() {
  set_has_heightmap();
  if (heightmap_ == NULL) {
    heightmap_ = new ::experimot::msgs::HeightmapGeom;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Geometry.heightmap)
  return heightmap_;
}
inline ::experimot::msgs::HeightmapGeom* Geometry::release_heightmap() {
  clear_has_heightmap();
  ::experimot::msgs::HeightmapGeom* temp = heightmap_;
  heightmap_ = NULL;
  return temp;
}
inline void Geometry::set_allocated_heightmap(::experimot::msgs::HeightmapGeom* heightmap) {
  delete heightmap_;
  heightmap_ = heightmap;
  if (heightmap) {
    set_has_heightmap();
  } else {
    clear_has_heightmap();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Geometry.heightmap)
}

// optional .experimot.msgs.MeshGeom mesh = 8;
inline bool Geometry::has_mesh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Geometry::set_has_mesh() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Geometry::clear_has_mesh() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Geometry::clear_mesh() {
  if (mesh_ != NULL) mesh_->::experimot::msgs::MeshGeom::Clear();
  clear_has_mesh();
}
inline const ::experimot::msgs::MeshGeom& Geometry::mesh() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Geometry.mesh)
  return mesh_ != NULL ? *mesh_ : *default_instance_->mesh_;
}
inline ::experimot::msgs::MeshGeom* Geometry::mutable_mesh() {
  set_has_mesh();
  if (mesh_ == NULL) {
    mesh_ = new ::experimot::msgs::MeshGeom;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Geometry.mesh)
  return mesh_;
}
inline ::experimot::msgs::MeshGeom* Geometry::release_mesh() {
  clear_has_mesh();
  ::experimot::msgs::MeshGeom* temp = mesh_;
  mesh_ = NULL;
  return temp;
}
inline void Geometry::set_allocated_mesh(::experimot::msgs::MeshGeom* mesh) {
  delete mesh_;
  mesh_ = mesh;
  if (mesh) {
    set_has_mesh();
  } else {
    clear_has_mesh();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Geometry.mesh)
}

// repeated .experimot.msgs.Vector3d points = 9;
inline int Geometry::points_size() const {
  return points_.size();
}
inline void Geometry::clear_points() {
  points_.Clear();
}
inline const ::experimot::msgs::Vector3d& Geometry::points(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Geometry.points)
  return points_.Get(index);
}
inline ::experimot::msgs::Vector3d* Geometry::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Geometry.points)
  return points_.Mutable(index);
}
inline ::experimot::msgs::Vector3d* Geometry::add_points() {
  // @@protoc_insertion_point(field_add:experimot.msgs.Geometry.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Vector3d >&
Geometry::points() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Geometry.points)
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Vector3d >*
Geometry::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Geometry.points)
  return &points_;
}

// repeated .experimot.msgs.Polyline polyline = 10;
inline int Geometry::polyline_size() const {
  return polyline_.size();
}
inline void Geometry::clear_polyline() {
  polyline_.Clear();
}
inline const ::experimot::msgs::Polyline& Geometry::polyline(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Geometry.polyline)
  return polyline_.Get(index);
}
inline ::experimot::msgs::Polyline* Geometry::mutable_polyline(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Geometry.polyline)
  return polyline_.Mutable(index);
}
inline ::experimot::msgs::Polyline* Geometry::add_polyline() {
  // @@protoc_insertion_point(field_add:experimot.msgs.Geometry.polyline)
  return polyline_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Polyline >&
Geometry::polyline() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Geometry.polyline)
  return polyline_;
}
inline ::google::protobuf::RepeatedPtrField< ::experimot::msgs::Polyline >*
Geometry::mutable_polyline() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Geometry.polyline)
  return &polyline_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<experimot::msgs::Geometry> GeometryPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::experimot::msgs::Geometry_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::experimot::msgs::Geometry_Type>() {
  return ::experimot::msgs::Geometry_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

typedef const boost::shared_ptr<experimot::msgs::Geometry const> ConstGeometryPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geometry_2eproto__INCLUDED
