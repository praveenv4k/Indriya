// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tactile.proto

#ifndef PROTOBUF_tactile_2eproto__INCLUDED
#define PROTOBUF_tactile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#include <boost/shared_ptr.hpp>
#include "MsgFactory.h"
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tactile_2eproto();
void protobuf_AssignDesc_tactile_2eproto();
void protobuf_ShutdownFile_tactile_2eproto();

class Tactile;

// ===================================================================

class Tactile : public ::google::protobuf::Message {
 public:
  Tactile();
  virtual ~Tactile();

  Tactile(const Tactile& from);

  inline Tactile& operator=(const Tactile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tactile& default_instance();

  void Swap(Tactile* other);

  // implements Message ----------------------------------------------

  inline Tactile* New() const { return New(NULL); }

  Tactile* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tactile& from);
  void MergeFrom(const Tactile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tactile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string collision_name = 1;
  int collision_name_size() const;
  void clear_collision_name();
  static const int kCollisionNameFieldNumber = 1;
  const ::std::string& collision_name(int index) const;
  ::std::string* mutable_collision_name(int index);
  void set_collision_name(int index, const ::std::string& value);
  void set_collision_name(int index, const char* value);
  void set_collision_name(int index, const char* value, size_t size);
  ::std::string* add_collision_name();
  void add_collision_name(const ::std::string& value);
  void add_collision_name(const char* value);
  void add_collision_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& collision_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_collision_name();

  // repeated uint32 collision_id = 2;
  int collision_id_size() const;
  void clear_collision_id();
  static const int kCollisionIdFieldNumber = 2;
  ::google::protobuf::uint32 collision_id(int index) const;
  void set_collision_id(int index, ::google::protobuf::uint32 value);
  void add_collision_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      collision_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_collision_id();

  // repeated double pressure = 3;
  int pressure_size() const;
  void clear_pressure();
  static const int kPressureFieldNumber = 3;
  double pressure(int index) const;
  void set_pressure(int index, double value);
  void add_pressure(double value);
  const ::google::protobuf::RepeatedField< double >&
      pressure() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pressure();

  // required .experimot.msgs.Time time = 4;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  const ::experimot::msgs::Time& time() const;
  ::experimot::msgs::Time* mutable_time();
  ::experimot::msgs::Time* release_time();
  void set_allocated_time(::experimot::msgs::Time* time);

  // @@protoc_insertion_point(class_scope:experimot.msgs.Tactile)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> collision_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > collision_id_;
  ::google::protobuf::RepeatedField< double > pressure_;
  ::experimot::msgs::Time* time_;
  friend void  protobuf_AddDesc_tactile_2eproto();
  friend void protobuf_AssignDesc_tactile_2eproto();
  friend void protobuf_ShutdownFile_tactile_2eproto();

  void InitAsDefaultInstance();
  static Tactile* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Tactile

// repeated string collision_name = 1;
inline int Tactile::collision_name_size() const {
  return collision_name_.size();
}
inline void Tactile::clear_collision_name() {
  collision_name_.Clear();
}
inline const ::std::string& Tactile::collision_name(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Tactile.collision_name)
  return collision_name_.Get(index);
}
inline ::std::string* Tactile::mutable_collision_name(int index) {
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Tactile.collision_name)
  return collision_name_.Mutable(index);
}
inline void Tactile::set_collision_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:experimot.msgs.Tactile.collision_name)
  collision_name_.Mutable(index)->assign(value);
}
inline void Tactile::set_collision_name(int index, const char* value) {
  collision_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Tactile.collision_name)
}
inline void Tactile::set_collision_name(int index, const char* value, size_t size) {
  collision_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Tactile.collision_name)
}
inline ::std::string* Tactile::add_collision_name() {
  return collision_name_.Add();
}
inline void Tactile::add_collision_name(const ::std::string& value) {
  collision_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:experimot.msgs.Tactile.collision_name)
}
inline void Tactile::add_collision_name(const char* value) {
  collision_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:experimot.msgs.Tactile.collision_name)
}
inline void Tactile::add_collision_name(const char* value, size_t size) {
  collision_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:experimot.msgs.Tactile.collision_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Tactile::collision_name() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Tactile.collision_name)
  return collision_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Tactile::mutable_collision_name() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Tactile.collision_name)
  return &collision_name_;
}

// repeated uint32 collision_id = 2;
inline int Tactile::collision_id_size() const {
  return collision_id_.size();
}
inline void Tactile::clear_collision_id() {
  collision_id_.Clear();
}
inline ::google::protobuf::uint32 Tactile::collision_id(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Tactile.collision_id)
  return collision_id_.Get(index);
}
inline void Tactile::set_collision_id(int index, ::google::protobuf::uint32 value) {
  collision_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Tactile.collision_id)
}
inline void Tactile::add_collision_id(::google::protobuf::uint32 value) {
  collision_id_.Add(value);
  // @@protoc_insertion_point(field_add:experimot.msgs.Tactile.collision_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Tactile::collision_id() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Tactile.collision_id)
  return collision_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Tactile::mutable_collision_id() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Tactile.collision_id)
  return &collision_id_;
}

// repeated double pressure = 3;
inline int Tactile::pressure_size() const {
  return pressure_.size();
}
inline void Tactile::clear_pressure() {
  pressure_.Clear();
}
inline double Tactile::pressure(int index) const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Tactile.pressure)
  return pressure_.Get(index);
}
inline void Tactile::set_pressure(int index, double value) {
  pressure_.Set(index, value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Tactile.pressure)
}
inline void Tactile::add_pressure(double value) {
  pressure_.Add(value);
  // @@protoc_insertion_point(field_add:experimot.msgs.Tactile.pressure)
}
inline const ::google::protobuf::RepeatedField< double >&
Tactile::pressure() const {
  // @@protoc_insertion_point(field_list:experimot.msgs.Tactile.pressure)
  return pressure_;
}
inline ::google::protobuf::RepeatedField< double >*
Tactile::mutable_pressure() {
  // @@protoc_insertion_point(field_mutable_list:experimot.msgs.Tactile.pressure)
  return &pressure_;
}

// required .experimot.msgs.Time time = 4;
inline bool Tactile::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tactile::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tactile::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tactile::clear_time() {
  if (time_ != NULL) time_->::experimot::msgs::Time::Clear();
  clear_has_time();
}
inline const ::experimot::msgs::Time& Tactile::time() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Tactile.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::experimot::msgs::Time* Tactile::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::experimot::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Tactile.time)
  return time_;
}
inline ::experimot::msgs::Time* Tactile::release_time() {
  clear_has_time();
  ::experimot::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline void Tactile::set_allocated_time(::experimot::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Tactile.time)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<experimot::msgs::Tactile> TactilePtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

typedef const boost::shared_ptr<experimot::msgs::Tactile const> ConstTactilePtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tactile_2eproto__INCLUDED
