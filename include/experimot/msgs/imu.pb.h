// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu.proto

#ifndef PROTOBUF_imu_2eproto__INCLUDED
#define PROTOBUF_imu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#include "vector3d.pb.h"
#include "quaternion.pb.h"
#include <boost/shared_ptr.hpp>
#include "MsgFactory.h"
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_imu_2eproto();
void protobuf_AssignDesc_imu_2eproto();
void protobuf_ShutdownFile_imu_2eproto();

class IMU;

// ===================================================================

class IMU : public ::google::protobuf::Message {
 public:
  IMU();
  virtual ~IMU();

  IMU(const IMU& from);

  inline IMU& operator=(const IMU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMU& default_instance();

  void Swap(IMU* other);

  // implements Message ----------------------------------------------

  inline IMU* New() const { return New(NULL); }

  IMU* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IMU& from);
  void MergeFrom(const IMU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMU* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Indriya.Core.Msgs.Time stamp = 1;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  const ::Indriya::Core::Msgs::Time& stamp() const;
  ::Indriya::Core::Msgs::Time* mutable_stamp();
  ::Indriya::Core::Msgs::Time* release_stamp();
  void set_allocated_stamp(::Indriya::Core::Msgs::Time* stamp);

  // required string entity_name = 2;
  bool has_entity_name() const;
  void clear_entity_name();
  static const int kEntityNameFieldNumber = 2;
  const ::std::string& entity_name() const;
  void set_entity_name(const ::std::string& value);
  void set_entity_name(const char* value);
  void set_entity_name(const char* value, size_t size);
  ::std::string* mutable_entity_name();
  ::std::string* release_entity_name();
  void set_allocated_entity_name(::std::string* entity_name);

  // required .Indriya.Core.Msgs.Quaternion orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  const ::Indriya::Core::Msgs::Quaternion& orientation() const;
  ::Indriya::Core::Msgs::Quaternion* mutable_orientation();
  ::Indriya::Core::Msgs::Quaternion* release_orientation();
  void set_allocated_orientation(::Indriya::Core::Msgs::Quaternion* orientation);

  // required .Indriya.Core.Msgs.Vector3d angular_velocity = 4;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 4;
  const ::Indriya::Core::Msgs::Vector3d& angular_velocity() const;
  ::Indriya::Core::Msgs::Vector3d* mutable_angular_velocity();
  ::Indriya::Core::Msgs::Vector3d* release_angular_velocity();
  void set_allocated_angular_velocity(::Indriya::Core::Msgs::Vector3d* angular_velocity);

  // required .Indriya.Core.Msgs.Vector3d linear_acceleration = 5;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 5;
  const ::Indriya::Core::Msgs::Vector3d& linear_acceleration() const;
  ::Indriya::Core::Msgs::Vector3d* mutable_linear_acceleration();
  ::Indriya::Core::Msgs::Vector3d* release_linear_acceleration();
  void set_allocated_linear_acceleration(::Indriya::Core::Msgs::Vector3d* linear_acceleration);

  // @@protoc_insertion_point(class_scope:Indriya.Core.Msgs.IMU)
 private:
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_entity_name();
  inline void clear_has_entity_name();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_angular_velocity();
  inline void clear_has_angular_velocity();
  inline void set_has_linear_acceleration();
  inline void clear_has_linear_acceleration();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Indriya::Core::Msgs::Time* stamp_;
  ::google::protobuf::internal::ArenaStringPtr entity_name_;
  ::Indriya::Core::Msgs::Quaternion* orientation_;
  ::Indriya::Core::Msgs::Vector3d* angular_velocity_;
  ::Indriya::Core::Msgs::Vector3d* linear_acceleration_;
  friend void  protobuf_AddDesc_imu_2eproto();
  friend void protobuf_AssignDesc_imu_2eproto();
  friend void protobuf_ShutdownFile_imu_2eproto();

  void InitAsDefaultInstance();
  static IMU* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IMU

// required .Indriya.Core.Msgs.Time stamp = 1;
inline bool IMU::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMU::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMU::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMU::clear_stamp() {
  if (stamp_ != NULL) stamp_->::Indriya::Core::Msgs::Time::Clear();
  clear_has_stamp();
}
inline const ::Indriya::Core::Msgs::Time& IMU::stamp() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.IMU.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
inline ::Indriya::Core::Msgs::Time* IMU::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::Indriya::Core::Msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.IMU.stamp)
  return stamp_;
}
inline ::Indriya::Core::Msgs::Time* IMU::release_stamp() {
  clear_has_stamp();
  ::Indriya::Core::Msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline void IMU::set_allocated_stamp(::Indriya::Core::Msgs::Time* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.IMU.stamp)
}

// required string entity_name = 2;
inline bool IMU::has_entity_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMU::set_has_entity_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMU::clear_has_entity_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMU::clear_entity_name() {
  entity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_name();
}
inline const ::std::string& IMU::entity_name() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.IMU.entity_name)
  return entity_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMU::set_entity_name(const ::std::string& value) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.IMU.entity_name)
}
inline void IMU::set_entity_name(const char* value) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.IMU.entity_name)
}
inline void IMU::set_entity_name(const char* value, size_t size) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.IMU.entity_name)
}
inline ::std::string* IMU::mutable_entity_name() {
  set_has_entity_name();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.IMU.entity_name)
  return entity_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMU::release_entity_name() {
  clear_has_entity_name();
  return entity_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMU::set_allocated_entity_name(::std::string* entity_name) {
  if (entity_name != NULL) {
    set_has_entity_name();
  } else {
    clear_has_entity_name();
  }
  entity_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_name);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.IMU.entity_name)
}

// required .Indriya.Core.Msgs.Quaternion orientation = 3;
inline bool IMU::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMU::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMU::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMU::clear_orientation() {
  if (orientation_ != NULL) orientation_->::Indriya::Core::Msgs::Quaternion::Clear();
  clear_has_orientation();
}
inline const ::Indriya::Core::Msgs::Quaternion& IMU::orientation() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.IMU.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::Indriya::Core::Msgs::Quaternion* IMU::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::Indriya::Core::Msgs::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.IMU.orientation)
  return orientation_;
}
inline ::Indriya::Core::Msgs::Quaternion* IMU::release_orientation() {
  clear_has_orientation();
  ::Indriya::Core::Msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void IMU::set_allocated_orientation(::Indriya::Core::Msgs::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.IMU.orientation)
}

// required .Indriya.Core.Msgs.Vector3d angular_velocity = 4;
inline bool IMU::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMU::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMU::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMU::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::Indriya::Core::Msgs::Vector3d::Clear();
  clear_has_angular_velocity();
}
inline const ::Indriya::Core::Msgs::Vector3d& IMU::angular_velocity() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.IMU.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
inline ::Indriya::Core::Msgs::Vector3d* IMU::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::Indriya::Core::Msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.IMU.angular_velocity)
  return angular_velocity_;
}
inline ::Indriya::Core::Msgs::Vector3d* IMU::release_angular_velocity() {
  clear_has_angular_velocity();
  ::Indriya::Core::Msgs::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline void IMU::set_allocated_angular_velocity(::Indriya::Core::Msgs::Vector3d* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.IMU.angular_velocity)
}

// required .Indriya.Core.Msgs.Vector3d linear_acceleration = 5;
inline bool IMU::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMU::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMU::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMU::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::Indriya::Core::Msgs::Vector3d::Clear();
  clear_has_linear_acceleration();
}
inline const ::Indriya::Core::Msgs::Vector3d& IMU::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.IMU.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_ : *default_instance_->linear_acceleration_;
}
inline ::Indriya::Core::Msgs::Vector3d* IMU::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::Indriya::Core::Msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.IMU.linear_acceleration)
  return linear_acceleration_;
}
inline ::Indriya::Core::Msgs::Vector3d* IMU::release_linear_acceleration() {
  clear_has_linear_acceleration();
  ::Indriya::Core::Msgs::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
inline void IMU::set_allocated_linear_acceleration(::Indriya::Core::Msgs::Vector3d* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.IMU.linear_acceleration)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<Indriya::Core::Msgs::IMU> IMUPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

typedef const boost::shared_ptr<Indriya::Core::Msgs::IMU const> ConstIMUPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_imu_2eproto__INCLUDED
