// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contact.proto

#ifndef PROTOBUF_contact_2eproto__INCLUDED
#define PROTOBUF_contact_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#include "time.pb.h"
#include "joint_wrench.pb.h"
#include <boost/shared_ptr.hpp>
#include "MsgFactory.h"
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_contact_2eproto();
void protobuf_AssignDesc_contact_2eproto();
void protobuf_ShutdownFile_contact_2eproto();

class Contact;

// ===================================================================

class Contact : public ::google::protobuf::Message {
 public:
  Contact();
  virtual ~Contact();

  Contact(const Contact& from);

  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Contact& default_instance();

  void Swap(Contact* other);

  // implements Message ----------------------------------------------

  inline Contact* New() const { return New(NULL); }

  Contact* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Contact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string collision1 = 1;
  bool has_collision1() const;
  void clear_collision1();
  static const int kCollision1FieldNumber = 1;
  const ::std::string& collision1() const;
  void set_collision1(const ::std::string& value);
  void set_collision1(const char* value);
  void set_collision1(const char* value, size_t size);
  ::std::string* mutable_collision1();
  ::std::string* release_collision1();
  void set_allocated_collision1(::std::string* collision1);

  // required string collision2 = 2;
  bool has_collision2() const;
  void clear_collision2();
  static const int kCollision2FieldNumber = 2;
  const ::std::string& collision2() const;
  void set_collision2(const ::std::string& value);
  void set_collision2(const char* value);
  void set_collision2(const char* value, size_t size);
  ::std::string* mutable_collision2();
  ::std::string* release_collision2();
  void set_allocated_collision2(::std::string* collision2);

  // repeated .Indriya.Core.Msgs.Vector3d position = 3;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::Indriya::Core::Msgs::Vector3d& position(int index) const;
  ::Indriya::Core::Msgs::Vector3d* mutable_position(int index);
  ::Indriya::Core::Msgs::Vector3d* add_position();
  const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector3d >&
      position() const;
  ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector3d >*
      mutable_position();

  // repeated .Indriya.Core.Msgs.Vector3d normal = 4;
  int normal_size() const;
  void clear_normal();
  static const int kNormalFieldNumber = 4;
  const ::Indriya::Core::Msgs::Vector3d& normal(int index) const;
  ::Indriya::Core::Msgs::Vector3d* mutable_normal(int index);
  ::Indriya::Core::Msgs::Vector3d* add_normal();
  const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector3d >&
      normal() const;
  ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector3d >*
      mutable_normal();

  // repeated double depth = 5;
  int depth_size() const;
  void clear_depth();
  static const int kDepthFieldNumber = 5;
  double depth(int index) const;
  void set_depth(int index, double value);
  void add_depth(double value);
  const ::google::protobuf::RepeatedField< double >&
      depth() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_depth();

  // repeated .Indriya.Core.Msgs.JointWrench wrench = 6;
  int wrench_size() const;
  void clear_wrench();
  static const int kWrenchFieldNumber = 6;
  const ::Indriya::Core::Msgs::JointWrench& wrench(int index) const;
  ::Indriya::Core::Msgs::JointWrench* mutable_wrench(int index);
  ::Indriya::Core::Msgs::JointWrench* add_wrench();
  const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::JointWrench >&
      wrench() const;
  ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::JointWrench >*
      mutable_wrench();

  // required .Indriya.Core.Msgs.Time time = 7;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 7;
  const ::Indriya::Core::Msgs::Time& time() const;
  ::Indriya::Core::Msgs::Time* mutable_time();
  ::Indriya::Core::Msgs::Time* release_time();
  void set_allocated_time(::Indriya::Core::Msgs::Time* time);

  // required string world = 8;
  bool has_world() const;
  void clear_world();
  static const int kWorldFieldNumber = 8;
  const ::std::string& world() const;
  void set_world(const ::std::string& value);
  void set_world(const char* value);
  void set_world(const char* value, size_t size);
  ::std::string* mutable_world();
  ::std::string* release_world();
  void set_allocated_world(::std::string* world);

  // @@protoc_insertion_point(class_scope:Indriya.Core.Msgs.Contact)
 private:
  inline void set_has_collision1();
  inline void clear_has_collision1();
  inline void set_has_collision2();
  inline void clear_has_collision2();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_world();
  inline void clear_has_world();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr collision1_;
  ::google::protobuf::internal::ArenaStringPtr collision2_;
  ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector3d > position_;
  ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector3d > normal_;
  ::google::protobuf::RepeatedField< double > depth_;
  ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::JointWrench > wrench_;
  ::Indriya::Core::Msgs::Time* time_;
  ::google::protobuf::internal::ArenaStringPtr world_;
  friend void  protobuf_AddDesc_contact_2eproto();
  friend void protobuf_AssignDesc_contact_2eproto();
  friend void protobuf_ShutdownFile_contact_2eproto();

  void InitAsDefaultInstance();
  static Contact* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Contact

// required string collision1 = 1;
inline bool Contact::has_collision1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Contact::set_has_collision1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Contact::clear_has_collision1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Contact::clear_collision1() {
  collision1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collision1();
}
inline const ::std::string& Contact::collision1() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Contact.collision1)
  return collision1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_collision1(const ::std::string& value) {
  set_has_collision1();
  collision1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Contact.collision1)
}
inline void Contact::set_collision1(const char* value) {
  set_has_collision1();
  collision1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.Contact.collision1)
}
inline void Contact::set_collision1(const char* value, size_t size) {
  set_has_collision1();
  collision1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.Contact.collision1)
}
inline ::std::string* Contact::mutable_collision1() {
  set_has_collision1();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Contact.collision1)
  return collision1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_collision1() {
  clear_has_collision1();
  return collision1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_collision1(::std::string* collision1) {
  if (collision1 != NULL) {
    set_has_collision1();
  } else {
    clear_has_collision1();
  }
  collision1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collision1);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Contact.collision1)
}

// required string collision2 = 2;
inline bool Contact::has_collision2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Contact::set_has_collision2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Contact::clear_has_collision2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Contact::clear_collision2() {
  collision2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collision2();
}
inline const ::std::string& Contact::collision2() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Contact.collision2)
  return collision2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_collision2(const ::std::string& value) {
  set_has_collision2();
  collision2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Contact.collision2)
}
inline void Contact::set_collision2(const char* value) {
  set_has_collision2();
  collision2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.Contact.collision2)
}
inline void Contact::set_collision2(const char* value, size_t size) {
  set_has_collision2();
  collision2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.Contact.collision2)
}
inline ::std::string* Contact::mutable_collision2() {
  set_has_collision2();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Contact.collision2)
  return collision2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_collision2() {
  clear_has_collision2();
  return collision2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_collision2(::std::string* collision2) {
  if (collision2 != NULL) {
    set_has_collision2();
  } else {
    clear_has_collision2();
  }
  collision2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collision2);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Contact.collision2)
}

// repeated .Indriya.Core.Msgs.Vector3d position = 3;
inline int Contact::position_size() const {
  return position_.size();
}
inline void Contact::clear_position() {
  position_.Clear();
}
inline const ::Indriya::Core::Msgs::Vector3d& Contact::position(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Contact.position)
  return position_.Get(index);
}
inline ::Indriya::Core::Msgs::Vector3d* Contact::mutable_position(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Contact.position)
  return position_.Mutable(index);
}
inline ::Indriya::Core::Msgs::Vector3d* Contact::add_position() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Contact.position)
  return position_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector3d >&
Contact::position() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Contact.position)
  return position_;
}
inline ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector3d >*
Contact::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Contact.position)
  return &position_;
}

// repeated .Indriya.Core.Msgs.Vector3d normal = 4;
inline int Contact::normal_size() const {
  return normal_.size();
}
inline void Contact::clear_normal() {
  normal_.Clear();
}
inline const ::Indriya::Core::Msgs::Vector3d& Contact::normal(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Contact.normal)
  return normal_.Get(index);
}
inline ::Indriya::Core::Msgs::Vector3d* Contact::mutable_normal(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Contact.normal)
  return normal_.Mutable(index);
}
inline ::Indriya::Core::Msgs::Vector3d* Contact::add_normal() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Contact.normal)
  return normal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector3d >&
Contact::normal() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Contact.normal)
  return normal_;
}
inline ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::Vector3d >*
Contact::mutable_normal() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Contact.normal)
  return &normal_;
}

// repeated double depth = 5;
inline int Contact::depth_size() const {
  return depth_.size();
}
inline void Contact::clear_depth() {
  depth_.Clear();
}
inline double Contact::depth(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Contact.depth)
  return depth_.Get(index);
}
inline void Contact::set_depth(int index, double value) {
  depth_.Set(index, value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Contact.depth)
}
inline void Contact::add_depth(double value) {
  depth_.Add(value);
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Contact.depth)
}
inline const ::google::protobuf::RepeatedField< double >&
Contact::depth() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Contact.depth)
  return depth_;
}
inline ::google::protobuf::RepeatedField< double >*
Contact::mutable_depth() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Contact.depth)
  return &depth_;
}

// repeated .Indriya.Core.Msgs.JointWrench wrench = 6;
inline int Contact::wrench_size() const {
  return wrench_.size();
}
inline void Contact::clear_wrench() {
  wrench_.Clear();
}
inline const ::Indriya::Core::Msgs::JointWrench& Contact::wrench(int index) const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Contact.wrench)
  return wrench_.Get(index);
}
inline ::Indriya::Core::Msgs::JointWrench* Contact::mutable_wrench(int index) {
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Contact.wrench)
  return wrench_.Mutable(index);
}
inline ::Indriya::Core::Msgs::JointWrench* Contact::add_wrench() {
  // @@protoc_insertion_point(field_add:Indriya.Core.Msgs.Contact.wrench)
  return wrench_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::JointWrench >&
Contact::wrench() const {
  // @@protoc_insertion_point(field_list:Indriya.Core.Msgs.Contact.wrench)
  return wrench_;
}
inline ::google::protobuf::RepeatedPtrField< ::Indriya::Core::Msgs::JointWrench >*
Contact::mutable_wrench() {
  // @@protoc_insertion_point(field_mutable_list:Indriya.Core.Msgs.Contact.wrench)
  return &wrench_;
}

// required .Indriya.Core.Msgs.Time time = 7;
inline bool Contact::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Contact::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Contact::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Contact::clear_time() {
  if (time_ != NULL) time_->::Indriya::Core::Msgs::Time::Clear();
  clear_has_time();
}
inline const ::Indriya::Core::Msgs::Time& Contact::time() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Contact.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::Indriya::Core::Msgs::Time* Contact::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::Indriya::Core::Msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Contact.time)
  return time_;
}
inline ::Indriya::Core::Msgs::Time* Contact::release_time() {
  clear_has_time();
  ::Indriya::Core::Msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline void Contact::set_allocated_time(::Indriya::Core::Msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Contact.time)
}

// required string world = 8;
inline bool Contact::has_world() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Contact::set_has_world() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Contact::clear_has_world() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Contact::clear_world() {
  world_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_world();
}
inline const ::std::string& Contact::world() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.Contact.world)
  return world_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_world(const ::std::string& value) {
  set_has_world();
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.Contact.world)
}
inline void Contact::set_world(const char* value) {
  set_has_world();
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.Contact.world)
}
inline void Contact::set_world(const char* value, size_t size) {
  set_has_world();
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.Contact.world)
}
inline ::std::string* Contact::mutable_world() {
  set_has_world();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.Contact.world)
  return world_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_world() {
  clear_has_world();
  return world_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_world(::std::string* world) {
  if (world != NULL) {
    set_has_world();
  } else {
    clear_has_world();
  }
  world_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), world);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.Contact.world)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<Indriya::Core::Msgs::Contact> ContactPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

typedef const boost::shared_ptr<Indriya::Core::Msgs::Contact const> ConstContactPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_contact_2eproto__INCLUDED
