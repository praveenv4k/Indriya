// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sim_event.proto

#ifndef PROTOBUF_sim_5fevent_2eproto__INCLUDED
#define PROTOBUF_sim_5fevent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "world_stats.pb.h"
#include <boost/shared_ptr.hpp>
#include "MsgFactory.h"
// @@protoc_insertion_point(includes)

namespace Indriya {
namespace Core {
namespace Msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sim_5fevent_2eproto();
void protobuf_AssignDesc_sim_5fevent_2eproto();
void protobuf_ShutdownFile_sim_5fevent_2eproto();

class SimEvent;

// ===================================================================

class SimEvent : public ::google::protobuf::Message {
 public:
  SimEvent();
  virtual ~SimEvent();

  SimEvent(const SimEvent& from);

  inline SimEvent& operator=(const SimEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimEvent& default_instance();

  void Swap(SimEvent* other);

  // implements Message ----------------------------------------------

  inline SimEvent* New() const { return New(NULL); }

  SimEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimEvent& from);
  void MergeFrom(const SimEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .Indriya.Core.Msgs.WorldStatistics world_statistics = 3;
  bool has_world_statistics() const;
  void clear_world_statistics();
  static const int kWorldStatisticsFieldNumber = 3;
  const ::Indriya::Core::Msgs::WorldStatistics& world_statistics() const;
  ::Indriya::Core::Msgs::WorldStatistics* mutable_world_statistics();
  ::Indriya::Core::Msgs::WorldStatistics* release_world_statistics();
  void set_allocated_world_statistics(::Indriya::Core::Msgs::WorldStatistics* world_statistics);

  // optional string data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Indriya.Core.Msgs.SimEvent)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_world_statistics();
  inline void clear_has_world_statistics();
  inline void set_has_data();
  inline void clear_has_data();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Indriya::Core::Msgs::WorldStatistics* world_statistics_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend void  protobuf_AddDesc_sim_5fevent_2eproto();
  friend void protobuf_AssignDesc_sim_5fevent_2eproto();
  friend void protobuf_ShutdownFile_sim_5fevent_2eproto();

  void InitAsDefaultInstance();
  static SimEvent* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SimEvent

// required string type = 1;
inline bool SimEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimEvent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimEvent::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& SimEvent::type() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.SimEvent.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimEvent::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.SimEvent.type)
}
inline void SimEvent::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.SimEvent.type)
}
inline void SimEvent::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.SimEvent.type)
}
inline ::std::string* SimEvent::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.SimEvent.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimEvent::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimEvent::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.SimEvent.type)
}

// required string name = 2;
inline bool SimEvent::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimEvent::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimEvent::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SimEvent::name() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.SimEvent.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimEvent::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.SimEvent.name)
}
inline void SimEvent::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.SimEvent.name)
}
inline void SimEvent::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.SimEvent.name)
}
inline ::std::string* SimEvent::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.SimEvent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimEvent::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimEvent::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.SimEvent.name)
}

// required .Indriya.Core.Msgs.WorldStatistics world_statistics = 3;
inline bool SimEvent::has_world_statistics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimEvent::set_has_world_statistics() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimEvent::clear_has_world_statistics() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimEvent::clear_world_statistics() {
  if (world_statistics_ != NULL) world_statistics_->::Indriya::Core::Msgs::WorldStatistics::Clear();
  clear_has_world_statistics();
}
inline const ::Indriya::Core::Msgs::WorldStatistics& SimEvent::world_statistics() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.SimEvent.world_statistics)
  return world_statistics_ != NULL ? *world_statistics_ : *default_instance_->world_statistics_;
}
inline ::Indriya::Core::Msgs::WorldStatistics* SimEvent::mutable_world_statistics() {
  set_has_world_statistics();
  if (world_statistics_ == NULL) {
    world_statistics_ = new ::Indriya::Core::Msgs::WorldStatistics;
  }
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.SimEvent.world_statistics)
  return world_statistics_;
}
inline ::Indriya::Core::Msgs::WorldStatistics* SimEvent::release_world_statistics() {
  clear_has_world_statistics();
  ::Indriya::Core::Msgs::WorldStatistics* temp = world_statistics_;
  world_statistics_ = NULL;
  return temp;
}
inline void SimEvent::set_allocated_world_statistics(::Indriya::Core::Msgs::WorldStatistics* world_statistics) {
  delete world_statistics_;
  world_statistics_ = world_statistics;
  if (world_statistics) {
    set_has_world_statistics();
  } else {
    clear_has_world_statistics();
  }
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.SimEvent.world_statistics)
}

// optional string data = 4;
inline bool SimEvent::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimEvent::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimEvent::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimEvent::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& SimEvent::data() const {
  // @@protoc_insertion_point(field_get:Indriya.Core.Msgs.SimEvent.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimEvent::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Indriya.Core.Msgs.SimEvent.data)
}
inline void SimEvent::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Indriya.Core.Msgs.SimEvent.data)
}
inline void SimEvent::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Indriya.Core.Msgs.SimEvent.data)
}
inline ::std::string* SimEvent::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:Indriya.Core.Msgs.SimEvent.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimEvent::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimEvent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Indriya.Core.Msgs.SimEvent.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<Indriya::Core::Msgs::SimEvent> SimEventPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace Msgs
}  // namespace Core
}  // namespace Indriya

typedef const boost::shared_ptr<Indriya::Core::Msgs::SimEvent const> ConstSimEventPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sim_5fevent_2eproto__INCLUDED
