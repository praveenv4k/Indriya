// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: track_visual.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "track_visual.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* TrackVisual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackVisual_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_track_5fvisual_2eproto() {
  protobuf_AddDesc_track_5fvisual_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "track_visual.proto");
  GOOGLE_CHECK(file != NULL);
  TrackVisual_descriptor_ = file->message_type(0);
  static const int TrackVisual_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackVisual, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackVisual, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackVisual, inherit_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackVisual, min_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackVisual, max_dist_),
  };
  TrackVisual_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackVisual_descriptor_,
      TrackVisual::default_instance_,
      TrackVisual_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackVisual, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrackVisual),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackVisual, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_track_5fvisual_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackVisual_descriptor_, &TrackVisual::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_track_5fvisual_2eproto() {
  delete TrackVisual::default_instance_;
  delete TrackVisual_reflection_;
}

void protobuf_AddDesc_track_5fvisual_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022track_visual.proto\022\016experimot.msgs\"h\n\013"
    "TrackVisual\022\014\n\004name\030\001 \002(\t\022\n\n\002id\030\002 \001(\r\022\033\n"
    "\023inherit_orientation\030\003 \001(\010\022\020\n\010min_dist\030\004"
    " \001(\001\022\020\n\010max_dist\030\005 \001(\001", 142);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "track_visual.proto", &protobuf_RegisterTypes);
  TrackVisual::default_instance_ = new TrackVisual();
  TrackVisual::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_track_5fvisual_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_track_5fvisual_2eproto {
  StaticDescriptorInitializer_track_5fvisual_2eproto() {
    protobuf_AddDesc_track_5fvisual_2eproto();
  }
} static_descriptor_initializer_track_5fvisual_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int TrackVisual::kNameFieldNumber;
const int TrackVisual::kIdFieldNumber;
const int TrackVisual::kInheritOrientationFieldNumber;
const int TrackVisual::kMinDistFieldNumber;
const int TrackVisual::kMaxDistFieldNumber;
#endif  // !_MSC_VER

TrackVisual::TrackVisual()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.TrackVisual)
}

void TrackVisual::InitAsDefaultInstance() {
}

TrackVisual::TrackVisual(const TrackVisual& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.TrackVisual)
}

void TrackVisual::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  inherit_orientation_ = false;
  min_dist_ = 0;
  max_dist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackVisual::~TrackVisual() {
  // @@protoc_insertion_point(destructor:experimot.msgs.TrackVisual)
  SharedDtor();
}

void TrackVisual::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TrackVisual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackVisual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackVisual_descriptor_;
}

const TrackVisual& TrackVisual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_track_5fvisual_2eproto();
  return *default_instance_;
}

TrackVisual* TrackVisual::default_instance_ = NULL;

TrackVisual* TrackVisual::New(::google::protobuf::Arena* arena) const {
  TrackVisual* n = new TrackVisual;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackVisual::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrackVisual*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, max_dist_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrackVisual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.TrackVisual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.TrackVisual.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inherit_orientation;
        break;
      }

      // optional bool inherit_orientation = 3;
      case 3: {
        if (tag == 24) {
         parse_inherit_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_orientation_)));
          set_has_inherit_orientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_min_dist;
        break;
      }

      // optional double min_dist = 4;
      case 4: {
        if (tag == 33) {
         parse_min_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_dist_)));
          set_has_min_dist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_max_dist;
        break;
      }

      // optional double max_dist = 5;
      case 5: {
        if (tag == 41) {
         parse_max_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_dist_)));
          set_has_max_dist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.TrackVisual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.TrackVisual)
  return false;
#undef DO_
}

void TrackVisual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.TrackVisual)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.TrackVisual.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional bool inherit_orientation = 3;
  if (has_inherit_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inherit_orientation(), output);
  }

  // optional double min_dist = 4;
  if (has_min_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_dist(), output);
  }

  // optional double max_dist = 5;
  if (has_max_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_dist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.TrackVisual)
}

::google::protobuf::uint8* TrackVisual::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.TrackVisual)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.TrackVisual.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional bool inherit_orientation = 3;
  if (has_inherit_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inherit_orientation(), target);
  }

  // optional double min_dist = 4;
  if (has_min_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_dist(), target);
  }

  // optional double max_dist = 5;
  if (has_max_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_dist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.TrackVisual)
  return target;
}

int TrackVisual::ByteSize() const {
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[1 / 32] & 30) {
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool inherit_orientation = 3;
    if (has_inherit_orientation()) {
      total_size += 1 + 1;
    }

    // optional double min_dist = 4;
    if (has_min_dist()) {
      total_size += 1 + 8;
    }

    // optional double max_dist = 5;
    if (has_max_dist()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackVisual::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrackVisual* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackVisual*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackVisual::MergeFrom(const TrackVisual& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_inherit_orientation()) {
      set_inherit_orientation(from.inherit_orientation());
    }
    if (from.has_min_dist()) {
      set_min_dist(from.min_dist());
    }
    if (from.has_max_dist()) {
      set_max_dist(from.max_dist());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrackVisual::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackVisual::CopyFrom(const TrackVisual& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackVisual::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TrackVisual::Swap(TrackVisual* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackVisual::InternalSwap(TrackVisual* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(inherit_orientation_, other->inherit_orientation_);
  std::swap(min_dist_, other->min_dist_);
  std::swap(max_dist_, other->max_dist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackVisual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackVisual_descriptor_;
  metadata.reflection = TrackVisual_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackVisual

// required string name = 1;
 bool TrackVisual::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void TrackVisual::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void TrackVisual::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void TrackVisual::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& TrackVisual::name() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.TrackVisual.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackVisual::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.TrackVisual.name)
}
 void TrackVisual::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.TrackVisual.name)
}
 void TrackVisual::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.TrackVisual.name)
}
 ::std::string* TrackVisual::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.TrackVisual.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrackVisual::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackVisual::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.TrackVisual.name)
}

// optional uint32 id = 2;
 bool TrackVisual::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void TrackVisual::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void TrackVisual::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void TrackVisual::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 TrackVisual::id() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.TrackVisual.id)
  return id_;
}
 void TrackVisual::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.TrackVisual.id)
}

// optional bool inherit_orientation = 3;
 bool TrackVisual::has_inherit_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void TrackVisual::set_has_inherit_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
 void TrackVisual::clear_has_inherit_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
 void TrackVisual::clear_inherit_orientation() {
  inherit_orientation_ = false;
  clear_has_inherit_orientation();
}
 bool TrackVisual::inherit_orientation() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.TrackVisual.inherit_orientation)
  return inherit_orientation_;
}
 void TrackVisual::set_inherit_orientation(bool value) {
  set_has_inherit_orientation();
  inherit_orientation_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.TrackVisual.inherit_orientation)
}

// optional double min_dist = 4;
 bool TrackVisual::has_min_dist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void TrackVisual::set_has_min_dist() {
  _has_bits_[0] |= 0x00000008u;
}
 void TrackVisual::clear_has_min_dist() {
  _has_bits_[0] &= ~0x00000008u;
}
 void TrackVisual::clear_min_dist() {
  min_dist_ = 0;
  clear_has_min_dist();
}
 double TrackVisual::min_dist() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.TrackVisual.min_dist)
  return min_dist_;
}
 void TrackVisual::set_min_dist(double value) {
  set_has_min_dist();
  min_dist_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.TrackVisual.min_dist)
}

// optional double max_dist = 5;
 bool TrackVisual::has_max_dist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void TrackVisual::set_has_max_dist() {
  _has_bits_[0] |= 0x00000010u;
}
 void TrackVisual::clear_has_max_dist() {
  _has_bits_[0] &= ~0x00000010u;
}
 void TrackVisual::clear_max_dist() {
  max_dist_ = 0;
  clear_has_max_dist();
}
 double TrackVisual::max_dist() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.TrackVisual.max_dist)
  return max_dist_;
}
 void TrackVisual::set_max_dist(double value) {
  set_has_max_dist();
  max_dist_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.TrackVisual.max_dist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.TrackVisual", TrackVisual)
// @@protoc_insertion_point(global_scope)
