// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projector.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "projector.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace experimot {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Projector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Projector_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_projector_2eproto() {
  protobuf_AddDesc_projector_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "projector.proto");
  GOOGLE_CHECK(file != NULL);
  Projector_descriptor_ = file->message_type(0);
  static const int Projector_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, fov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, near_clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, far_clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, enabled_),
  };
  Projector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Projector_descriptor_,
      Projector::default_instance_,
      Projector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, _has_bits_[0]),
      -1,
      -1,
      sizeof(Projector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_projector_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Projector_descriptor_, &Projector::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_projector_2eproto() {
  delete Projector::default_instance_;
  delete Projector_reflection_;
}

void protobuf_AddDesc_projector_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::experimot::msgs::protobuf_AddDesc_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017projector.proto\022\016experimot.msgs\032\npose."
    "proto\"\247\001\n\tProjector\022\014\n\004name\030\001 \002(\t\022\017\n\007tex"
    "ture\030\002 \001(\t\022\"\n\004pose\030\003 \001(\0132\024.experimot.msg"
    "s.Pose\022\022\n\003fov\030\004 \001(\001:\0050.785\022\026\n\tnear_clip\030"
    "\005 \001(\001:\0030.1\022\024\n\010far_clip\030\006 \001(\001:\00210\022\025\n\007enab"
    "led\030\007 \001(\010:\004true", 215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "projector.proto", &protobuf_RegisterTypes);
  Projector::default_instance_ = new Projector();
  Projector::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_projector_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_projector_2eproto {
  StaticDescriptorInitializer_projector_2eproto() {
    protobuf_AddDesc_projector_2eproto();
  }
} static_descriptor_initializer_projector_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Projector::kNameFieldNumber;
const int Projector::kTextureFieldNumber;
const int Projector::kPoseFieldNumber;
const int Projector::kFovFieldNumber;
const int Projector::kNearClipFieldNumber;
const int Projector::kFarClipFieldNumber;
const int Projector::kEnabledFieldNumber;
#endif  // !_MSC_VER

Projector::Projector()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:experimot.msgs.Projector)
}

void Projector::InitAsDefaultInstance() {
  pose_ = const_cast< ::experimot::msgs::Pose*>(&::experimot::msgs::Pose::default_instance());
}

Projector::Projector(const Projector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:experimot.msgs.Projector)
}

void Projector::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pose_ = NULL;
  fov_ = 0.785;
  near_clip_ = 0.1;
  far_clip_ = 10;
  enabled_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Projector::~Projector() {
  // @@protoc_insertion_point(destructor:experimot.msgs.Projector)
  SharedDtor();
}

void Projector::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete pose_;
  }
}

void Projector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Projector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Projector_descriptor_;
}

const Projector& Projector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projector_2eproto();
  return *default_instance_;
}

Projector* Projector::default_instance_ = NULL;

Projector* Projector::New(::google::protobuf::Arena* arena) const {
  Projector* n = new Projector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Projector::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_texture()) {
      texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::experimot::msgs::Pose::Clear();
    }
    fov_ = 0.785;
    near_clip_ = 0.1;
    far_clip_ = 10;
    enabled_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Projector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:experimot.msgs.Projector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Projector.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_texture;
        break;
      }

      // optional string texture = 2;
      case 2: {
        if (tag == 18) {
         parse_texture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->texture().data(), this->texture().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "experimot.msgs.Projector.texture");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }

      // optional .experimot.msgs.Pose pose = 3;
      case 3: {
        if (tag == 26) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_fov;
        break;
      }

      // optional double fov = 4 [default = 0.785];
      case 4: {
        if (tag == 33) {
         parse_fov:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fov_)));
          set_has_fov();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_near_clip;
        break;
      }

      // optional double near_clip = 5 [default = 0.1];
      case 5: {
        if (tag == 41) {
         parse_near_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &near_clip_)));
          set_has_near_clip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_far_clip;
        break;
      }

      // optional double far_clip = 6 [default = 10];
      case 6: {
        if (tag == 49) {
         parse_far_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &far_clip_)));
          set_has_far_clip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 7 [default = true];
      case 7: {
        if (tag == 56) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:experimot.msgs.Projector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:experimot.msgs.Projector)
  return false;
#undef DO_
}

void Projector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:experimot.msgs.Projector)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Projector.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string texture = 2;
  if (has_texture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texture().data(), this->texture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Projector.texture");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->texture(), output);
  }

  // optional .experimot.msgs.Pose pose = 3;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pose_, output);
  }

  // optional double fov = 4 [default = 0.785];
  if (has_fov()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fov(), output);
  }

  // optional double near_clip = 5 [default = 0.1];
  if (has_near_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->near_clip(), output);
  }

  // optional double far_clip = 6 [default = 10];
  if (has_far_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->far_clip(), output);
  }

  // optional bool enabled = 7 [default = true];
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:experimot.msgs.Projector)
}

::google::protobuf::uint8* Projector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:experimot.msgs.Projector)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Projector.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string texture = 2;
  if (has_texture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texture().data(), this->texture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "experimot.msgs.Projector.texture");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->texture(), target);
  }

  // optional .experimot.msgs.Pose pose = 3;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->pose_, target);
  }

  // optional double fov = 4 [default = 0.785];
  if (has_fov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fov(), target);
  }

  // optional double near_clip = 5 [default = 0.1];
  if (has_near_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->near_clip(), target);
  }

  // optional double far_clip = 6 [default = 10];
  if (has_far_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->far_clip(), target);
  }

  // optional bool enabled = 7 [default = true];
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experimot.msgs.Projector)
  return target;
}

int Projector::ByteSize() const {
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[1 / 32] & 126) {
    // optional string texture = 2;
    if (has_texture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->texture());
    }

    // optional .experimot.msgs.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional double fov = 4 [default = 0.785];
    if (has_fov()) {
      total_size += 1 + 8;
    }

    // optional double near_clip = 5 [default = 0.1];
    if (has_near_clip()) {
      total_size += 1 + 8;
    }

    // optional double far_clip = 6 [default = 10];
    if (has_far_clip()) {
      total_size += 1 + 8;
    }

    // optional bool enabled = 7 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Projector::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Projector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Projector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Projector::MergeFrom(const Projector& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_texture()) {
      set_has_texture();
      texture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_);
    }
    if (from.has_pose()) {
      mutable_pose()->::experimot::msgs::Pose::MergeFrom(from.pose());
    }
    if (from.has_fov()) {
      set_fov(from.fov());
    }
    if (from.has_near_clip()) {
      set_near_clip(from.near_clip());
    }
    if (from.has_far_clip()) {
      set_far_clip(from.far_clip());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Projector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Projector::CopyFrom(const Projector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Projector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  return true;
}

void Projector::Swap(Projector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Projector::InternalSwap(Projector* other) {
  name_.Swap(&other->name_);
  texture_.Swap(&other->texture_);
  std::swap(pose_, other->pose_);
  std::swap(fov_, other->fov_);
  std::swap(near_clip_, other->near_clip_);
  std::swap(far_clip_, other->far_clip_);
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Projector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Projector_descriptor_;
  metadata.reflection = Projector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Projector

// required string name = 1;
 bool Projector::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Projector::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void Projector::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Projector::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Projector::name() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Projector.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Projector::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Projector.name)
}
 void Projector::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Projector.name)
}
 void Projector::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Projector.name)
}
 ::std::string* Projector::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Projector.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Projector::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Projector::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Projector.name)
}

// optional string texture = 2;
 bool Projector::has_texture() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Projector::set_has_texture() {
  _has_bits_[0] |= 0x00000002u;
}
 void Projector::clear_has_texture() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Projector::clear_texture() {
  texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_texture();
}
 const ::std::string& Projector::texture() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Projector.texture)
  return texture_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Projector::set_texture(const ::std::string& value) {
  set_has_texture();
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:experimot.msgs.Projector.texture)
}
 void Projector::set_texture(const char* value) {
  set_has_texture();
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:experimot.msgs.Projector.texture)
}
 void Projector::set_texture(const char* value, size_t size) {
  set_has_texture();
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:experimot.msgs.Projector.texture)
}
 ::std::string* Projector::mutable_texture() {
  set_has_texture();
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Projector.texture)
  return texture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Projector::release_texture() {
  clear_has_texture();
  return texture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Projector::set_allocated_texture(::std::string* texture) {
  if (texture != NULL) {
    set_has_texture();
  } else {
    clear_has_texture();
  }
  texture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texture);
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Projector.texture)
}

// optional .experimot.msgs.Pose pose = 3;
 bool Projector::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Projector::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
 void Projector::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Projector::clear_pose() {
  if (pose_ != NULL) pose_->::experimot::msgs::Pose::Clear();
  clear_has_pose();
}
 const ::experimot::msgs::Pose& Projector::pose() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Projector.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
 ::experimot::msgs::Pose* Projector::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::experimot::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:experimot.msgs.Projector.pose)
  return pose_;
}
 ::experimot::msgs::Pose* Projector::release_pose() {
  clear_has_pose();
  ::experimot::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
 void Projector::set_allocated_pose(::experimot::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:experimot.msgs.Projector.pose)
}

// optional double fov = 4 [default = 0.785];
 bool Projector::has_fov() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Projector::set_has_fov() {
  _has_bits_[0] |= 0x00000008u;
}
 void Projector::clear_has_fov() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Projector::clear_fov() {
  fov_ = 0.785;
  clear_has_fov();
}
 double Projector::fov() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Projector.fov)
  return fov_;
}
 void Projector::set_fov(double value) {
  set_has_fov();
  fov_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Projector.fov)
}

// optional double near_clip = 5 [default = 0.1];
 bool Projector::has_near_clip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Projector::set_has_near_clip() {
  _has_bits_[0] |= 0x00000010u;
}
 void Projector::clear_has_near_clip() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Projector::clear_near_clip() {
  near_clip_ = 0.1;
  clear_has_near_clip();
}
 double Projector::near_clip() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Projector.near_clip)
  return near_clip_;
}
 void Projector::set_near_clip(double value) {
  set_has_near_clip();
  near_clip_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Projector.near_clip)
}

// optional double far_clip = 6 [default = 10];
 bool Projector::has_far_clip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Projector::set_has_far_clip() {
  _has_bits_[0] |= 0x00000020u;
}
 void Projector::clear_has_far_clip() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Projector::clear_far_clip() {
  far_clip_ = 10;
  clear_has_far_clip();
}
 double Projector::far_clip() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Projector.far_clip)
  return far_clip_;
}
 void Projector::set_far_clip(double value) {
  set_has_far_clip();
  far_clip_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Projector.far_clip)
}

// optional bool enabled = 7 [default = true];
 bool Projector::has_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Projector::set_has_enabled() {
  _has_bits_[0] |= 0x00000040u;
}
 void Projector::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Projector::clear_enabled() {
  enabled_ = true;
  clear_has_enabled();
}
 bool Projector::enabled() const {
  // @@protoc_insertion_point(field_get:experimot.msgs.Projector.enabled)
  return enabled_;
}
 void Projector::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:experimot.msgs.Projector.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace experimot

EX_REGISTER_STATIC_MSG("experimot.msgs.Projector", Projector)
// @@protoc_insertion_point(global_scope)
